!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCEL_COLUMN	fkeys.c	/^	ACCEL_COLUMN,$/;"	e	enum:__anon12	file:
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/andrew\/src\/hexchat\/missing aclocal-1.14$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACTION_COLUMN	fkeys.c	/^	ACTION_COLUMN,$/;"	e	enum:__anon12	file:
ALL_LINGUAS	Makefile	/^ALL_LINGUAS = $/;"	m
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CPPFLAGS	Makefile	/^AM_CPPFLAGS = $(GUI_CFLAGS) -DLOCALEDIR=\\"$(localedir)\\"$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_OBJC	Makefile	/^AM_V_OBJC = $(am__v_OBJC_$(V))$/;"	m
AM_V_OBJCLD	Makefile	/^AM_V_OBJCLD = $(am__v_OBJCLD_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AR	Makefile	/^AR = ar$/;"	m
ATTR_BEEP	xtext.h	35;"	d
ATTR_BLINK	xtext.h	34;"	d
ATTR_BOLD	xtext.h	32;"	d
ATTR_COLOR	xtext.h	33;"	d
ATTR_HIDDEN	xtext.h	36;"	d
ATTR_ITALICS	xtext.h	40;"	d
ATTR_ITALICS2	xtext.h	37;"	d
ATTR_RESET	xtext.h	38;"	d
ATTR_REVERSE	xtext.h	39;"	d
ATTR_UNDERLINE	xtext.h	41;"	d
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/andrew\/src\/hexchat\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/andrew\/src\/hexchat\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/andrew\/src\/hexchat\/missing automake-1.14$/;"	m
AWAY_OFFSET	menu.c	1793;"	d	file:
AWK	Makefile	/^AWK = gawk$/;"	m
BACKWARD	xtext.c	4341;"	d	file:
BACKWARD	xtext.c	4500;"	d	file:
BUILT_SOURCES	Makefile	/^BUILT_SOURCES = resources.c$/;"	m
CATALOGS	Makefile	/^CATALOGS = $/;"	m
CATOBJEXT	Makefile	/^CATOBJEXT = .gmo$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CCAS	Makefile	/^CCAS = gcc$/;"	m
CCASDEPMODE	Makefile	/^CCASDEPMODE = depmode=gcc3$/;"	m
CCASFLAGS	Makefile	/^CCASFLAGS =  -g -O0$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CCOL_COLOR	dccgui.c	/^	CCOL_COLOR,	\/* GdkColor * *\/$/;"	e	enum:__anon10	file:
CCOL_DCC	dccgui.c	/^	CCOL_DCC,	\/* struct DCC * *\/$/;"	e	enum:__anon10	file:
CCOL_NICK	dccgui.c	/^	CCOL_NICK,$/;"	e	enum:__anon10	file:
CCOL_RECV	dccgui.c	/^	CCOL_RECV,$/;"	e	enum:__anon10	file:
CCOL_SENT	dccgui.c	/^	CCOL_SENT,$/;"	e	enum:__anon10	file:
CCOL_START	dccgui.c	/^	CCOL_START,$/;"	e	enum:__anon10	file:
CCOL_STATUS	dccgui.c	/^	CCOL_STATUS,$/;"	e	enum:__anon10	file:
CFLAGS	Makefile	/^CFLAGS =  -g -O0 -pipe -funsigned-char -Wall -Wextra -Wno-unused-parameter -Wno-sign-compare -Wno-pointer-sign -Wno-missing-field-initializers -Wno-unused-result -Werror=declaration-after-statement$/;"	m
CHANNEL_TREE	servlistgui.c	/^		CHANNEL_TREE,$/;"	e	enum:__anon21	file:
CHAN_COLUMN	ignoregui.c	/^	CHAN_COLUMN,$/;"	e	enum:__anon13	file:
CLEANFILES	Makefile	/^CLEANFILES = $(BUILT_SOURCES)$/;"	m
CLOSE_OFFSET	menu.c	1759;"	d	file:
CMD_COLUMN	editlist.c	/^	CMD_COLUMN,$/;"	e	enum:__anon11	file:
CMD_TREE	servlistgui.c	/^		CMD_TREE,$/;"	e	enum:__anon21	file:
CN_COLUMNS	dccgui.c	/^	CN_COLUMNS$/;"	e	enum:__anon10	file:
COLOUR_COLUMN	notifygui.c	/^	COLOUR_COLUMN,$/;"	e	enum:__anon16	file:
COL_ATTR	chanview.c	35;"	d	file:
COL_AWAY	palette.h	33;"	d
COL_BG	palette.h	28;"	d
COL_CHAN	chanview.c	34;"	d	file:
COL_CHANNEL	chanlist.c	/^	COL_CHANNEL,$/;"	e	enum:__anon2	file:
COL_COLOR	dccgui.c	/^	COL_COLOR,	\/* GdkColor *\/$/;"	e	enum:__anon9	file:
COL_DCC	dccgui.c	/^	COL_DCC, \/* struct DCC * *\/$/;"	e	enum:__anon9	file:
COL_ETA	dccgui.c	/^	COL_ETA,$/;"	e	enum:__anon9	file:
COL_FG	palette.h	27;"	d
COL_FILE	dccgui.c	/^	COL_FILE,$/;"	e	enum:__anon9	file:
COL_GDKCOLOR	userlistgui.c	/^	COL_GDKCOLOR=4	\/* GdkColor * *\/$/;"	e	enum:__anon28	file:
COL_HILIGHT	palette.h	31;"	d
COL_HOST	userlistgui.c	/^	COL_HOST=2,		\/* char * *\/$/;"	e	enum:__anon28	file:
COL_MARKER	palette.h	29;"	d
COL_MARK_BG	palette.h	26;"	d
COL_MARK_FG	palette.h	25;"	d
COL_NAME	chanview.c	33;"	d	file:
COL_NEW_DATA	palette.h	30;"	d
COL_NEW_MSG	palette.h	32;"	d
COL_NICK	dccgui.c	/^	COL_NICK,$/;"	e	enum:__anon9	file:
COL_NICK	userlistgui.c	/^	COL_NICK=1,		\/* char * *\/$/;"	e	enum:__anon28	file:
COL_PERC	dccgui.c	/^	COL_PERC,$/;"	e	enum:__anon9	file:
COL_PIX	userlistgui.c	/^	COL_PIX=0,		\/* GdkPixbuf * *\/$/;"	e	enum:__anon28	file:
COL_PIXBUF	chanview.c	36;"	d	file:
COL_POS	dccgui.c	/^	COL_POS,$/;"	e	enum:__anon9	file:
COL_SIZE	dccgui.c	/^	COL_SIZE,$/;"	e	enum:__anon9	file:
COL_SPEED	dccgui.c	/^	COL_SPEED,$/;"	e	enum:__anon9	file:
COL_SPELL	palette.h	34;"	d
COL_STATUS	dccgui.c	/^	COL_STATUS,$/;"	e	enum:__anon9	file:
COL_TOPIC	chanlist.c	/^	COL_TOPIC,$/;"	e	enum:__anon2	file:
COL_TYPE	dccgui.c	/^	COL_TYPE,$/;"	e	enum:__anon9	file:
COL_USER	userlistgui.c	/^	COL_USER=3,		\/* struct User * *\/$/;"	e	enum:__anon28	file:
COL_USERS	chanlist.c	/^	COL_USERS,$/;"	e	enum:__anon2	file:
COMMON_CFLAGS	Makefile	/^COMMON_CFLAGS = -pthread -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/include  -DG_DISABLE_SINGLE_INCLUDES   -pthread -I\/usr\/include\/dbus-1.0 -I\/usr\/lib\/x86_64-linux-gnu\/dbus-1.0\/include -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/include  -D_REENTRANT $/;"	m
COMMON_LIBS	Makefile	/^COMMON_LIBS = -Wl,--export-dynamic -lgmodule-2.0 -pthread -lgio-2.0 -lgobject-2.0 -lglib-2.0  -lssl -lcrypto  -lproxy  -ldbus-glib-1 -ldbus-1 -lgobject-2.0 -lgthread-2.0 -pthread -lglib-2.0  -lcanberra $/;"	m
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMP_BUF	fkeys.c	1425;"	d	file:
COMP_BUF	fkeys.c	1695;"	d	file:
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CTCP_COLUMN	ignoregui.c	/^	CTCP_COLUMN,$/;"	e	enum:__anon13	file:
CUSTOM_IS_LIST	custom-list.h	33;"	d
CUSTOM_IS_LIST_CLASS	custom-list.h	34;"	d
CUSTOM_LIST	custom-list.h	31;"	d
CUSTOM_LIST_CLASS	custom-list.h	32;"	d
CUSTOM_LIST_COL_NAME	custom-list.h	/^	CUSTOM_LIST_COL_NAME,$/;"	e	enum:__anon6
CUSTOM_LIST_COL_TOPIC	custom-list.h	/^	CUSTOM_LIST_COL_TOPIC,$/;"	e	enum:__anon6
CUSTOM_LIST_COL_USERS	custom-list.h	/^	CUSTOM_LIST_COL_USERS,$/;"	e	enum:__anon6
CUSTOM_LIST_GET_CLASS	custom-list.h	35;"	d
CUSTOM_LIST_N_COLUMNS	custom-list.h	/^	CUSTOM_LIST_N_COLUMNS$/;"	e	enum:__anon6
CUSTOM_TYPE_LIST	custom-list.h	30;"	d
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CustomList	custom-list.h	/^typedef struct _CustomList CustomList;$/;"	t	typeref:struct:_CustomList
CustomListClass	custom-list.h	/^typedef struct _CustomListClass CustomListClass;$/;"	t	typeref:struct:_CustomListClass
D1_COLUMN	fkeys.c	/^	D1_COLUMN,$/;"	e	enum:__anon12	file:
D2_COLUMN	fkeys.c	/^	D2_COLUMN,$/;"	e	enum:__anon12	file:
DATADIRNAME	Makefile	/^DATADIRNAME = share$/;"	m
DATE_COLUMN	banlist.c	/^	DATE_COLUMN,$/;"	e	enum:__anon1	file:
DBUS_BINDING_TOOL	Makefile	/^DBUS_BINDING_TOOL = \/usr\/bin\/dbus-binding-tool$/;"	m
DBUS_CFLAGS	Makefile	/^DBUS_CFLAGS = -pthread -I\/usr\/include\/dbus-1.0 -I\/usr\/lib\/x86_64-linux-gnu\/dbus-1.0\/include -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/include $/;"	m
DBUS_LIBS	Makefile	/^DBUS_LIBS = -ldbus-glib-1 -ldbus-1 -lgobject-2.0 -lgthread-2.0 -pthread -lglib-2.0 $/;"	m
DBUS_SERVICES_DIR	Makefile	/^DBUS_SERVICES_DIR = \/usr\/local\/share\/dbus-1\/services$/;"	m
DCC_COLUMN	ignoregui.c	/^	DCC_COLUMN,$/;"	e	enum:__anon13	file:
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DESC_COLUMN	plugingui.c	/^	DESC_COLUMN,$/;"	e	enum:__anon17	file:
DETACH_OFFSET	menu.c	1757;"	d	file:
DIFF	setup.c	2143;"	d	file:
DISPLAY_NAME	fe-gtk.h	25;"	d
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(top_srcdir)\/m4\/clang-analyze.am $(srcdir)\/Makefile.in \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(am__hexchat_SOURCES_DIST)$/;"	m
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DSYMUTIL	Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EMPH_BOLD	xtext.c	176;"	d	file:
EMPH_HIDDEN	xtext.c	177;"	d	file:
EMPH_ITAL	xtext.c	175;"	d	file:
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EVENT_COLUMN	textgui.c	/^	EVENT_COLUMN,$/;"	e	enum:__anon26	file:
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXTRA_DIST	Makefile	/^EXTRA_DIST = \\$/;"	m
EnchantDictDescribeFn	sexy-spell-entry.c	/^typedef void (*EnchantDictDescribeFn) (const char * const lang_tag,$/;"	t	file:
FGREP	Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FILE_COLUMN	plugingui.c	/^	FILE_COLUMN,$/;"	e	enum:__anon17	file:
FIRSTLAST	xtext.c	4342;"	d	file:
FIRSTLAST	xtext.c	4501;"	d	file:
FOCUS_NEW_ALL	chanview.h	51;"	d
FOCUS_NEW_NONE	chanview.h	53;"	d
FOCUS_NEW_ONLY_ASKED	chanview.h	52;"	d
FROM_COLUMN	banlist.c	/^	FROM_COLUMN,$/;"	e	enum:__anon1	file:
GDK_MULTIHEAD_SAFE	xtext.c	24;"	d	file:
GETTEXT_PACKAGE	Makefile	/^GETTEXT_PACKAGE = hexchat$/;"	m
GET_CHAN	chanlist.c	64;"	d	file:
GET_CHAN	custom-list.h	61;"	d
GET_MODEL	chanlist.c	69;"	d	file:
GLIB_CFLAGS	Makefile	/^GLIB_CFLAGS = -pthread -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/include $/;"	m
GLIB_COMPILE_RESOURCES	Makefile	/^GLIB_COMPILE_RESOURCES = \/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/glib-compile-resources$/;"	m
GLIB_DISABLE_DEPRECATION_WARNINGS	fkeys.c	33;"	d	file:
GLIB_GENMARSHAL	Makefile	/^GLIB_GENMARSHAL = glib-genmarshal$/;"	m
GLIB_LIBS	Makefile	/^GLIB_LIBS = -Wl,--export-dynamic -lgmodule-2.0 -pthread -lgio-2.0 -lgobject-2.0 -lglib-2.0 $/;"	m
GLIB_MKENUMS	Makefile	/^GLIB_MKENUMS = glib-mkenums$/;"	m
GMOFILES	Makefile	/^GMOFILES = $/;"	m
GMSGFMT	Makefile	/^GMSGFMT = \/usr\/bin\/msgfmt$/;"	m
GOBJECT_QUERY	Makefile	/^GOBJECT_QUERY = gobject-query$/;"	m
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GTK_CFLAGS	Makefile	/^GTK_CFLAGS = -pthread -I\/usr\/include\/gtk-3.0 -I\/usr\/include\/at-spi2-atk\/2.0 -I\/usr\/include\/at-spi-2.0 -I\/usr\/include\/dbus-1.0 -I\/usr\/lib\/x86_64-linux-gnu\/dbus-1.0\/include -I\/usr\/include\/gtk-3.0 -I\/usr\/include\/gio-unix-2.0\/ -I\/usr\/include\/cairo -I\/usr\/include\/pango-1.0 -I\/usr\/include\/harfbuzz -I\/usr\/include\/pango-1.0 -I\/usr\/include\/atk-1.0 -I\/usr\/include\/cairo -I\/usr\/include\/pixman-1 -I\/usr\/include\/freetype2 -I\/usr\/include\/libpng12 -I\/usr\/include\/gdk-pixbuf-2.0 -I\/usr\/include\/libpng12 -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/include $/;"	m
GTK_IS_XTEXT	xtext.h	28;"	d
GTK_IS_XTEXT_CLASS	xtext.h	29;"	d
GTK_LIBS	Makefile	/^GTK_LIBS = -lgtk-3 -lgdk-3 -lpangocairo-1.0 -lpango-1.0 -latk-1.0 -lcairo-gobject -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0 $/;"	m
GTK_MAC_CFLAGS	Makefile	/^GTK_MAC_CFLAGS = $/;"	m
GTK_MAC_LIBS	Makefile	/^GTK_MAC_LIBS = $/;"	m
GTK_MATCH_CUR	xtext.c	2662;"	d	file:
GTK_MATCH_END	xtext.c	2661;"	d	file:
GTK_MATCH_MID	xtext.c	2660;"	d	file:
GTK_MATCH_START	xtext.c	2659;"	d	file:
GTK_SPELL_CODETABLE_H	sexy-iso-codes.h	23;"	d
GTK_TYPE_XTEXT	xtext.h	25;"	d
GTK_XTEXT	xtext.h	26;"	d
GTK_XTEXT_CLASS	xtext.h	27;"	d
GTK_XTEXT_GET_CLASS	xtext.h	30;"	d
GUI_BORDER	maingui.c	56;"	d	file:
GUI_CFLAGS	Makefile	/^GUI_CFLAGS =  -pthread -I\/usr\/include\/gtk-3.0 -I\/usr\/include\/at-spi2-atk\/2.0 -I\/usr\/include\/at-spi-2.0 -I\/usr\/include\/dbus-1.0 -I\/usr\/lib\/x86_64-linux-gnu\/dbus-1.0\/include -I\/usr\/include\/gtk-3.0 -I\/usr\/include\/gio-unix-2.0\/ -I\/usr\/include\/cairo -I\/usr\/include\/pango-1.0 -I\/usr\/include\/harfbuzz -I\/usr\/include\/pango-1.0 -I\/usr\/include\/atk-1.0 -I\/usr\/include\/cairo -I\/usr\/include\/pixman-1 -I\/usr\/include\/freetype2 -I\/usr\/include\/libpng12 -I\/usr\/include\/gdk-pixbuf-2.0 -I\/usr\/include\/libpng12 -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/include  -DGDK_PIXBUF_DISABLE_SINGLE_INCLUDES -DGTK_DISABLE_SINGLE_INCLUDES -pthread -I\/usr\/include\/gdk-pixbuf-2.0 -I\/usr\/include\/libpng12 -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/include $/;"	m
GUI_LIBS	Makefile	/^GUI_LIBS =  -lgtk-3 -lgdk-3 -lpangocairo-1.0 -lpango-1.0 -latk-1.0 -lcairo-gobject -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0  -lnotify -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0  -Wl,--export-dynamic -lgmodule-2.0 -pthread -lgio-2.0 -lgobject-2.0 -lglib-2.0  -lssl -lcrypto  -lproxy  -ldbus-glib-1 -ldbus-1 -lgobject-2.0 -lgthread-2.0 -pthread -lglib-2.0  -lcanberra $/;"	m
GUI_SPACING	maingui.c	55;"	d	file:
G_DEFINE_CONSTRUCTOR	resources.c	4978;"	d	file:
G_DEFINE_CONSTRUCTOR	resources.c	4986;"	d	file:
G_DEFINE_CONSTRUCTOR	resources.c	5008;"	d	file:
G_DEFINE_CONSTRUCTOR	resources.c	5033;"	d	file:
G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA	resources.c	5003;"	d	file:
G_DEFINE_CONSTRUCTOR_NEEDS_PRAGMA	resources.c	5028;"	d	file:
G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS	resources.c	5006;"	d	file:
G_DEFINE_CONSTRUCTOR_PRAGMA_ARGS	resources.c	5031;"	d	file:
G_DEFINE_DESTRUCTOR	resources.c	4979;"	d	file:
G_DEFINE_DESTRUCTOR	resources.c	4992;"	d	file:
G_DEFINE_DESTRUCTOR	resources.c	5015;"	d	file:
G_DEFINE_DESTRUCTOR	resources.c	5038;"	d	file:
G_DEFINE_DESTRUCTOR_NEEDS_PRAGMA	resources.c	5004;"	d	file:
G_DEFINE_DESTRUCTOR_NEEDS_PRAGMA	resources.c	5029;"	d	file:
G_DEFINE_DESTRUCTOR_PRAGMA_ARGS	resources.c	5013;"	d	file:
G_DEFINE_DESTRUCTOR_PRAGMA_ARGS	resources.c	5036;"	d	file:
G_HAS_CONSTRUCTORS	resources.c	4976;"	d	file:
G_HAS_CONSTRUCTORS	resources.c	4984;"	d	file:
G_HAS_CONSTRUCTORS	resources.c	5000;"	d	file:
G_HAS_CONSTRUCTORS	resources.c	5026;"	d	file:
GtkXText	xtext.h	/^typedef struct _GtkXText GtkXText;$/;"	t	typeref:struct:_GtkXText
GtkXTextClass	xtext.h	/^typedef struct _GtkXTextClass GtkXTextClass;$/;"	t	typeref:struct:_GtkXTextClass
GtkXTextForeach	xtext.h	/^typedef void (*GtkXTextForeach) (GtkXText *xtext, unsigned char *text, void *data);$/;"	t
HEXCHATLIBDIR	Makefile	/^HEXCHATLIBDIR = \/usr\/local\/lib\/hexchat\/plugins$/;"	m
HEXCHATSHAREDIR	Makefile	/^HEXCHATSHAREDIR = \/usr\/local\/share$/;"	m
HEXCHAT_ASCII_H	ascii.h	21;"	d
HEXCHAT_BANLIST_H	banlist.h	21;"	d
HEXCHAT_CHANLIST_H	chanlist.h	21;"	d
HEXCHAT_CHANVIEW_H	chanview.h	21;"	d
HEXCHAT_CUSTOM_LIST_H	custom-list.h	21;"	d
HEXCHAT_EDITLIST_H	editlist.h	21;"	d
HEXCHAT_FE_GTK_H	fe-gtk.h	21;"	d
HEXCHAT_FKEYS_H	fkeys.h	21;"	d
HEXCHAT_GTKUTIL_H	gtkutil.h	21;"	d
HEXCHAT_JOIND_H	joind.h	21;"	d
HEXCHAT_MAINGUI_H	maingui.h	21;"	d
HEXCHAT_MENU_H	menu.h	21;"	d
HEXCHAT_NOTIFYGUI_H	notifygui.h	21;"	d
HEXCHAT_PALETTE_H	palette.h	21;"	d
HEXCHAT_PIXMAPS_H	pixmaps.h	21;"	d
HEXCHAT_PLUGINGUI_H	plugingui.h	21;"	d
HEXCHAT_PLUGIN_NOTIFICATION_H	plugin-notification.h	20;"	d
HEXCHAT_PLUGIN_TRAY_H	plugin-tray.h	21;"	d
HEXCHAT_RAWLOG_H	rawlog.h	21;"	d
HEXCHAT_SERVLISTGUI_H	servlistgui.h	21;"	d
HEXCHAT_SETUP_H	setup.h	21;"	d
HEXCHAT_TEXTGUI_H	textgui.h	21;"	d
HEXCHAT_URLGRAB_H	urlgrab.h	21;"	d
HEXCHAT_USERLISTGUI_H	userlistgui.h	21;"	d
HEXCHAT_XTEXT_H	xtext.h	21;"	d
ICON_FILE	plugin-tray.c	60;"	d	file:
ICON_HILIGHT	plugin-tray.c	59;"	d	file:
ICON_MSG	plugin-tray.c	58;"	d	file:
ICON_NORMAL	plugin-tray.c	57;"	d	file:
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTOBJEXT	Makefile	/^INSTOBJEXT = .mo$/;"	m
INTLLIBS	Makefile	/^INTLLIBS = $/;"	m
INTLTOOL_EXTRACT	Makefile	/^INTLTOOL_EXTRACT = \/usr\/bin\/intltool-extract$/;"	m
INTLTOOL_MERGE	Makefile	/^INTLTOOL_MERGE = \/usr\/bin\/intltool-merge$/;"	m
INTLTOOL_PERL	Makefile	/^INTLTOOL_PERL = \/usr\/bin\/perl$/;"	m
INTLTOOL_UPDATE	Makefile	/^INTLTOOL_UPDATE = \/usr\/bin\/intltool-update$/;"	m
INTLTOOL_V_MERGE	Makefile	/^INTLTOOL_V_MERGE = $(INTLTOOL__v_MERGE_$(V))$/;"	m
INTLTOOL_V_MERGE_OPTIONS	Makefile	/^INTLTOOL_V_MERGE_OPTIONS = $(intltool__v_merge_options_$(V))$/;"	m
INTLTOOL__v_MERGE_	Makefile	/^INTLTOOL__v_MERGE_ = $(INTLTOOL__v_MERGE_$(AM_DEFAULT_VERBOSITY))$/;"	m
INTLTOOL__v_MERGE_0	Makefile	/^INTLTOOL__v_MERGE_0 = @echo "  ITMRG " $@;$/;"	m
INVITE_COLUMN	ignoregui.c	/^	INVITE_COLUMN,$/;"	e	enum:__anon13	file:
ISOCODES_CFLAGS	Makefile	/^ISOCODES_CFLAGS = $/;"	m
ISOCODES_LIBS	Makefile	/^ISOCODES_LIBS = $/;"	m
ISO_3166_DOMAIN	sexy-iso-codes.c	29;"	d	file:
ISO_639_DOMAIN	sexy-iso-codes.c	28;"	d	file:
KBSTATE_ACT	fkeys.c	887;"	d	file:
KBSTATE_DT1	fkeys.c	888;"	d	file:
KBSTATE_DT2	fkeys.c	889;"	d	file:
KBSTATE_KEY	fkeys.c	886;"	d	file:
KBSTATE_MOD	fkeys.c	885;"	d	file:
KEY_COLUMN	fkeys.c	/^	KEY_COLUMN,$/;"	e	enum:__anon12	file:
KEY_MAX_ACTIONS	fkeys.c	73;"	d	file:
LABEL_INDENT	setup.c	48;"	d	file:
LAST_SIGNAL	sexy-spell-entry.c	/^	LAST_SIGNAL$/;"	e	enum:__anon24	file:
LAST_SIGNAL	xtext.c	/^	LAST_SIGNAL$/;"	e	enum:__anon29	file:
LD	Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LIBCANBERRA_CFLAGS	Makefile	/^LIBCANBERRA_CFLAGS = -D_REENTRANT $/;"	m
LIBCANBERRA_LIBS	Makefile	/^LIBCANBERRA_LIBS = -lcanberra $/;"	m
LIBNOTIFY_CFLAGS	Makefile	/^LIBNOTIFY_CFLAGS = -pthread -I\/usr\/include\/gdk-pixbuf-2.0 -I\/usr\/include\/libpng12 -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/x86_64-linux-gnu\/glib-2.0\/include $/;"	m
LIBNOTIFY_LIBS	Makefile	/^LIBNOTIFY_LIBS = -lnotify -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0 $/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBPCI_CFLAGS	Makefile	/^LIBPCI_CFLAGS = $/;"	m
LIBPCI_LIBS	Makefile	/^LIBPCI_LIBS = -lpci $/;"	m
LIBPROXY_CFLAGS	Makefile	/^LIBPROXY_CFLAGS = $/;"	m
LIBPROXY_LIBS	Makefile	/^LIBPROXY_LIBS = -lproxy $/;"	m
LIBS	Makefile	/^LIBS =  $/;"	m
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LINK	Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LIPO	Makefile	/^LIPO = $/;"	m
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LTCOMPILE	Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTOBJCCOMPILE	Makefile	/^LTOBJCCOMPILE = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \\$/;"	m
MAINT	Makefile	/^MAINT = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/andrew\/src\/hexchat\/missing makeinfo$/;"	m
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MARGIN	xtext.c	25;"	d	file:
MARKER_IS_SET	xtext.h	/^	MARKER_IS_SET,$/;"	e	enum:marker_reset_reason_e
MARKER_RESET_BY_CLEAR	xtext.h	/^	MARKER_RESET_BY_CLEAR$/;"	e	enum:marker_reset_reason_e
MARKER_RESET_BY_KILL	xtext.h	/^	MARKER_RESET_BY_KILL,$/;"	e	enum:marker_reset_reason_e
MARKER_RESET_MANUALLY	xtext.h	/^	MARKER_RESET_MANUALLY,$/;"	e	enum:marker_reset_reason_e
MARKER_WAS_NEVER_SET	xtext.h	/^	MARKER_WAS_NEVER_SET,$/;"	e	enum:marker_reset_reason_e
MASK_COLUMN	banlist.c	/^	MASK_COLUMN,$/;"	e	enum:__anon1	file:
MASK_COLUMN	ignoregui.c	/^	MASK_COLUMN,$/;"	e	enum:__anon13	file:
MAX_COL	palette.h	35;"	d
MDTOOL	Makefile	/^MDTOOL = no$/;"	m
MENUBAR_OFFSET	menu.c	1765;"	d	file:
MENU_ID_AWAY	menu.h	52;"	d
MENU_ID_DISCONNECT	menu.h	60;"	d
MENU_ID_FULLSCREEN	menu.h	64;"	d
MENU_ID_HEXCHAT	menu.h	65;"	d
MENU_ID_JOIN	menu.h	62;"	d
MENU_ID_LAYOUT_TABS	menu.h	58;"	d
MENU_ID_LAYOUT_TREE	menu.h	59;"	d
MENU_ID_MENUBAR	menu.h	53;"	d
MENU_ID_MODEBUTTONS	menu.h	57;"	d
MENU_ID_NUM	fe-gtk.h	166;"	d
MENU_ID_RECONNECT	menu.h	61;"	d
MENU_ID_TOPICBAR	menu.h	54;"	d
MENU_ID_ULBUTTONS	menu.h	56;"	d
MENU_ID_USERLIST	menu.h	55;"	d
MENU_ID_USERMENU	menu.h	63;"	d
METRE_OFFSET	menu.c	1778;"	d	file:
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKINSTALLDIRS	Makefile	/^MKINSTALLDIRS = .\/mkinstalldirs$/;"	m
MODE_BAN	banlist.h	/^	MODE_BAN,$/;"	e	enum:banlist_modes_e
MODE_CT	banlist.h	/^	MODE_CT$/;"	e	enum:banlist_modes_e
MODE_EXEMPT	banlist.h	/^	MODE_EXEMPT,$/;"	e	enum:banlist_modes_e
MODE_INVITE	banlist.h	/^	MODE_INVITE,$/;"	e	enum:banlist_modes_e
MODE_QUIET	banlist.h	/^	MODE_QUIET,$/;"	e	enum:banlist_modes_e
MODULE_SYMBOL	sexy-spell-entry.c	184;"	d	file:
MODULE_SYMBOL	sexy-spell-entry.c	204;"	d	file:
MSGFMT	Makefile	/^MSGFMT = \/usr\/bin\/msgfmt$/;"	m
MSGFMT_OPTS	Makefile	/^MSGFMT_OPTS = -c$/;"	m
MSGMERGE	Makefile	/^MSGMERGE = \/usr\/bin\/msgmerge$/;"	m
M_END	menu.c	/^	M_END,$/;"	e	enum:__anon15	file:
M_MENUITEM	menu.c	/^	M_MENUITEM,$/;"	e	enum:__anon15	file:
M_MENUPIX	menu.c	/^	M_MENUPIX,$/;"	e	enum:__anon15	file:
M_MENURADIO	menu.c	/^	M_MENURADIO,$/;"	e	enum:__anon15	file:
M_MENUSTOCK	menu.c	/^	M_MENUSTOCK,$/;"	e	enum:__anon15	file:
M_MENUSUB	menu.c	/^	M_MENUSUB$/;"	e	enum:__anon15	file:
M_MENUTOG	menu.c	/^	M_MENUTOG,$/;"	e	enum:__anon15	file:
M_NEWMENU	menu.c	/^	M_NEWMENU,$/;"	e	enum:__anon15	file:
M_SEP	menu.c	/^	M_SEP,$/;"	e	enum:__anon15	file:
NAME_COLUMN	editlist.c	/^	NAME_COLUMN,$/;"	e	enum:__anon11	file:
NAME_COLUMN	plugingui.c	/^	NAME_COLUMN,$/;"	e	enum:__anon17	file:
NEXTPREVIOUS	xtext.c	4343;"	d	file:
NEXTPREVIOUS	xtext.c	4502;"	d	file:
NM	Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = $/;"	m
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOTICE_COLUMN	ignoregui.c	/^	NOTICE_COLUMN,$/;"	e	enum:__anon13	file:
NPS_COLUMN	notifygui.c	/^	NPS_COLUMN, 	\/* struct notify_per_server * *\/$/;"	e	enum:__anon16	file:
NUM_FLAG_WIDS	fe-gtk.h	48;"	d
N_COLUMNS	banlist.c	/^	N_COLUMNS$/;"	e	enum:__anon1	file:
N_COLUMNS	chanlist.c	/^	N_COLUMNS$/;"	e	enum:__anon2	file:
N_COLUMNS	dccgui.c	/^	N_COLUMNS$/;"	e	enum:__anon9	file:
N_COLUMNS	editlist.c	/^	N_COLUMNS$/;"	e	enum:__anon11	file:
N_COLUMNS	fkeys.c	/^	N_COLUMNS$/;"	e	enum:__anon12	file:
N_COLUMNS	ignoregui.c	/^	N_COLUMNS$/;"	e	enum:__anon13	file:
N_COLUMNS	notifygui.c	/^	N_COLUMNS$/;"	e	enum:__anon16	file:
N_COLUMNS	plugingui.c	/^	N_COLUMNS$/;"	e	enum:__anon17	file:
N_COLUMNS	textgui.c	/^	N_COLUMNS$/;"	e	enum:__anon26	file:
N_COLUMNS	urlgrab.c	/^	N_COLUMNS$/;"	e	enum:__anon27	file:
N_TREES	servlistgui.c	/^		N_TREES,$/;"	e	enum:__anon21	file:
OBJC	Makefile	/^OBJC = gcc$/;"	m
OBJCCOMPILE	Makefile	/^OBJCCOMPILE = $(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
OBJCDEPMODE	Makefile	/^OBJCDEPMODE = depmode=gcc3$/;"	m
OBJCFLAGS	Makefile	/^OBJCFLAGS =  -g -O0$/;"	m
OBJCLD	Makefile	/^OBJCLD = $(OBJC)$/;"	m
OBJCLINK	Makefile	/^OBJCLINK = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OPENSSL_CFLAGS	Makefile	/^OPENSSL_CFLAGS = $/;"	m
OPENSSL_LIBS	Makefile	/^OPENSSL_LIBS = -lssl -lcrypto $/;"	m
OTOOL	Makefile	/^OTOOL = $/;"	m
OTOOL64	Makefile	/^OTOOL64 = $/;"	m
PACKAGE	Makefile	/^PACKAGE = hexchat$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = $/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = HexChat$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = HexChat 2.11.0$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = hexchat$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 2.11.0$/;"	m
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PERL	Makefile	/^PERL = perl$/;"	m
PERL_CFLAGS	Makefile	/^PERL_CFLAGS =  -D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fwrapv -fno-strict-aliasing -pipe -I\/usr\/local\/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64  -I\/usr\/lib\/x86_64-linux-gnu\/perl\/5.20\/CORE $/;"	m
PERL_LDFLAGS	Makefile	/^PERL_LDFLAGS = -Wl,-E  -fstack-protector -L\/usr\/local\/lib  -L\/usr\/lib\/x86_64-linux-gnu\/perl\/5.20\/CORE -lperl -ldl -lm -lpthread -lc -lcrypt$/;"	m
PKG_CONFIG	Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
PKG_CONFIG_LIBDIR	Makefile	/^PKG_CONFIG_LIBDIR = $/;"	m
PKG_CONFIG_PATH	Makefile	/^PKG_CONFIG_PATH = $/;"	m
PLUGIN_C	plugingui.c	26;"	d	file:
PLUGIN_LDFLAGS	Makefile	/^PLUGIN_LDFLAGS = -avoid-version$/;"	m
POFILES	Makefile	/^POFILES = $/;"	m
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
POSUB	Makefile	/^POSUB = po$/;"	m
POS_BOTTOM	maingui.c	/^	POS_BOTTOM = 6,$/;"	e	enum:__anon14	file:
POS_BOTTOMLEFT	maingui.c	/^	POS_BOTTOMLEFT = 2,$/;"	e	enum:__anon14	file:
POS_BOTTOMRIGHT	maingui.c	/^	POS_BOTTOMRIGHT = 4,$/;"	e	enum:__anon14	file:
POS_HIDDEN	maingui.c	/^	POS_HIDDEN = 7$/;"	e	enum:__anon14	file:
POS_INVALID	maingui.c	/^	POS_INVALID = 0,$/;"	e	enum:__anon14	file:
POS_TOP	maingui.c	/^	POS_TOP = 5,	\/* for tabs only *\/$/;"	e	enum:__anon14	file:
POS_TOPLEFT	maingui.c	/^	POS_TOPLEFT = 1,$/;"	e	enum:__anon14	file:
POS_TOPRIGHT	maingui.c	/^	POS_TOPRIGHT = 3,$/;"	e	enum:__anon14	file:
PO_IN_DATADIR_FALSE	Makefile	/^PO_IN_DATADIR_FALSE = $/;"	m
PO_IN_DATADIR_TRUE	Makefile	/^PO_IN_DATADIR_TRUE = $/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRIV_COLUMN	ignoregui.c	/^	PRIV_COLUMN,$/;"	e	enum:__anon13	file:
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PY_CFLAGS	Makefile	/^PY_CFLAGS = -I\/usr\/include\/python2.7 -I\/usr\/include\/x86_64-linux-gnu\/python2.7 $/;"	m
PY_LIBS	Makefile	/^PY_LIBS = -lpython2.7 $/;"	m
PrintTextLine	textgui.c	/^PrintTextLine (xtext_buffer *xtbuf, unsigned char *text, int len, int indent, time_t timet)$/;"	f	file:
PrintTextRaw	textgui.c	/^PrintTextRaw (void *xtbuf, unsigned char *text, int indent, time_t stamp)$/;"	f
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
REFRESH_TIMEOUT	xtext.c	26;"	d	file:
RENDER_FLUSH	xtext.c	2709;"	d	file:
ROW_COLUMN	textgui.c	/^	ROW_COLUMN,$/;"	e	enum:__anon26	file:
RPL_BANLIST	banlist.h	28;"	d
RPL_ENDOFBANLIST	banlist.h	29;"	d
RPL_ENDOFEXCEPTLIST	banlist.h	33;"	d
RPL_ENDOFINVITELIST	banlist.h	31;"	d
RPL_ENDOFQUIETLIST	banlist.h	35;"	d
RPL_EXCEPTLIST	banlist.h	32;"	d
RPL_INVITELIST	banlist.h	30;"	d
RPL_QUIETLIST	banlist.h	34;"	d
SEARCH_CHANGE	maingui.c	2792;"	d	file:
SEARCH_NEXT	maingui.c	2793;"	d	file:
SEARCH_OFFSET	menu.c	1827;"	d	file:
SEARCH_PREVIOUS	maingui.c	2794;"	d	file:
SEARCH_REFRESH	maingui.c	2795;"	d	file:
SECTION	resources.c	4;"	d	file:
SECTION	resources.c	6;"	d	file:
SED	Makefile	/^SED = \/bin\/sed$/;"	m
SEEN_COLUMN	notifygui.c	/^	SEEN_COLUMN,$/;"	e	enum:__anon16	file:
SERVER_COLUMN	notifygui.c	/^	SERVER_COLUMN,$/;"	e	enum:__anon16	file:
SERVER_TREE	servlistgui.c	/^		SERVER_TREE,$/;"	e	enum:__anon21	file:
SERVLIST_X_PADDING	servlistgui.c	39;"	d	file:
SERVLIST_Y_PADDING	servlistgui.c	40;"	d	file:
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SET_SCROLL_ADJUSTMENTS	xtext.c	/^	SET_SCROLL_ADJUSTMENTS,$/;"	e	enum:__anon29	file:
SEXY_IS_SPELL_ENTRY	sexy-spell-entry.h	30;"	d
SEXY_IS_SPELL_ENTRY_CLASS	sexy-spell-entry.h	31;"	d
SEXY_SPELL_ENTRY	sexy-spell-entry.h	28;"	d
SEXY_SPELL_ENTRY_CLASS	sexy-spell-entry.h	29;"	d
SEXY_SPELL_ENTRY_GET_CLASS	sexy-spell-entry.h	32;"	d
SEXY_SPELL_ERROR	sexy-spell-entry.h	34;"	d
SEXY_SPELL_ERROR_BACKEND	sexy-spell-entry.h	/^	SEXY_SPELL_ERROR_BACKEND,$/;"	e	enum:__anon25
SEXY_TYPE_SPELL_ENTRY	sexy-spell-entry.h	27;"	d
SHELL	Makefile	/^SHELL = \/bin\/bash$/;"	m
SORT_ID_CHANNEL	custom-list.h	/^	SORT_ID_CHANNEL,$/;"	e	enum:__anon7
SORT_ID_TOPIC	custom-list.h	/^	SORT_ID_TOPIC$/;"	e	enum:__anon7
SORT_ID_USERS	custom-list.h	/^	SORT_ID_USERS,$/;"	e	enum:__anon7
SOURCES	Makefile	/^SOURCES = $(hexchat_SOURCES)$/;"	m
SPELL_ENTRY_GET_POS	fe-gtk.h	187;"	d
SPELL_ENTRY_GET_TEXT	fe-gtk.h	184;"	d
SPELL_ENTRY_INSERT	fe-gtk.h	189;"	d
SPELL_ENTRY_SET_EDITABLE	fe-gtk.h	186;"	d
SPELL_ENTRY_SET_POS	fe-gtk.h	188;"	d
SPELL_ENTRY_SET_TEXT	fe-gtk.h	185;"	d
STATE_ALT	fkeys.h	25;"	d
STATE_CTRL	fkeys.h	27;"	d
STATE_CTRL	fkeys.h	29;"	d
STATE_SHIFT	fkeys.h	24;"	d
STATUS_COLUMN	notifygui.c	/^	STATUS_COLUMN,$/;"	e	enum:__anon16	file:
STRIP	Makefile	/^STRIP = strip$/;"	m
STRIP_WHITESPACE	fkeys.c	891;"	d	file:
ST_3OGGLE	setup.c	/^	ST_3OGGLE,$/;"	e	enum:__anon22	file:
ST_ALERTHEAD	setup.c	/^	ST_ALERTHEAD$/;"	e	enum:__anon22	file:
ST_EFILE	setup.c	/^	ST_EFILE,$/;"	e	enum:__anon22	file:
ST_EFOLDER	setup.c	/^	ST_EFOLDER,$/;"	e	enum:__anon22	file:
ST_EFONT	setup.c	/^	ST_EFONT,$/;"	e	enum:__anon22	file:
ST_END	setup.c	/^	ST_END,$/;"	e	enum:__anon22	file:
ST_ENTRY	setup.c	/^	ST_ENTRY,$/;"	e	enum:__anon22	file:
ST_HEADER	setup.c	/^	ST_HEADER,$/;"	e	enum:__anon22	file:
ST_HSCALE	setup.c	/^	ST_HSCALE,$/;"	e	enum:__anon22	file:
ST_LABEL	setup.c	/^	ST_LABEL,$/;"	e	enum:__anon22	file:
ST_MENU	setup.c	/^	ST_MENU,$/;"	e	enum:__anon22	file:
ST_NUMBER	setup.c	/^	ST_NUMBER,$/;"	e	enum:__anon22	file:
ST_RADIO	setup.c	/^	ST_RADIO,$/;"	e	enum:__anon22	file:
ST_TOGGLE	setup.c	/^	ST_TOGGLE,$/;"	e	enum:__anon22	file:
ST_TOGGLR	setup.c	/^	ST_TOGGLR,$/;"	e	enum:__anon22	file:
SexySpellEntry	sexy-spell-entry.h	/^typedef struct _SexySpellEntry      SexySpellEntry;$/;"	t	typeref:struct:_SexySpellEntry
SexySpellEntryClass	sexy-spell-entry.h	/^typedef struct _SexySpellEntryClass SexySpellEntryClass;$/;"	t	typeref:struct:_SexySpellEntryClass
SexySpellEntryPriv	sexy-spell-entry.h	/^typedef struct _SexySpellEntryPriv  SexySpellEntryPriv;$/;"	t	typeref:struct:_SexySpellEntryPriv
SexySpellError	sexy-spell-entry.h	/^} SexySpellError;$/;"	t	typeref:enum:__anon25
TABS_OFFSET	menu.c	1773;"	d	file:
TAG_IRC	maingui.c	71;"	d	file:
TAG_UTIL	maingui.c	72;"	d	file:
TARGET_COMPOUND_TEXT	xtext.c	/^	TARGET_COMPOUND_TEXT$/;"	e	enum:__anon30	file:
TARGET_STRING	xtext.c	/^	TARGET_STRING,$/;"	e	enum:__anon30	file:
TARGET_TEXT	xtext.c	/^	TARGET_TEXT,$/;"	e	enum:__anon30	file:
TARGET_UTF8_STRING	xtext.c	/^	TARGET_UTF8_STRING,$/;"	e	enum:__anon30	file:
TEXT_COLUMN	textgui.c	/^	TEXT_COLUMN,$/;"	e	enum:__anon26	file:
TIMEOUT	plugin-tray.c	61;"	d	file:
TOSML	custom-list.c	622;"	d	file:
TS_CUSTOM	plugin-tray.c	/^	TS_CUSTOM \/* plugin *\/$/;"	e	enum:__anon18	file:
TS_FILEOFFER	plugin-tray.c	/^	TS_FILEOFFER,$/;"	e	enum:__anon18	file:
TS_HIGHLIGHT	plugin-tray.c	/^	TS_HIGHLIGHT,$/;"	e	enum:__anon18	file:
TS_MESSAGE	plugin-tray.c	/^	TS_MESSAGE,$/;"	e	enum:__anon18	file:
TS_NONE	plugin-tray.c	/^	TS_NONE,$/;"	e	enum:__anon18	file:
TYPE_COLUMN	banlist.c	/^	TYPE_COLUMN,$/;"	e	enum:__anon1	file:
TrayIcon	plugin-tray.c	/^typedef GdkPixbuf* TrayIcon;$/;"	t	file:
TrayStatus	plugin-tray.c	/^} TrayStatus;$/;"	t	typeref:enum:__anon18	file:
UNIGNORE_COLUMN	ignoregui.c	/^	UNIGNORE_COLUMN,$/;"	e	enum:__anon13	file:
URL_COLUMN	urlgrab.c	/^	URL_COLUMN,$/;"	e	enum:__anon27	file:
USER_COLUMN	notifygui.c	/^	USER_COLUMN,$/;"	e	enum:__anon16	file:
USE_NLS	Makefile	/^USE_NLS = yes$/;"	m
VERSION	Makefile	/^VERSION = 2.11.0$/;"	m
VERSION_COLUMN	plugingui.c	/^	VERSION_COLUMN,$/;"	e	enum:__anon17	file:
VIEW_BOTH	dccgui.c	104;"	d	file:
VIEW_DOWNLOAD	dccgui.c	102;"	d	file:
VIEW_UPLOAD	dccgui.c	103;"	d	file:
WANTARPA	dccgui.c	27;"	d	file:
WANTSOCKET	dccgui.c	26;"	d	file:
WORDWRAP_LIMIT	xtext.c	27;"	d	file:
WORD_CHECK	sexy-spell-entry.c	/^	WORD_CHECK,$/;"	e	enum:__anon24	file:
WORD_CLICK	xtext.c	/^	WORD_CLICK,$/;"	e	enum:__anon29	file:
WS_FOCUSED	plugin-tray.c	/^	WS_FOCUSED,$/;"	e	enum:__anon19	file:
WS_HIDDEN	plugin-tray.c	/^	WS_HIDDEN$/;"	e	enum:__anon19	file:
WS_NORMAL	plugin-tray.c	/^	WS_NORMAL,$/;"	e	enum:__anon19	file:
WinStatus	plugin-tray.c	/^} WinStatus;$/;"	t	typeref:enum:__anon19	file:
XCMENU_DOLIST	menu.c	93;"	d	file:
XCMENU_DOLIST	menu.h	46;"	d
XCMENU_MARKUP	menu.c	95;"	d	file:
XCMENU_MARKUP	menu.h	48;"	d
XCMENU_MNEMONIC	menu.c	96;"	d	file:
XCMENU_MNEMONIC	menu.h	49;"	d
XCMENU_SHADED	menu.c	94;"	d	file:
XCMENU_SHADED	menu.h	47;"	d
XGETTEXT	Makefile	/^XGETTEXT = \/usr\/bin\/xgettext$/;"	m
XTEXT_BG	xtext.h	49;"	d
XTEXT_COLS	xtext.h	45;"	d
XTEXT_FG	xtext.h	48;"	d
XTEXT_MARKER	xtext.h	50;"	d
XTEXT_MARK_BG	xtext.h	47;"	d
XTEXT_MARK_FG	xtext.h	46;"	d
XTEXT_MAX_COLOR	xtext.h	51;"	d
XTEXT_MIRC_COLS	xtext.h	44;"	d
_CustomList	custom-list.h	/^struct _CustomList$/;"	s
_CustomListClass	custom-list.h	/^struct _CustomListClass$/;"	s
_FILE_OFFSET_BITS	gtkutil.c	18;"	d	file:
_GtkXText	xtext.h	/^struct _GtkXText$/;"	s
_GtkXTextClass	xtext.h	/^struct _GtkXTextClass$/;"	s
_SEXY_SPELL_ENTRY_H_	sexy-spell-entry.h	19;"	d
_SexySpellEntry	sexy-spell-entry.h	/^struct _SexySpellEntry$/;"	s
_SexySpellEntryClass	sexy-spell-entry.h	/^struct _SexySpellEntryClass$/;"	s
_SexySpellEntryPriv	sexy-spell-entry.c	/^struct _SexySpellEntryPriv$/;"	s	file:
_chan	chanview.c	/^struct _chan$/;"	s	file:
_chanview	chanview.c	/^struct _chanview$/;"	s	file:
abort_button	dccgui.c	/^	GtkWidget *abort_button;$/;"	m	struct:dccwindow	file:
abort_chat_clicked	dccgui.c	/^abort_chat_clicked (GtkWidget * wid, gpointer none)$/;"	f	file:
abort_clicked	dccgui.c	/^abort_clicked (GtkWidget * wid, gpointer none)$/;"	f	file:
about_dialog_close	menu.c	/^about_dialog_close (GtkDialog *dialog, int response, gpointer data)$/;"	f	file:
about_dialog_openurl	menu.c	/^about_dialog_openurl (GtkAboutDialog *dialog, char *uri, gpointer data)$/;"	f	file:
abs_builddir	Makefile	/^abs_builddir = \/home\/andrew\/src\/hexchat\/src\/fe-gtk$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/andrew\/src\/hexchat\/src\/fe-gtk$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/andrew\/src\/hexchat$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/andrew\/src\/hexchat$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_ct_OBJC	Makefile	/^ac_ct_OBJC = gcc$/;"	m
accept_button	dccgui.c	/^	GtkWidget *accept_button;$/;"	m	struct:dccwindow	file:
accept_chat_clicked	dccgui.c	/^accept_chat_clicked (GtkWidget * wid, gpointer none)$/;"	f	file:
accept_clicked	dccgui.c	/^accept_clicked (GtkWidget * wid, gpointer none)$/;"	f	file:
action	fkeys.c	/^	int action;						  \/* Index into key_actions *\/$/;"	m	struct:key_binding	file:
active_tab	maingui.c	/^static chan *active_tab = NULL;	\/* active tab *\/$/;"	v	file:
add_io_tag	xtext.h	/^	gint add_io_tag;				  \/* "" when adding new text *\/$/;"	m	struct:_GtkXText
add_to_dictionary	sexy-spell-entry.c	/^add_to_dictionary(GtkWidget *menuitem, SexySpellEntry *entry)$/;"	f	file:
address_label	dccgui.c	/^	GtkWidget *address_label;$/;"	m	struct:dccwindow	file:
adj	xtext.h	/^	GtkAdjustment *adj;$/;"	m	struct:_GtkXText
advanced_settings	setup.c	/^static const setting advanced_settings[] =$/;"	v	file:
alert_settings	setup.c	/^static const setting alert_settings[] =$/;"	v	file:
alert_settings_nonotifications	setup.c	/^static const setting alert_settings_nonotifications[] =$/;"	v	file:
alert_settings_unity	setup.c	/^static const setting alert_settings_unity[] =$/;"	v	file:
alert_settings_unityandnonotifications	setup.c	/^static const setting alert_settings_unityandnonotifications[] =$/;"	v	file:
alignment	resources.c	/^static const SECTION union { const guint8 data[39503]; const double alignment; void * const ptr;}  hexchat_resource_data = { {$/;"	m	union:__anon20	file:
allow_closure	chanview.c	/^	short allow_closure;	\/* allow it to be closed when it still has children? *\/$/;"	m	struct:_chan	file:
am__DEPENDENCIES_1	Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/ac-check-cflags.m4 \\$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dirstamp	Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__hexchat_SOURCES_DIST	Makefile	/^am__hexchat_SOURCES_DIST = ascii.c banlist.c chanlist.c chanview.c \\$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__objects_1	Makefile	/^am__objects_1 = notifications\/hexchat-notification-libnotify.$(OBJEXT)$/;"	m
am__objects_2	Makefile	/^am__objects_2 = hexchat-plugingui.$(OBJEXT)$/;"	m
am__objects_3	Makefile	/^am__objects_3 = hexchat-sexy-iso-codes.$(OBJEXT)$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_OBJCLD_	Makefile	/^am__v_OBJCLD_ = $(am__v_OBJCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_OBJCLD_0	Makefile	/^am__v_OBJCLD_0 = @echo "  OBJCLD  " $@;$/;"	m
am__v_OBJCLD_1	Makefile	/^am__v_OBJCLD_1 = $/;"	m
am__v_OBJC_	Makefile	/^am__v_OBJC_ = $(am__v_OBJC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_OBJC_0	Makefile	/^am__v_OBJC_0 = @echo "  OBJC    " $@;$/;"	m
am__v_OBJC_1	Makefile	/^am__v_OBJC_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	Makefile	/^am__v_lt_1 = $/;"	m
am_hexchat_OBJECTS	Makefile	/^am_hexchat_OBJECTS = hexchat-ascii.$(OBJEXT) hexchat-banlist.$(OBJEXT) \\$/;"	m
analysis_verbose	Makefile	/^analysis_verbose = $(analysis_verbose_$(V))$/;"	m
analysis_verbose_	Makefile	/^analysis_verbose_ = $(analysis_verbose_$(AM_DEFAULT_VERBOSITY))$/;"	m
analysis_verbose_0	Makefile	/^analysis_verbose_0 = @echo "  CCSA    " $@; $(COMPILE) --analyze $< -o $@;$/;"	m
analysis_verbose_1	Makefile	/^analysis_verbose_1 = $(COMPILE) --analyze $< -o $@;$/;"	m
appearance_settings	setup.c	/^static const setting appearance_settings[] =$/;"	v	file:
arg_cfgdir	fe-gtk.c	/^static char *arg_cfgdir = NULL;$/;"	v	file:
arg_minimize	fe-gtk.c	/^static gint arg_minimize = 0;$/;"	v	file:
arg_show_autoload	fe-gtk.c	/^static gint arg_show_autoload = 0;$/;"	v	file:
arg_show_config	fe-gtk.c	/^static gint arg_show_config = 0;$/;"	v	file:
arg_show_version	fe-gtk.c	/^static gint arg_show_version = 0;$/;"	v	file:
ascent	xtext.h	/^		int ascent;$/;"	m	struct:_GtkXText::pangofont
ascii_click	ascii.c	/^ascii_click (GtkWidget * wid, gpointer userdata)$/;"	f	file:
ascii_enter	ascii.c	/^ascii_enter (GtkWidget * wid, GdkEventCrossing *event, GtkWidget *label)$/;"	f	file:
ascii_open	ascii.c	/^ascii_open (void)$/;"	f
attr_list	sexy-spell-entry.c	/^	PangoAttrList        *attr_list;$/;"	m	struct:_SexySpellEntryPriv	file:
attr_lists	xtext.c	/^static PangoAttrList *attr_lists[4];$/;"	v	file:
auto_indent	xtext.h	/^	unsigned int auto_indent:1;$/;"	m	struct:_GtkXText
away_list	maingui.c	/^static PangoAttrList *away_list;$/;"	v	file:
b1	chanview-tabs.c	/^	GtkWidget *b1;		\/* button1 *\/$/;"	m	struct:__anon4	file:
b2	chanview-tabs.c	/^	GtkWidget *b2;		\/* button2 *\/$/;"	m	struct:__anon4	file:
backcolor	xtext.h	/^	unsigned int backcolor:1;$/;"	m	struct:_GtkXText
backend_deinit	xtext.c	/^backend_deinit (GtkXText *xtext)$/;"	f	file:
backend_draw_text_emph	xtext.c	/^backend_draw_text_emph (GtkXText *xtext, int dofill, GdkGC *gc, int x, int y,$/;"	f	file:
backend_font_close	xtext.c	/^backend_font_close (GtkXText *xtext)$/;"	f	file:
backend_font_open	xtext.c	/^backend_font_open (GtkXText *xtext, char *name)$/;"	f	file:
backend_font_open_real	xtext.c	/^backend_font_open_real (char *name)$/;"	f	file:
backend_get_text_width_emph	xtext.c	/^backend_get_text_width_emph (GtkXText *xtext, guchar *str, int len, int emphasis)$/;"	f	file:
backend_get_text_width_slp	xtext.c	/^backend_get_text_width_slp (GtkXText *xtext, guchar *str, GSList *slp)$/;"	f	file:
backend_init	xtext.c	/^backend_init (GtkXText *xtext)$/;"	f	file:
balloonlist	setup.c	/^static const int balloonlist[3] =$/;"	v	file:
banlist	fe-gtk.h	/^	banlist_info *banlist;$/;"	m	struct:restore_gui
banlist_add_selected_cb	banlist.c	/^banlist_add_selected_cb (GtkTreeModel *model, GtkTreePath *path, GtkTreeIter *iter, gpointer data)$/;"	f	file:
banlist_button_pressed	banlist.c	/^banlist_button_pressed (GtkWidget *wid, GdkEventButton *event, gpointer userdata)$/;"	f	file:
banlist_clear	banlist.c	/^banlist_clear (GtkWidget * wid, banlist_info *banl)$/;"	f	file:
banlist_clear_cb	banlist.c	/^banlist_clear_cb (GtkDialog *dialog, gint response, gpointer data)$/;"	f	file:
banlist_closegui	banlist.c	/^banlist_closegui (GtkWidget *wid, banlist_info *banl)$/;"	f	file:
banlist_copyentry	banlist.c	/^banlist_copyentry (GtkWidget *menuitem, GtkTreeView *view)$/;"	f	file:
banlist_crop	banlist.c	/^banlist_crop (GtkWidget * wid, banlist_info *banl)$/;"	f	file:
banlist_date_sort	banlist.c	/^banlist_date_sort (GtkTreeModel *model, GtkTreeIter *a, GtkTreeIter *b, gpointer user_data)$/;"	f
banlist_do_refresh	banlist.c	/^banlist_do_refresh (banlist_info *banl)$/;"	f	file:
banlist_info	banlist.h	/^} banlist_info;$/;"	t	typeref:struct:banlist_info_s
banlist_info_s	banlist.h	/^typedef struct banlist_info_s {$/;"	s
banlist_modes	banlist.h	/^} banlist_modes;$/;"	t	typeref:enum:banlist_modes_e
banlist_modes_e	banlist.h	/^typedef enum banlist_modes_e {$/;"	g
banlist_opengui	banlist.c	/^banlist_opengui (struct session *sess)$/;"	f
banlist_refresh	banlist.c	/^banlist_refresh (GtkWidget * wid, banlist_info *banl)$/;"	f	file:
banlist_select_changed	banlist.c	/^banlist_select_changed (GtkWidget *item, banlist_info *banl)$/;"	f	file:
banlist_sensitize	banlist.c	/^banlist_sensitize (banlist_info *banl)$/;"	f	file:
banlist_strptime	banlist.c	/^banlist_strptime (char *ti, struct tm *tm)$/;"	f	file:
banlist_toggle	banlist.c	/^banlist_toggle (GtkWidget *item, gpointer data)$/;"	f	file:
banlist_treeview_new	banlist.c	/^banlist_treeview_new (GtkWidget *box, banlist_info *banl)$/;"	f	file:
banlist_unban	banlist.c	/^banlist_unban (GtkWidget * wid, banlist_info *banl)$/;"	f	file:
banlist_unban_inner	banlist.c	/^banlist_unban_inner (gpointer none, banlist_info *banl, int mode_num)$/;"	f	file:
bantypemenu	setup.c	/^static const char *const bantypemenu[] = $/;"	v	file:
bar	fe-gtk.h	/^		*bar,				\/* connecting progress bar *\/$/;"	m	struct:session_gui
bartag	fe-gtk.h	/^	int bartag;		\/*connecting progressbar timeout *\/$/;"	m	struct:session_gui
beeplist	setup.c	/^static const int beeplist[3] =$/;"	v	file:
bgc	xtext.h	/^	GdkGC *bgc;						  \/* backing pixmap *\/$/;"	m	struct:_GtkXText
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = hexchat$(EXEEXT)$/;"	m
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bit	banlist.h	/^	int bit;			\/* Mask bit, e.g., 1<<MODE_BAN  *\/$/;"	m	struct:mode_info_s
blink_item	plugin-tray.c	/^blink_item (unsigned int *setting, GtkWidget *menu, char *label)$/;"	f	file:
bold_label	servlistgui.c	/^bold_label (char *text)$/;"	f	file:
box	chanview.c	/^	GtkWidget *box;	\/* the box we destroy when changing implementations *\/$/;"	m	struct:_chanview	file:
broker	sexy-spell-entry.c	/^	struct EnchantBroker *broker;$/;"	m	struct:_SexySpellEntryPriv	typeref:struct:_SexySpellEntryPriv::EnchantBroker	file:
browse_dcc_folder	dccgui.c	/^browse_dcc_folder (void)$/;"	f	file:
browse_folder	dccgui.c	/^browse_folder (char *dir)$/;"	f	file:
buffer	fe-gtk.h	/^	void *buffer;		\/* xtext_Buffer *\/$/;"	m	struct:restore_gui
buffer	xtext.h	/^	xtext_buffer *buffer;$/;"	m	struct:_GtkXText
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_spelling_menu	sexy-spell-entry.c	/^build_spelling_menu(SexySpellEntry *entry, const gchar *word)$/;"	f	file:
build_suggestion_menu	sexy-spell-entry.c	/^build_suggestion_menu(SexySpellEntry *entry, GtkWidget *menu, struct EnchantDict *dict, const gchar *word)$/;"	f	file:
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
but_clear	banlist.h	/^	GtkWidget *but_clear;$/;"	m	struct:banlist_info_s
but_crop	banlist.h	/^	GtkWidget *but_crop;$/;"	m	struct:banlist_info_s
but_refresh	banlist.h	/^	GtkWidget *but_refresh;$/;"	m	struct:banlist_info_s
but_remove	banlist.h	/^	GtkWidget *but_remove;$/;"	m	struct:banlist_info_s
button_box	fe-gtk.h	/^		*button_box,	\/* userlist buttons' box *\/$/;"	m	struct:session_gui
button_box_parent	fe-gtk.h	/^		*button_box_parent,$/;"	m	struct:session_gui
button_down	xtext.h	/^	unsigned int button_down:1;$/;"	m	struct:_GtkXText
c_graph	fe-gtk.h	/^	unsigned int c_graph:1;	\/* connecting graph, is there one? *\/$/;"	m	struct:restore_gui
ca_con	fe-gtk.c	/^static ca_context *ca_con;$/;"	v	file:
callback	gtkutil.c	/^	filereqcallback callback;$/;"	m	struct:file_req	file:
callback	menu.c	/^	void *callback;$/;"	m	struct:mymenu	file:
cancel_button	setup.c	/^static GtkWidget *cancel_button;$/;"	v	file:
capable	banlist.h	/^	int capable;	\/* MODE bitmask *\/$/;"	m	struct:banlist_info_s
cata	setup.c	/^static const char *const cata[] =$/;"	v	file:
cb_compare	chanview.c	/^	int (*cb_compare) (void *a, void *b);$/;"	m	struct:_chanview	file:
cb_contextmenu	chanview.c	/^	gboolean (*cb_contextmenu) (chanview *, chan *, int tag, void *userdata, GdkEventButton *);$/;"	m	struct:_chanview	file:
cb_focus	chanview.c	/^	void (*cb_focus) (chanview *, chan *, int tag, void *userdata);$/;"	m	struct:_chanview	file:
cb_xbutton	chanview.c	/^	void (*cb_xbutton) (chanview *, chan *, int tag, void *userdata);$/;"	m	struct:_chanview	file:
chan	chanview.h	/^typedef struct _chan chan;$/;"	t	typeref:struct:_chan
chan_emancipate_children	chanview.c	/^chan_emancipate_children (chan *ch)$/;"	f	file:
chan_flags	maingui.c	/^static const char chan_flags[] = { 'c', 'n', 't', 'i', 'm', 'l', 'k' };$/;"	v	file:
chan_focus	chanview.c	/^chan_focus (chan *ch)$/;"	f
chan_get_parent	chanview.c	/^chan_get_parent (chan *ch)$/;"	f
chan_get_tag	chanview.c	/^chan_get_tag (chan *ch)$/;"	f
chan_get_userdata	chanview.c	/^chan_get_userdata (chan *ch)$/;"	f
chan_is_collapsed	chanview.c	/^chan_is_collapsed (chan *ch)$/;"	f
chan_move	chanview.c	/^chan_move (chan *ch, int delta)$/;"	f
chan_move_family	chanview.c	/^chan_move_family (chan *ch, int delta)$/;"	f
chan_remove	chanview.c	/^chan_remove (chan *ch, gboolean force)$/;"	f
chan_rename	chanview.c	/^chan_rename (chan *ch, char *name, int trunc_len)$/;"	f
chan_set_color	chanview.c	/^chan_set_color (chan *ch, PangoAttrList *list)$/;"	f
chanlist_add_column	chanlist.c	/^chanlist_add_column (GtkWidget *tree, int textcol, int size, char *title, gboolean right_justified)$/;"	f	file:
chanlist_build_gui_list	chanlist.c	/^chanlist_build_gui_list (server *serv)$/;"	f	file:
chanlist_button_cb	chanlist.c	/^chanlist_button_cb (GtkTreeView *tree, GdkEventButton *event, server *serv)$/;"	f	file:
chanlist_caption_is_stale	fe-gtk.h	/^	gboolean chanlist_caption_is_stale;$/;"	m	struct:server_gui
chanlist_channels_found_count	fe-gtk.h	/^	guint chanlist_channels_found_count;	\/* channel total for \/LIST operation *\/$/;"	m	struct:server_gui
chanlist_channels_shown_count	fe-gtk.h	/^	guint chanlist_channels_shown_count;	\/* total number of displayed $/;"	m	struct:server_gui
chanlist_closegui	chanlist.c	/^chanlist_closegui (GtkWidget *wid, server *serv)$/;"	f	file:
chanlist_combo_cb	chanlist.c	/^chanlist_combo_cb (GtkWidget *combo, server *serv)$/;"	f	file:
chanlist_copychannel	chanlist.c	/^chanlist_copychannel (GtkWidget *item, server *serv)$/;"	f	file:
chanlist_copytopic	chanlist.c	/^chanlist_copytopic (GtkWidget *item, server *serv)$/;"	f	file:
chanlist_data_free	chanlist.c	/^chanlist_data_free (server *serv)$/;"	f	file:
chanlist_data_stored_rows	fe-gtk.h	/^	GSList *chanlist_data_stored_rows;	\/* stored list so it can be resorted  *\/$/;"	m	struct:server_gui
chanlist_dclick_cb	chanlist.c	/^chanlist_dclick_cb (GtkTreeView *view, GtkTreePath *path,$/;"	f	file:
chanlist_destroy_widget	chanlist.c	/^chanlist_destroy_widget (GtkWidget *wid, server *serv)$/;"	f	file:
chanlist_do_refresh	chanlist.c	/^chanlist_do_refresh (server *serv)$/;"	f	file:
chanlist_double_list	fkeys.c	/^chanlist_double_list (GSList *inlist)$/;"	f	file:
chanlist_filereq_done	chanlist.c	/^chanlist_filereq_done (server *serv, char *file)$/;"	f	file:
chanlist_find_cb	chanlist.c	/^chanlist_find_cb (GtkWidget * wid, server *serv)$/;"	f	file:
chanlist_flash	chanlist.c	/^chanlist_flash (server *serv)$/;"	f	file:
chanlist_flash_tag	fe-gtk.h	/^	gint chanlist_flash_tag;$/;"	m	struct:server_gui
chanlist_flush_pending	chanlist.c	/^chanlist_flush_pending (server *serv)$/;"	f	file:
chanlist_get_selected	chanlist.c	/^chanlist_get_selected (server *serv, gboolean get_topic)$/;"	f	file:
chanlist_join	chanlist.c	/^chanlist_join (GtkWidget * wid, server *serv)$/;"	f	file:
chanlist_join	fe-gtk.h	/^	GtkWidget *chanlist_join;$/;"	m	struct:server_gui
chanlist_label	fe-gtk.h	/^	GtkWidget *chanlist_label;$/;"	m	struct:server_gui
chanlist_list	fe-gtk.h	/^	GtkWidget *chanlist_list;$/;"	m	struct:server_gui
chanlist_match	chanlist.c	/^chanlist_match (server *serv, const char *str)$/;"	f	file:
chanlist_match_channel_button_toggled	chanlist.c	/^chanlist_match_channel_button_toggled (GtkWidget * wid, server *serv)$/;"	f	file:
chanlist_match_regex	fe-gtk.h	/^	GRegex *chanlist_match_regex;	\/* compiled regular expression here *\/$/;"	m	struct:server_gui
chanlist_match_topic_button_toggled	chanlist.c	/^chanlist_match_topic_button_toggled (GtkWidget * wid, server *serv)$/;"	f	file:
chanlist_match_wants_channel	fe-gtk.h	/^	gboolean chanlist_match_wants_channel;	\/* match in channel name *\/$/;"	m	struct:server_gui
chanlist_match_wants_topic	fe-gtk.h	/^	gboolean chanlist_match_wants_topic;	\/* match in topic *\/$/;"	m	struct:server_gui
chanlist_maxusers	chanlist.c	/^chanlist_maxusers (GtkSpinButton *wid, server *serv)$/;"	f	file:
chanlist_maxusers	fe-gtk.h	/^	guint32 chanlist_maxusers;$/;"	m	struct:server_gui
chanlist_menu_destroy	chanlist.c	/^chanlist_menu_destroy (GtkWidget *menu, gpointer userdata)$/;"	f	file:
chanlist_min_spin	fe-gtk.h	/^	GtkWidget *chanlist_min_spin;	\/* minusers GtkSpinButton *\/$/;"	m	struct:server_gui
chanlist_minusers	chanlist.c	/^chanlist_minusers (GtkSpinButton *wid, server *serv)$/;"	f	file:
chanlist_minusers	fe-gtk.h	/^	guint32 chanlist_minusers;$/;"	m	struct:server_gui
chanlist_minusers_downloaded	fe-gtk.h	/^	guint32 chanlist_minusers_downloaded;	\/* used by LIST IRC command *\/$/;"	m	struct:server_gui
chanlist_opengui	chanlist.c	/^chanlist_opengui (server *serv, int do_refresh)$/;"	f
chanlist_pending_rows	fe-gtk.h	/^	GSList *chanlist_pending_rows;$/;"	m	struct:server_gui
chanlist_place_row_in_gui	chanlist.c	/^chanlist_place_row_in_gui (server *serv, chanlistrow *next_row, gboolean force)$/;"	f	file:
chanlist_refresh	chanlist.c	/^chanlist_refresh (GtkWidget * wid, server *serv)$/;"	f	file:
chanlist_refresh	fe-gtk.h	/^	GtkWidget *chanlist_refresh;	\/* buttons *\/$/;"	m	struct:server_gui
chanlist_reset_counters	chanlist.c	/^chanlist_reset_counters (server *serv)$/;"	f	file:
chanlist_save	chanlist.c	/^chanlist_save (GtkWidget * wid, server *serv)$/;"	f	file:
chanlist_savelist	fe-gtk.h	/^	GtkWidget *chanlist_savelist;$/;"	m	struct:server_gui
chanlist_search	fe-gtk.h	/^	GtkWidget *chanlist_search;$/;"	m	struct:server_gui
chanlist_search_pressed	chanlist.c	/^chanlist_search_pressed (GtkButton * button, server *serv)$/;"	f	file:
chanlist_search_type	fe-gtk.h	/^	int chanlist_search_type;		\/* 0=simple 1=pattern\/wildcard 2=regexp *\/$/;"	m	struct:server_gui
chanlist_tag	fe-gtk.h	/^	gint chanlist_tag;$/;"	m	struct:server_gui
chanlist_timeout	chanlist.c	/^chanlist_timeout (server *serv)$/;"	f	file:
chanlist_update_buttons	chanlist.c	/^chanlist_update_buttons (server *serv)$/;"	f	file:
chanlist_update_caption	chanlist.c	/^chanlist_update_caption (server *serv)$/;"	f	file:
chanlist_users_found_count	fe-gtk.h	/^	guint chanlist_users_found_count;	\/* users total for all channels *\/$/;"	m	struct:server_gui
chanlist_users_shown_count	fe-gtk.h	/^	guint chanlist_users_shown_count;	\/* users total for displayed channels *\/$/;"	m	struct:server_gui
chanlist_wild	fe-gtk.h	/^	GtkWidget *chanlist_wild;		\/* GtkEntry *\/$/;"	m	struct:server_gui
chanlist_window	fe-gtk.h	/^	GtkWidget *chanlist_window;$/;"	m	struct:server_gui
chanlistrow	chanlist.c	/^chanlistrow;$/;"	t	typeref:struct:__anon3	file:
chanlistrow	custom-list.h	/^chanlistrow;$/;"	t	typeref:struct:__anon8
channelwin_pix	fe-gtk.c	/^cairo_surface_t *channelwin_pix;$/;"	v
chanview	chanview.h	/^typedef struct _chanview chanview;$/;"	t	typeref:struct:_chanview
chanview	fe-gtk.h	/^	void *chanview;	\/* chanview.h *\/$/;"	m	struct:session_gui
chanview_add	chanview.c	/^chanview_add (chanview *cv, char *name, void *family, void *userdata, gboolean allow_closure, int tag, GdkPixbuf *icon)$/;"	f
chanview_add_real	chanview.c	/^chanview_add_real (chanview *cv, char *name, void *family, void *userdata,$/;"	f	file:
chanview_box_destroy_cb	chanview.c	/^chanview_box_destroy_cb (GtkWidget *box, chanview *cv)$/;"	f	file:
chanview_destroy	chanview.c	/^chanview_destroy (chanview *cv)$/;"	f	file:
chanview_destroy_store	chanview.c	/^chanview_destroy_store (chanview *cv)	\/* free every (chan *) in the store *\/$/;"	f	file:
chanview_find_parent	chanview.c	/^chanview_find_parent (chanview *cv, void *family, GtkTreeIter *search_iter, chan *avoid)$/;"	f	file:
chanview_free_ch	chanview.c	/^chanview_free_ch (chanview *cv, GtkTreeIter *iter)$/;"	f	file:
chanview_get_box	chanview.c	/^chanview_get_box (chanview *cv)$/;"	f
chanview_get_orientation	chanview.c	/^chanview_get_orientation (chanview *cv)$/;"	f
chanview_get_size	chanview.c	/^chanview_get_size (chanview *cv)$/;"	f
chanview_insert_sorted	chanview.c	/^chanview_insert_sorted (chanview *cv, GtkTreeIter *add_iter, GtkTreeIter *parent, void *ud)$/;"	f	file:
chanview_move_focus	chanview.c	/^chanview_move_focus (chanview *cv, gboolean relative, int num)$/;"	f
chanview_new	chanview.c	/^chanview_new (int type, int trunc_len, gboolean sort, gboolean use_icons,$/;"	f
chanview_pop_cb	chanview.c	/^chanview_pop_cb (chanview *cv, GtkTreeIter *iter)$/;"	f	file:
chanview_populate	chanview.c	/^chanview_populate (chanview *cv)$/;"	f	file:
chanview_set_callbacks	chanview.c	/^chanview_set_callbacks (chanview *cv,$/;"	f
chanview_set_impl	chanview.c	/^chanview_set_impl (chanview *cv, int type)$/;"	f
chanview_set_orientation	chanview.c	/^chanview_set_orientation (chanview *cv, gboolean vertical)$/;"	f
charlen	xtext.c	51;"	d	file:
check_attributes	sexy-spell-entry.c	/^check_attributes (SexySpellEntry *entry, const char *text, int len)$/;"	f	file:
check_is_number	maingui.c	/^check_is_number (char *t)$/;"	f	file:
check_word	sexy-spell-entry.c	/^check_word(SexySpellEntry *entry, int start, int end)$/;"	f	file:
checkboxes	banlist.h	/^	GtkWidget *checkboxes[MODE_CT];$/;"	m	struct:banlist_info_s
checked	banlist.h	/^	int checked;	\/* subset of (op? writeable: readable) *\/$/;"	m	struct:banlist_info_s
checked	sexy-spell-entry.c	/^	gboolean              checked;$/;"	m	struct:_SexySpellEntryPriv	file:
chunk_s	xtext.c	/^typedef struct chunk_s {$/;"	s	file:
chunk_t	xtext.c	/^} chunk_t;$/;"	t	typeref:struct:chunk_s	file:
clear_button	dccgui.c	/^	GtkWidget *clear_button; \/* clears aborted and completed requests *\/	$/;"	m	struct:dccwindow	file:
clear_completed	dccgui.c	/^clear_completed (GtkWidget * wid, gpointer none)$/;"	f	file:
clip_x	xtext.h	/^	int clip_x;			\/* clipping (x directions) *\/$/;"	m	struct:_GtkXText
clip_x2	xtext.h	/^	int clip_x2;		\/* from x to x2 *\/$/;"	m	struct:_GtkXText
clip_y	xtext.h	/^	int clip_y;			\/* clipping (y directions) *\/$/;"	m	struct:_GtkXText
clip_y2	xtext.h	/^	int clip_y2;		\/* from y to y2 *\/$/;"	m	struct:_GtkXText
close_dcc_file_window	dccgui.c	/^close_dcc_file_window (GtkWindow *win, gpointer data)$/;"	f	file:
close_ignore_gui_callback	ignoregui.c	/^close_ignore_gui_callback ()$/;"	f	file:
close_rawlog	rawlog.c	/^close_rawlog (GtkWidget *wid, server *serv)$/;"	f	file:
cmdlist_double_list	fkeys.c	/^cmdlist_double_list (GSList *inlist)$/;"	f	file:
code	banlist.h	/^	int code;		\/* rfc RPL_foo code, e.g. 367 for RPL_BANLIST *\/$/;"	m	struct:mode_info_s
codetable_free	sexy-iso-codes.c	/^codetable_free (void)$/;"	f
codetable_init	sexy-iso-codes.c	/^codetable_init (void)$/;"	f
codetable_lookup	sexy-iso-codes.c	/^codetable_lookup (const gchar *language_code, const gchar **language_name, const gchar** country_name)$/;"	f
codetable_ref	sexy-spell-entry.c	/^static int codetable_ref = 0;$/;"	v	file:
col_back	xtext.h	/^	int col_back;$/;"	m	struct:_GtkXText
col_fore	xtext.h	/^	int col_fore;$/;"	m	struct:_GtkXText
collation_key	chanlist.c	/^	char *collation_key;$/;"	m	struct:__anon3	file:
collation_key	custom-list.h	/^	char *collation_key;$/;"	m	struct:__anon8
color_change	setup.c	/^static gboolean color_change;$/;"	v	file:
color_paste	xtext.h	/^	unsigned int color_paste:1; \/* CTRL was pressed when selection finished *\/$/;"	m	struct:_GtkXText
color_settings	setup.c	/^static const setting color_settings[] =$/;"	v	file:
colors	palette.c	/^GdkColor colors[] = {$/;"	v
column_types	custom-list.h	/^	GType column_types[CUSTOM_LIST_N_COLUMNS];$/;"	m	struct:_CustomList
copy_to_clipboard_cb	menu.c	/^copy_to_clipboard_cb (GtkWidget *item, char *url)$/;"	f	file:
create_icon_menu	menu.c	/^create_icon_menu (char *labeltext, void *stock_name, int is_stock)$/;"	f
create_input_style	fe-gtk.c	/^create_input_style (GtkStyle *style)$/;"	f
create_msg_dialog	fe-gtk.c	/^create_msg_dialog (gchar *title, gchar *message)$/;"	f	file:
cspos	setup.c	/^static const char *const cspos[] =$/;"	v	file:
ctcp_help	menu.c	1507;"	d	file:
curdata	xtext.h	/^	offsets_t curdata;		\/* current offset info, from *curmark *\/$/;"	m	struct:__anon31
curmark	xtext.h	/^	GList *curmark;			\/* current item in ent->marks *\/$/;"	m	struct:__anon31
current	banlist.h	/^	int current;	\/* index of currently processing mode *\/$/;"	m	struct:banlist_info_s
cursearch	xtext.h	/^	GList *cursearch;			\/* GList whose 'data' pts to current textentry *\/$/;"	m	struct:__anon31
cursor_color_rc	fe-gtk.c	/^const char cursor_color_rc[] =$/;"	v
cursor_hand	xtext.h	/^	unsigned int cursor_hand:1;$/;"	m	struct:_GtkXText
cursor_resize	xtext.h	/^	unsigned int cursor_resize:1;$/;"	m	struct:_GtkXText
custom_icon1	plugin-tray.c	/^static TrayIcon custom_icon1;$/;"	v	file:
custom_icon2	plugin-tray.c	/^static TrayIcon custom_icon2;$/;"	v	file:
custom_list_append	custom-list.c	/^custom_list_append (CustomList * custom_list, chanlistrow * newrecord)$/;"	f
custom_list_class_init	custom-list.c	/^custom_list_class_init (CustomListClass * klass)$/;"	f	file:
custom_list_clear	custom-list.c	/^custom_list_clear (CustomList * custom_list)$/;"	f
custom_list_finalize	custom-list.c	/^custom_list_finalize (GObject * object)$/;"	f	file:
custom_list_get_column_type	custom-list.c	/^custom_list_get_column_type (GtkTreeModel * tree_model, gint index)$/;"	f	file:
custom_list_get_flags	custom-list.c	/^custom_list_get_flags (GtkTreeModel * tree_model)$/;"	f	file:
custom_list_get_iter	custom-list.c	/^custom_list_get_iter (GtkTreeModel * tree_model,$/;"	f	file:
custom_list_get_n_columns	custom-list.c	/^custom_list_get_n_columns (GtkTreeModel * tree_model)$/;"	f	file:
custom_list_get_path	custom-list.c	/^custom_list_get_path (GtkTreeModel * tree_model, GtkTreeIter * iter)$/;"	f	file:
custom_list_get_type	custom-list.c	/^custom_list_get_type (void)$/;"	f
custom_list_get_value	custom-list.c	/^custom_list_get_value (GtkTreeModel * tree_model,$/;"	f	file:
custom_list_init	custom-list.c	/^custom_list_init (CustomList * custom_list)$/;"	f	file:
custom_list_iter_children	custom-list.c	/^custom_list_iter_children (GtkTreeModel * tree_model,$/;"	f	file:
custom_list_iter_has_child	custom-list.c	/^custom_list_iter_has_child (GtkTreeModel * tree_model, GtkTreeIter * iter)$/;"	f	file:
custom_list_iter_n_children	custom-list.c	/^custom_list_iter_n_children (GtkTreeModel * tree_model, GtkTreeIter * iter)$/;"	f	file:
custom_list_iter_next	custom-list.c	/^custom_list_iter_next (GtkTreeModel * tree_model, GtkTreeIter * iter)$/;"	f	file:
custom_list_iter_nth_child	custom-list.c	/^custom_list_iter_nth_child (GtkTreeModel * tree_model,$/;"	f	file:
custom_list_iter_parent	custom-list.c	/^custom_list_iter_parent (GtkTreeModel * tree_model,$/;"	f	file:
custom_list_new	custom-list.c	/^custom_list_new (void)$/;"	f
custom_list_qsort_compare_func	custom-list.c	/^custom_list_qsort_compare_func (chanlistrow ** a, chanlistrow ** b,$/;"	f	file:
custom_list_resort	custom-list.c	/^custom_list_resort (CustomList * custom_list)$/;"	f
custom_list_sortable_get_sort_column_id	custom-list.c	/^custom_list_sortable_get_sort_column_id (GtkTreeSortable * sortable,$/;"	f	file:
custom_list_sortable_has_default_sort_func	custom-list.c	/^custom_list_sortable_has_default_sort_func (GtkTreeSortable * sortable)$/;"	f	file:
custom_list_sortable_init	custom-list.c	/^custom_list_sortable_init (GtkTreeSortableIface * iface)$/;"	f	file:
custom_list_sortable_set_default_sort_func	custom-list.c	/^custom_list_sortable_set_default_sort_func (GtkTreeSortable * sortable,$/;"	f	file:
custom_list_sortable_set_sort_column_id	custom-list.c	/^custom_list_sortable_set_sort_column_id (GtkTreeSortable * sortable,$/;"	f	file:
custom_list_sortable_set_sort_func	custom-list.c	/^custom_list_sortable_set_sort_func (GtkTreeSortable * sortable,$/;"	f	file:
custom_list_tree_model_init	custom-list.c	/^custom_list_tree_model_init (GtkTreeModelIface * iface)$/;"	f	file:
cv	chanview.c	/^	chanview *cv;	\/* our owner *\/$/;"	m	struct:_chan	file:
cv_find_chan_by_number	chanview.c	/^cv_find_chan_by_number (chanview *cv, int num)$/;"	f	file:
cv_find_number_of_chan	chanview.c	/^cv_find_number_of_chan (chanview *cv, chan *find_ch)$/;"	f	file:
cv_tabs_add	chanview-tabs.c	/^cv_tabs_add (chanview *cv, chan *ch, char *name, GtkTreeIter *parent)$/;"	f	file:
cv_tabs_change_orientation	chanview-tabs.c	/^cv_tabs_change_orientation (chanview *cv)$/;"	f	file:
cv_tabs_cleanup	chanview-tabs.c	/^cv_tabs_cleanup (chanview *cv)$/;"	f	file:
cv_tabs_focus	chanview-tabs.c	/^cv_tabs_focus (chan *ch)$/;"	f	file:
cv_tabs_get_parent	chanview-tabs.c	/^cv_tabs_get_parent (chan *ch)$/;"	f	file:
cv_tabs_init	chanview-tabs.c	/^cv_tabs_init (chanview *cv)$/;"	f	file:
cv_tabs_is_collapsed	chanview-tabs.c	/^cv_tabs_is_collapsed (chan *ch)$/;"	f	file:
cv_tabs_move	chanview-tabs.c	/^cv_tabs_move (chan *ch, int delta)$/;"	f	file:
cv_tabs_move_family	chanview-tabs.c	/^cv_tabs_move_family (chan *ch, int delta)$/;"	f	file:
cv_tabs_move_focus	chanview-tabs.c	/^cv_tabs_move_focus (chanview *cv, gboolean relative, int num)$/;"	f	file:
cv_tabs_postinit	chanview-tabs.c	/^cv_tabs_postinit (chanview *cv)$/;"	f	file:
cv_tabs_prune	chanview-tabs.c	/^cv_tabs_prune (chanview *cv)$/;"	f	file:
cv_tabs_remove	chanview-tabs.c	/^cv_tabs_remove (chan *ch)$/;"	f	file:
cv_tabs_rename	chanview-tabs.c	/^cv_tabs_rename (chan *ch, char *name)$/;"	f	file:
cv_tabs_set_color	chanview-tabs.c	/^cv_tabs_set_color (chan *ch, PangoAttrList *list)$/;"	f	file:
cv_tabs_sizealloc	chanview-tabs.c	/^cv_tabs_sizealloc (GtkWidget *widget, GtkAllocation *allocation, chanview *cv)$/;"	f	file:
cv_tabs_sizerequest	chanview-tabs.c	/^cv_tabs_sizerequest (GtkWidget *viewport, GtkRequisition *requisition, chanview *cv)$/;"	f	file:
cv_tabs_xclick_cb	chanview-tabs.c	/^cv_tabs_xclick_cb (GtkWidget *button, chanview *cv)$/;"	f	file:
cv_tree_activated_cb	chanview-tree.c	/^cv_tree_activated_cb (GtkTreeView *view, GtkTreePath *path,$/;"	f	file:
cv_tree_add	chanview-tree.c	/^cv_tree_add (chanview *cv, chan *ch, char *name, GtkTreeIter *parent)$/;"	f	file:
cv_tree_change_orientation	chanview-tree.c	/^cv_tree_change_orientation (chanview *cv)$/;"	f	file:
cv_tree_cleanup	chanview-tree.c	/^cv_tree_cleanup (chanview *cv)$/;"	f	file:
cv_tree_click_cb	chanview-tree.c	/^cv_tree_click_cb (GtkTreeView *tree, GdkEventButton *event, chanview *cv)$/;"	f	file:
cv_tree_focus	chanview-tree.c	/^cv_tree_focus (chan *ch)$/;"	f	file:
cv_tree_get_parent	chanview-tree.c	/^cv_tree_get_parent (chan *ch)$/;"	f	file:
cv_tree_init	chanview-tree.c	/^cv_tree_init (chanview *cv)$/;"	f	file:
cv_tree_is_collapsed	chanview-tree.c	/^cv_tree_is_collapsed (chan *ch)$/;"	f	file:
cv_tree_move	chanview-tree.c	/^cv_tree_move (chan *ch, int delta)$/;"	f	file:
cv_tree_move_family	chanview-tree.c	/^cv_tree_move_family (chan *ch, int delta)$/;"	f	file:
cv_tree_move_focus	chanview-tree.c	/^cv_tree_move_focus (chanview *cv, gboolean relative, int num)$/;"	f	file:
cv_tree_postinit	chanview-tree.c	/^cv_tree_postinit (chanview *cv)$/;"	f	file:
cv_tree_remove	chanview-tree.c	/^cv_tree_remove (chan *ch)$/;"	f	file:
cv_tree_rename	chanview-tree.c	/^cv_tree_rename (chan *ch, char *name)$/;"	f	file:
cv_tree_scroll_event_cb	chanview-tree.c	/^cv_tree_scroll_event_cb (GtkWidget *widget, GdkEventScroll *event, gpointer user_data)$/;"	f	file:
cv_tree_sel_cb	chanview-tree.c	/^cv_tree_sel_cb (GtkTreeSelection *sel, chanview *cv)$/;"	f	file:
cv_tree_set_color	chanview-tree.c	/^cv_tree_set_color (chan *ch, PangoAttrList *list)$/;"	f	file:
dark_gc	xtext.h	/^	GdkGC *dark_gc;$/;"	m	struct:_GtkXText
data	fkeys.c	/^	char data[CHANLEN];$/;"	m	struct:gcomp_data	file:
data	resources.c	/^static const SECTION union { const guint8 data[39503]; const double alignment; void * const ptr;}  hexchat_resource_data = { {$/;"	m	union:__anon20	file:
data1	fkeys.c	/^	char *data1, *data2;			  \/* Pointers to strings, these must be freed *\/$/;"	m	struct:key_binding	file:
data2	fkeys.c	/^	char *data1, *data2;			  \/* Pointers to strings, these must be freed *\/$/;"	m	struct:key_binding	file:
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
dcc_add_column	dccgui.c	/^dcc_add_column (GtkWidget *tree, int textcol, int colorcol, char *title, gboolean right_justified)$/;"	f	file:
dcc_append	dccgui.c	/^dcc_append (struct DCC *dcc, GtkListStore *store, gboolean prepend)$/;"	f	file:
dcc_chat_append	dccgui.c	/^dcc_chat_append (struct DCC *dcc, GtkListStore *store, gboolean prepend)$/;"	f	file:
dcc_chat_close_cb	dccgui.c	/^dcc_chat_close_cb (void)$/;"	f	file:
dcc_chat_dclick_cb	dccgui.c	/^dcc_chat_dclick_cb (GtkTreeView *view, GtkTreePath *path,$/;"	f	file:
dcc_chat_fill_win	dccgui.c	/^dcc_chat_fill_win (void)$/;"	f	file:
dcc_chat_get_selected	dccgui.c	/^dcc_chat_get_selected (void)$/;"	f	file:
dcc_chat_row_cb	dccgui.c	/^dcc_chat_row_cb (GtkTreeSelection *sel, gpointer user_data)$/;"	f	file:
dcc_completed_transfer_exists	dccgui.c	/^dcc_completed_transfer_exists (void)$/;"	f	file:
dcc_configure_cb	dccgui.c	/^dcc_configure_cb (GtkWindow *win, GdkEventConfigure *event, gpointer data)$/;"	f	file:
dcc_dclick_cb	dccgui.c	/^dcc_dclick_cb (GtkTreeView *view, GtkTreePath *path,$/;"	f	file:
dcc_detail_label	dccgui.c	/^dcc_detail_label (char *text, GtkWidget *box, int num)$/;"	f	file:
dcc_details_populate	dccgui.c	/^dcc_details_populate (struct DCC *dcc)$/;"	f	file:
dcc_exp_cb	dccgui.c	/^dcc_exp_cb (GtkWidget *exp, GtkWidget *box)$/;"	f	file:
dcc_fill_window	dccgui.c	/^dcc_fill_window (int flags)$/;"	f	file:
dcc_find_row	dccgui.c	/^dcc_find_row (struct DCC *find_dcc, GtkTreeModel *model, GtkTreeIter *iter, int col)$/;"	f	file:
dcc_get_completed	dccgui.c	/^dcc_get_completed (void)$/;"	f	file:
dcc_get_selected	dccgui.c	/^dcc_get_selected (void)$/;"	f	file:
dcc_prepare_row_chat	dccgui.c	/^dcc_prepare_row_chat (struct DCC *dcc, GtkListStore *store, GtkTreeIter *iter,$/;"	f	file:
dcc_prepare_row_recv	dccgui.c	/^dcc_prepare_row_recv (struct DCC *dcc, GtkListStore *store, GtkTreeIter *iter,$/;"	f	file:
dcc_prepare_row_send	dccgui.c	/^dcc_prepare_row_send (struct DCC *dcc, GtkListStore *store, GtkTreeIter *iter,$/;"	f	file:
dcc_row_cb	dccgui.c	/^dcc_row_cb (GtkTreeSelection *sel, gpointer user_data)$/;"	f	file:
dcc_saveas_cb	fe-gtk.c	/^dcc_saveas_cb (struct DCC *dcc, char *file)$/;"	f	file:
dcc_send_filereq_file	dccgui.c	/^dcc_send_filereq_file (struct my_dcc_send *mdc, char *file)$/;"	f	file:
dcc_toggle	dccgui.c	/^dcc_toggle (GtkWidget *item, gpointer data)$/;"	f	file:
dcc_update_chat	dccgui.c	/^dcc_update_chat (struct DCC *dcc)$/;"	f	file:
dcc_update_recv	dccgui.c	/^dcc_update_recv (struct DCC *dcc)$/;"	f	file:
dcc_update_send	dccgui.c	/^dcc_update_send (struct DCC *dcc)$/;"	f	file:
dccaccept	setup.c	/^static const char *const dccaccept[] =$/;"	v	file:
dcccwin	dccgui.c	/^static struct dccwindow dcccwin = {NULL, };	\/* chat *\/$/;"	v	typeref:struct:dccwindow	file:
dccfwin	dccgui.c	/^static struct dccwindow dccfwin = {NULL, };	\/* file *\/$/;"	v	typeref:struct:dccwindow	file:
dccwindow	dccgui.c	/^struct dccwindow$/;"	s	file:
default_kb_cfg	fkeys.c	172;"	d	file:
default_word_check	sexy-spell-entry.c	/^default_word_check(SexySpellEntry *entry, const gchar *word)$/;"	f	file:
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depth	xtext.h	/^	int depth;						  \/* gdk window depth *\/$/;"	m	struct:_GtkXText
descent	xtext.h	/^		int descent;$/;"	m	struct:_GtkXText::pangofont
dialog	gtkutil.c	/^	GtkWidget *dialog;$/;"	m	struct:file_req	file:
dialogbutton_box	fe-gtk.h	/^		*dialogbutton_box,$/;"	m	struct:session_gui
dict_describe_cb	sexy-spell-entry.c	/^dict_describe_cb(const char * const lang_tag,$/;"	f	file:
dict_hash	sexy-spell-entry.c	/^	GHashTable           *dict_hash;$/;"	m	struct:_SexySpellEntryPriv	file:
dict_list	sexy-spell-entry.c	/^	GSList               *dict_list;$/;"	m	struct:_SexySpellEntryPriv	file:
dlgbutton_help	menu.c	1496;"	d	file:
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
dont_render	xtext.h	/^	unsigned int dont_render:1;$/;"	m	struct:_GtkXText
dont_render2	xtext.h	/^	unsigned int dont_render2:1;$/;"	m	struct:_GtkXText
dontscroll	xtext.c	70;"	d	file:
double_chan_cb	fkeys.c	/^double_chan_cb (session *lsess, GList **list)$/;"	f	file:
double_cmd_cb	fkeys.c	/^double_cmd_cb (struct popup *pop, GList **list)$/;"	f	file:
draw_buf	xtext.h	/^	GdkDrawable *draw_buf;			\/* points to ->window *\/$/;"	m	struct:_GtkXText
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
edit_entry_nick	servlistgui.c	/^static GtkWidget *edit_entry_nick;$/;"	v	file:
edit_entry_nick2	servlistgui.c	/^static GtkWidget *edit_entry_nick2;$/;"	v	file:
edit_entry_pass	servlistgui.c	/^static GtkWidget *edit_entry_pass;$/;"	v	file:
edit_entry_real	servlistgui.c	/^static GtkWidget *edit_entry_real;$/;"	v	file:
edit_entry_user	servlistgui.c	/^static GtkWidget *edit_entry_user;$/;"	v	file:
edit_label_nick	servlistgui.c	/^static GtkWidget *edit_label_nick;$/;"	v	file:
edit_label_nick2	servlistgui.c	/^static GtkWidget *edit_label_nick2;$/;"	v	file:
edit_label_real	servlistgui.c	/^static GtkWidget *edit_label_real;$/;"	v	file:
edit_label_user	servlistgui.c	/^static GtkWidget *edit_label_user;$/;"	v	file:
edit_trees	servlistgui.c	/^static GtkWidget *edit_trees[N_TREES];$/;"	v	file:
edit_win	servlistgui.c	/^static GtkWidget *edit_win;$/;"	v	file:
editlist_add	editlist.c	/^editlist_add (GtkWidget *wid, gpointer userdata)$/;"	f	file:
editlist_close	editlist.c	/^editlist_close (GtkWidget *wid, gpointer userdata)$/;"	f	file:
editlist_delete	editlist.c	/^editlist_delete (GtkWidget *wid, gpointer userdata)$/;"	f	file:
editlist_edited	editlist.c	/^editlist_edited (GtkCellRendererText *render, gchar *pathstr, gchar *new_text, gpointer data)$/;"	f	file:
editlist_gui_open	editlist.c	/^editlist_gui_open (char *title1, char *title2, GSList *list, char *title, char *wmclass,$/;"	f
editlist_keypress	editlist.c	/^editlist_keypress (GtkWidget *wid, GdkEventKey *evt, gpointer userdata)$/;"	f	file:
editlist_list	editlist.c	/^static GSList *editlist_list = NULL;$/;"	v	file:
editlist_load	editlist.c	/^editlist_load (GtkListStore *store, GSList *list)$/;"	f	file:
editlist_save	editlist.c	/^editlist_save (GtkWidget *igad, gchar *file)$/;"	f	file:
editlist_treeview_new	editlist.c	/^editlist_treeview_new (GtkWidget *box, char *title1, char *title2)$/;"	f	file:
editlist_win	editlist.c	/^static GtkWidget *editlist_win = NULL;$/;"	v	file:
elen	fkeys.c	/^	int elen;$/;"	m	struct:gcomp_data	file:
emph	xtext.c	/^	guint16 emph;$/;"	m	struct:offlen_s	file:
emph	xtext.c	/^	int off1, len1, emph;$/;"	m	struct:chunk_s	file:
empty_attrs_list	sexy-spell-entry.c	/^static PangoAttrList *empty_attrs_list = NULL;$/;"	v	file:
enchant_broker_free	sexy-spell-entry.c	/^static void (*enchant_broker_free) (struct EnchantBroker * broker);$/;"	v	file:
enchant_broker_free_dict	sexy-spell-entry.c	/^static void (*enchant_broker_free_dict) (struct EnchantBroker * broker, struct EnchantDict * dict);$/;"	v	file:
enchant_broker_init	sexy-spell-entry.c	/^static struct EnchantBroker * (*enchant_broker_init) (void);$/;"	v	typeref:struct:enchant_broker_init	file:
enchant_broker_list_dicts	sexy-spell-entry.c	/^static void (*enchant_broker_list_dicts) (struct EnchantBroker * broker, EnchantDictDescribeFn fn, void * user_data);$/;"	v	file:
enchant_broker_request_dict	sexy-spell-entry.c	/^static struct EnchantDict * (*enchant_broker_request_dict) (struct EnchantBroker * broker, const char *const tag);$/;"	v	typeref:struct:enchant_broker_request_dict	file:
enchant_dict_add_to_personal	sexy-spell-entry.c	/^static void (*enchant_dict_add_to_personal) (struct EnchantDict * dict, const char *const word, ssize_t len);$/;"	v	file:
enchant_dict_add_to_session	sexy-spell-entry.c	/^static void (*enchant_dict_add_to_session) (struct EnchantDict * dict, const char *const word, ssize_t len);$/;"	v	file:
enchant_dict_check	sexy-spell-entry.c	/^static int (*enchant_dict_check) (struct EnchantDict * dict, const char *const word, ssize_t len);$/;"	v	file:
enchant_dict_describe	sexy-spell-entry.c	/^static void (*enchant_dict_describe) (struct EnchantDict * dict, EnchantDictDescribeFn fn, void * user_data);$/;"	v	file:
enchant_dict_free_suggestions	sexy-spell-entry.c	/^static void (*enchant_dict_free_suggestions) (struct EnchantDict * dict, char **suggestions);$/;"	v	file:
enchant_dict_store_replacement	sexy-spell-entry.c	/^static void (*enchant_dict_store_replacement) (struct EnchantDict * dict, const char *const mis, ssize_t mis_len, const char *const cor, ssize_t cor_len);$/;"	v	file:
enchant_dict_suggest	sexy-spell-entry.c	/^static char ** (*enchant_dict_suggest) (struct EnchantDict * dict, const char *const word, ssize_t len, size_t * out_n_suggs);$/;"	v	file:
enchant_has_lang	sexy-spell-entry.c	/^enchant_has_lang(const gchar *lang, GSList *langs) {$/;"	f	file:
end	xtext.h	/^		guint16	end;$/;"	m	struct:offsets_u::offsets_s
endcode	banlist.h	/^	int endcode;	\/* rfc RPL_ENDOFfoo code, e.g. 368 for RPL_ENDOFBANLIST *\/$/;"	m	struct:mode_info_s
entry_guser	servlistgui.c	/^static GtkWidget *entry_guser;$/;"	v	file:
entry_nick1	servlistgui.c	/^static GtkWidget *entry_nick1;$/;"	v	file:
entry_nick2	servlistgui.c	/^static GtkWidget *entry_nick2;$/;"	v	file:
entry_nick3	servlistgui.c	/^static GtkWidget *entry_nick3;$/;"	v	file:
entry_strsplit_utf8	sexy-spell-entry.c	/^entry_strsplit_utf8(GtkEntry *entry, gchar ***set, gint **starts, gint **ends)$/;"	f	file:
exec_prefix	Makefile	/^exec_prefix = \/usr\/local$/;"	m
extra	setup.c	/^	int extra;$/;"	m	struct:__anon23	file:
family	chanview.c	/^	void *family;		\/* server * or null *\/$/;"	m	struct:_chan	file:
fast_ascii_stricmp	custom-list.c	/^fast_ascii_stricmp (const char *s1, const char *s2)$/;"	f	file:
fav_servlist	servlistgui.c	/^fav_servlist (GtkWidget * igad, gpointer serv)$/;"	f	file:
fe_add_ban_list	banlist.c	/^fe_add_ban_list (struct session *sess, char *mask, char *who, char *when, int rplcode)$/;"	f
fe_add_chan_list	chanlist.c	/^fe_add_chan_list (server *serv, char *chan, char *users, char *topic)$/;"	f
fe_add_rawlog	rawlog.c	/^fe_add_rawlog (server *serv, char *text, int len, int outbound)$/;"	f
fe_args	fe-gtk.c	/^fe_args (int argc, char *argv[])$/;"	f
fe_ban_list_end	banlist.c	/^fe_ban_list_end (struct session *sess, int rplcode)$/;"	f
fe_beep	fe-gtk.c	/^fe_beep (session *sess)$/;"	f
fe_buttons_update	maingui.c	/^fe_buttons_update (session *sess)$/;"	f
fe_chan_list_end	chanlist.c	/^fe_chan_list_end (server *serv)$/;"	f
fe_cleanup	fe-gtk.c	/^fe_cleanup (void)$/;"	f
fe_clear_channel	maingui.c	/^fe_clear_channel (session *sess)$/;"	f
fe_close_window	fe-gtk.c	/^fe_close_window (struct session *sess)$/;"	f
fe_confirm	fe-gtk.c	/^fe_confirm (const char *message, void (*yesproc)(void *), void (*noproc)(void *), void *ud)$/;"	f
fe_ctrl_gui	fe-gtk.c	/^fe_ctrl_gui (session *sess, fe_gui_action action, int arg)$/;"	f
fe_dcc_add	dccgui.c	/^fe_dcc_add (struct DCC *dcc)$/;"	f
fe_dcc_open_chat_win	dccgui.c	/^fe_dcc_open_chat_win (int passive)$/;"	f
fe_dcc_open_recv_win	dccgui.c	/^fe_dcc_open_recv_win (int passive)$/;"	f
fe_dcc_open_send_win	dccgui.c	/^fe_dcc_open_send_win (int passive)$/;"	f
fe_dcc_remove	dccgui.c	/^fe_dcc_remove (struct DCC *dcc)$/;"	f
fe_dcc_send_filereq	dccgui.c	/^fe_dcc_send_filereq (struct session *sess, char *nick, int maxcps, int passive)$/;"	f
fe_dcc_update	dccgui.c	/^fe_dcc_update (struct DCC *dcc)$/;"	f
fe_dlgbuttons_update	maingui.c	/^fe_dlgbuttons_update (session *sess)$/;"	f
fe_exit	fe-gtk.c	/^fe_exit (void)$/;"	f
fe_flash_window	maingui.c	/^fe_flash_window (session *sess)$/;"	f
fe_get_bool	gtkutil.c	/^fe_get_bool (char *title, char *prompt, void *callback, void *userdata)$/;"	f
fe_get_default_font	fe-gtk.c	/^fe_get_default_font (void)$/;"	f
fe_get_file	fe-gtk.c	/^fe_get_file (const char *title, char *initial,$/;"	f
fe_get_inputbox_contents	fe-gtk.c	/^fe_get_inputbox_contents (session *sess)$/;"	f
fe_get_inputbox_cursor	fe-gtk.c	/^fe_get_inputbox_cursor (session *sess)$/;"	f
fe_get_int	gtkutil.c	/^fe_get_int (char *msg, int def, void *callback, void *userdata)$/;"	f
fe_get_str	gtkutil.c	/^fe_get_str (char *msg, char *def, void *callback, void *userdata)$/;"	f
fe_gui_info	fe-gtk.c	/^fe_gui_info (session *sess, int info_type)$/;"	f
fe_gui_info_ptr	fe-gtk.c	/^fe_gui_info_ptr (session *sess, int info_type)$/;"	f
fe_idle	fe-gtk.c	/^fe_idle (gpointer data)$/;"	f	file:
fe_idle_add	fe-gtk.c	/^fe_idle_add (void *func, void *data)$/;"	f
fe_ignore_update	ignoregui.c	/^fe_ignore_update (int level)$/;"	f
fe_init	fe-gtk.c	/^fe_init (void)$/;"	f
fe_input_add	fe-gtk.c	/^fe_input_add (int sok, int flags, void *func, void *data)$/;"	f
fe_input_remove	fe-gtk.c	/^fe_input_remove (int tag)$/;"	f
fe_is_chanwindow	fe-gtk.c	/^fe_is_chanwindow (struct server *serv)$/;"	f
fe_lastlog	fe-gtk.c	/^fe_lastlog (session *sess, session *lastlog_sess, char *sstr, gtk_xtext_search_flags flags)$/;"	f
fe_main	fe-gtk.c	/^fe_main (void)$/;"	f
fe_menu_add	menu.c	/^fe_menu_add (menu_entry *me)$/;"	f
fe_menu_del	menu.c	/^fe_menu_del (menu_entry *me)$/;"	f
fe_menu_update	menu.c	/^fe_menu_update (menu_entry *me)$/;"	f
fe_message	fe-gtk.c	/^fe_message (char *msg, int flags)$/;"	f
fe_new_server	fe-gtk.c	/^fe_new_server (struct server *serv)$/;"	f
fe_new_window	fe-gtk.c	/^fe_new_window (session *sess, int focus)$/;"	f
fe_notify_ask	notifygui.c	/^fe_notify_ask (char *nick, char *networks)$/;"	f
fe_notify_update	fe-gtk.c	/^fe_notify_update (char *name)$/;"	f
fe_open_chan_list	fe-gtk.c	/^fe_open_chan_list (server *serv, char *filter, int do_refresh)$/;"	f
fe_open_url	fe-gtk.c	/^fe_open_url (const char *url)$/;"	f
fe_open_url_inner	fe-gtk.c	/^fe_open_url_inner (const char *url)$/;"	f	file:
fe_pluginlist_update	plugingui.c	/^fe_pluginlist_update (void)$/;"	f
fe_print_text	fe-gtk.c	/^fe_print_text (struct session *sess, char *text, time_t stamp,$/;"	f
fe_progressbar_end	fe-gtk.c	/^fe_progressbar_end (server *serv)$/;"	f
fe_progressbar_start	fe-gtk.c	/^fe_progressbar_start (session *sess)$/;"	f
fe_server_callback	maingui.c	/^fe_server_callback (server *serv)$/;"	f
fe_server_event	fe-gtk.c	/^fe_server_event (server *serv, int type, int arg)$/;"	f
fe_serverlist_open	servlistgui.c	/^fe_serverlist_open (session *sess)$/;"	f
fe_session_callback	maingui.c	/^fe_session_callback (session *sess)$/;"	f
fe_set_away	maingui.c	/^fe_set_away (server *serv)$/;"	f
fe_set_channel	maingui.c	/^fe_set_channel (session *sess)$/;"	f
fe_set_hilight	fe-gtk.c	/^fe_set_hilight (struct session *sess)$/;"	f
fe_set_inputbox_contents	fe-gtk.c	/^fe_set_inputbox_contents (session *sess, char *text)$/;"	f
fe_set_inputbox_cursor	fe-gtk.c	/^fe_set_inputbox_cursor (session *sess, int delta, int pos)$/;"	f
fe_set_lag	fe-gtk.c	/^fe_set_lag (server *serv, long lag)$/;"	f
fe_set_nick	maingui.c	/^fe_set_nick (server *serv, char *newnick)$/;"	f
fe_set_nonchannel	maingui.c	/^fe_set_nonchannel (session *sess, int state)$/;"	f
fe_set_tab_color	maingui.c	/^fe_set_tab_color (struct session *sess, int col)$/;"	f
fe_set_throttle	fe-gtk.c	/^fe_set_throttle (server *serv)$/;"	f
fe_set_title	maingui.c	/^fe_set_title (session *sess)$/;"	f
fe_set_topic	fe-gtk.c	/^fe_set_topic (session *sess, char *topic, char *stripped_topic)$/;"	f
fe_text_clear	fe-gtk.c	/^fe_text_clear (struct session *sess, int lines)$/;"	f
fe_timeout_add	fe-gtk.c	/^fe_timeout_add (int interval, void *callback, void *userdata)$/;"	f
fe_timeout_remove	fe-gtk.c	/^fe_timeout_remove (int tag)$/;"	f
fe_tray_set_file	plugin-tray.c	/^fe_tray_set_file (const char *filename)$/;"	f
fe_tray_set_flash	plugin-tray.c	/^fe_tray_set_flash (const char *filename1, const char *filename2, int tout)$/;"	f
fe_tray_set_icon	plugin-tray.c	/^fe_tray_set_icon (feicon icon)$/;"	f
fe_tray_set_tooltip	plugin-tray.c	/^fe_tray_set_tooltip (const char *text)$/;"	f
fe_update_channel_key	fe-gtk.c	/^fe_update_channel_key (struct session *sess)$/;"	f
fe_update_channel_limit	fe-gtk.c	/^fe_update_channel_limit (struct session *sess)$/;"	f
fe_update_mode_buttons	maingui.c	/^fe_update_mode_buttons (session *sess, char mode, char sign)$/;"	f
fe_update_mode_entry	fe-gtk.c	/^fe_update_mode_entry (session *sess, GtkWidget *entry, char **text, char *new_text)$/;"	f	file:
fe_url_add	urlgrab.c	/^fe_url_add (const char *urltext)$/;"	f
fe_uselect	userlistgui.c	/^fe_uselect (session *sess, char *word[], int do_clear, int scroll_to)$/;"	f
fe_userlist_clear	userlistgui.c	/^fe_userlist_clear (session *sess)$/;"	f
fe_userlist_insert	userlistgui.c	/^fe_userlist_insert (session *sess, struct User *newuser, gboolean sel)$/;"	f
fe_userlist_numbers	userlistgui.c	/^fe_userlist_numbers (session *sess)$/;"	f
fe_userlist_rehash	userlistgui.c	/^fe_userlist_rehash (session *sess, struct User *user)$/;"	f
fe_userlist_remove	userlistgui.c	/^fe_userlist_remove (session *sess, struct User *user)$/;"	f
fe_userlist_set_selected	userlistgui.c	/^fe_userlist_set_selected (struct session *sess)$/;"	f
fe_userlist_update	menu.c	/^fe_userlist_update (session *sess, struct User *user)$/;"	f
fgc	xtext.h	/^	GdkGC *fgc;						  \/* text foreground color *\/$/;"	m	struct:_GtkXText
file_label	dccgui.c	/^	GtkWidget *file_label;$/;"	m	struct:dccwindow	file:
file_req	gtkutil.c	/^struct file_req$/;"	s	file:
filereqcallback	gtkutil.h	/^typedef void (*filereqcallback) (void *, char *file);$/;"	t
filexfer_settings	setup.c	/^static const setting filexfer_settings[] =$/;"	v	file:
find_next_wrap	xtext.c	/^find_next_wrap (GtkXText * xtext, textentry * ent, unsigned char *str,$/;"	f	file:
find_row	userlistgui.c	/^find_row (GtkTreeView *treeview, GtkTreeModel *model, struct User *user,$/;"	f	file:
find_x	xtext.c	/^find_x (GtkXText *xtext, textentry *ent, int x, int subline, int indent)$/;"	f	file:
flag_b	fe-gtk.h	47;"	d
flag_c	fe-gtk.h	40;"	d
flag_i	fe-gtk.h	43;"	d
flag_k	fe-gtk.h	46;"	d
flag_l	fe-gtk.h	45;"	d
flag_m	fe-gtk.h	44;"	d
flag_n	fe-gtk.h	41;"	d
flag_t	fe-gtk.h	42;"	d
flag_wid	fe-gtk.h	/^		*flag_wid[NUM_FLAG_WIDS],		\/* channelmode buttons *\/$/;"	m	struct:session_gui
flag_wid_state	fe-gtk.h	/^	short flag_wid_state[NUM_FLAG_WIDS];$/;"	m	struct:restore_gui
flagk_hit	maingui.c	/^flagk_hit (GtkWidget * wid, struct session *sess)$/;"	f	file:
flagl_hit	maingui.c	/^flagl_hit (GtkWidget * wid, struct session *sess)$/;"	f	file:
flags	gtkutil.c	/^	int flags;		\/* FRF_* flags *\/$/;"	m	struct:file_req	file:
flash_tag	plugin-tray.c	/^static gint flash_tag;$/;"	v	file:
flash_window	maingui.c	/^flash_window (GtkWidget *win)$/;"	f	file:
focused	chanview.c	/^	chan *focused;		\/* currently focused channel *\/$/;"	m	struct:_chanview	file:
focusnewtabsmenu	setup.c	/^static const char *const focusnewtabsmenu[] =$/;"	v	file:
font	xtext.h	/^		PangoFontDescription *font;$/;"	m	struct:_GtkXText::pangofont
font	xtext.h	/^	} *font, pango_font;$/;"	m	struct:_GtkXText	typeref:struct:_GtkXText::pangofont
font_dialog	setup.c	/^static GtkWidget *font_dialog = NULL;$/;"	v	file:
fontsize	xtext.h	/^	int fontsize;$/;"	m	struct:_GtkXText
fontwidth	xtext.h	/^	guint16 fontwidth[128];	  \/* each char's width, only the ASCII ones *\/$/;"	m	struct:_GtkXText
fontwidths	xtext.c	/^static int fontwidths[4][128];$/;"	v	file:
force_render	xtext.h	/^	unsigned int force_render:1;$/;"	m	struct:_GtkXText
force_stamp	xtext.h	/^	unsigned int force_stamp:1;	\/* force redrawing it *\/$/;"	m	struct:_GtkXText
func_add	chanview.c	/^	void *(*func_add) (chanview *, chan *, char *, GtkTreeIter *);$/;"	m	struct:_chanview	file:
func_change_orientation	chanview.c	/^	void (*func_change_orientation) (chanview *);$/;"	m	struct:_chanview	file:
func_cleanup	chanview.c	/^	void (*func_cleanup) (chanview *);$/;"	m	struct:_chanview	file:
func_focus	chanview.c	/^	void (*func_focus) (chan *);$/;"	m	struct:_chanview	file:
func_get_parent	chanview.c	/^	chan *(*func_get_parent) (chan *);$/;"	m	struct:_chanview	file:
func_init	chanview.c	/^	void (*func_init) (chanview *);$/;"	m	struct:_chanview	file:
func_is_collapsed	chanview.c	/^	gboolean (*func_is_collapsed) (chan *);$/;"	m	struct:_chanview	file:
func_move	chanview.c	/^	void (*func_move) (chan *, int delta);$/;"	m	struct:_chanview	file:
func_move_family	chanview.c	/^	void (*func_move_family) (chan *, int delta);$/;"	m	struct:_chanview	file:
func_move_focus	chanview.c	/^	void (*func_move_focus) (chanview *, gboolean, int);$/;"	m	struct:_chanview	file:
func_postinit	chanview.c	/^	void (*func_postinit) (chanview *);$/;"	m	struct:_chanview	file:
func_remove	chanview.c	/^	void (*func_remove) (chan *);$/;"	m	struct:_chanview	file:
func_rename	chanview.c	/^	void (*func_rename) (chan *, char *);$/;"	m	struct:_chanview	file:
func_set_color	chanview.c	/^	void (*func_set_color) (chan *, PangoAttrList *);$/;"	m	struct:_chanview	file:
gcomp_data	fkeys.c	/^struct gcomp_data$/;"	s	file:
gcomp_nick_func	fkeys.c	/^gcomp_nick_func (char *data)$/;"	f	file:
general_settings	setup.c	/^static const setting general_settings[] =$/;"	v	file:
get_lang_from_dict	sexy-spell-entry.c	/^get_lang_from_dict(struct EnchantDict *dict)$/;"	f	file:
get_lang_from_dict_cb	sexy-spell-entry.c	/^get_lang_from_dict_cb(const char * const lang_tag,$/;"	f	file:
get_store	banlist.c	/^get_store (struct session *sess)$/;"	f	file:
get_store	editlist.c	/^get_store (void)$/;"	f	file:
get_store	fkeys.c	/^get_store (void)$/;"	f	file:
get_store	ignoregui.c	/^get_store (void)$/;"	f	file:
get_user_icon	userlistgui.c	/^get_user_icon (server *serv, struct User *user)$/;"	f
get_view	banlist.c	/^get_view (struct session *sess)$/;"	f	file:
get_word_extents_from_position	sexy-spell-entry.c	/^get_word_extents_from_position(SexySpellEntry *entry, gint *start, gint *end, guint position)$/;"	f	file:
gopt_entries	fe-gtk.c	/^static const GOptionEntry gopt_entries[] = $/;"	v	file:
gtk_entry_find_position	sexy-spell-entry.c	/^gtk_entry_find_position (GtkEntry *entry, gint x)$/;"	f	file:
gtk_reserved1	sexy-spell-entry.h	/^	void (*gtk_reserved1)(void);$/;"	m	struct:_SexySpellEntry
gtk_reserved1	sexy-spell-entry.h	/^	void (*gtk_reserved1)(void);$/;"	m	struct:_SexySpellEntryClass
gtk_reserved2	sexy-spell-entry.h	/^	void (*gtk_reserved2)(void);$/;"	m	struct:_SexySpellEntry
gtk_reserved2	sexy-spell-entry.h	/^	void (*gtk_reserved2)(void);$/;"	m	struct:_SexySpellEntryClass
gtk_reserved3	sexy-spell-entry.h	/^	void (*gtk_reserved3)(void);$/;"	m	struct:_SexySpellEntry
gtk_reserved3	sexy-spell-entry.h	/^	void (*gtk_reserved3)(void);$/;"	m	struct:_SexySpellEntryClass
gtk_reserved4	sexy-spell-entry.h	/^	void (*gtk_reserved4)(void);$/;"	m	struct:_SexySpellEntry
gtk_reserved4	sexy-spell-entry.h	/^	void (*gtk_reserved4)(void);$/;"	m	struct:_SexySpellEntryClass
gtk_xtext_adjustment_changed	xtext.c	/^gtk_xtext_adjustment_changed (GtkAdjustment * adj, GtkXText * xtext)$/;"	f	file:
gtk_xtext_adjustment_set	xtext.c	/^gtk_xtext_adjustment_set (xtext_buffer *buf, int fire_signal)$/;"	f	file:
gtk_xtext_adjustment_timeout	xtext.c	/^gtk_xtext_adjustment_timeout (GtkXText * xtext)$/;"	f	file:
gtk_xtext_append	xtext.c	/^gtk_xtext_append (xtext_buffer *buf, unsigned char *text, int len, time_t stamp)$/;"	f
gtk_xtext_append_entry	xtext.c	/^gtk_xtext_append_entry (xtext_buffer *buf, textentry * ent, time_t stamp)$/;"	f	file:
gtk_xtext_append_indent	xtext.c	/^gtk_xtext_append_indent (xtext_buffer *buf,$/;"	f
gtk_xtext_buffer_free	xtext.c	/^gtk_xtext_buffer_free (xtext_buffer *buf)$/;"	f
gtk_xtext_buffer_new	xtext.c	/^gtk_xtext_buffer_new (GtkXText *xtext)$/;"	f
gtk_xtext_buffer_show	xtext.c	/^gtk_xtext_buffer_show (GtkXText *xtext, xtext_buffer *buf, int render)$/;"	f
gtk_xtext_button_press	xtext.c	/^gtk_xtext_button_press (GtkWidget * widget, GdkEventButton * event)$/;"	f	file:
gtk_xtext_button_release	xtext.c	/^gtk_xtext_button_release (GtkWidget * widget, GdkEventButton * event)$/;"	f	file:
gtk_xtext_calc_lines	xtext.c	/^gtk_xtext_calc_lines (xtext_buffer *buf, int fire_signal)$/;"	f	file:
gtk_xtext_check_ent_visibility	xtext.c	/^gtk_xtext_check_ent_visibility (GtkXText * xtext, textentry *find_ent, int add)$/;"	f	file:
gtk_xtext_check_mark_stamp	xtext.c	/^gtk_xtext_check_mark_stamp (GtkXText *xtext, GdkModifierType mask)$/;"	f	file:
gtk_xtext_check_marker_visibility	xtext.c	/^gtk_xtext_check_marker_visibility (GtkXText * xtext)$/;"	f
gtk_xtext_class_init	xtext.c	/^gtk_xtext_class_init (GtkXTextClass * class)$/;"	f	file:
gtk_xtext_clear	xtext.c	/^gtk_xtext_clear (xtext_buffer *buf, int lines)$/;"	f
gtk_xtext_copy_selection	xtext.c	/^gtk_xtext_copy_selection (GtkXText *xtext)$/;"	f
gtk_xtext_destroy	xtext.c	/^gtk_xtext_destroy (GtkObject * object)$/;"	f	file:
gtk_xtext_draw_marker	xtext.c	/^gtk_xtext_draw_marker (GtkXText * xtext, textentry * ent, int y)$/;"	f	file:
gtk_xtext_draw_sep	xtext.c	/^gtk_xtext_draw_sep (GtkXText * xtext, int y)$/;"	f	file:
gtk_xtext_expose	xtext.c	/^gtk_xtext_expose (GtkWidget * widget, GdkEventExpose * event)$/;"	f	file:
gtk_xtext_find_char	xtext.c	/^gtk_xtext_find_char (GtkXText * xtext, int x, int y, int *off,$/;"	f	file:
gtk_xtext_find_subline	xtext.c	/^gtk_xtext_find_subline (GtkXText *xtext, textentry *ent, int line)$/;"	f	file:
gtk_xtext_find_x	xtext.c	/^gtk_xtext_find_x (GtkXText * xtext, int x, textentry * ent, int subline,$/;"	f	file:
gtk_xtext_fix_indent	xtext.c	/^gtk_xtext_fix_indent (xtext_buffer *buf)$/;"	f	file:
gtk_xtext_foreach	xtext.c	/^gtk_xtext_foreach (xtext_buffer *buf, GtkXTextForeach func, void *data)$/;"	f
gtk_xtext_get_type	xtext.c	/^gtk_xtext_get_type (void)$/;"	f
gtk_xtext_get_word	xtext.c	/^gtk_xtext_get_word (GtkXText * xtext, int x, int y, textentry ** ret_ent,$/;"	f	file:
gtk_xtext_get_word_adjust	xtext.c	/^gtk_xtext_get_word_adjust (GtkXText *xtext, int x, int y, textentry **word_ent, int *offset, int *len)$/;"	f	file:
gtk_xtext_init	xtext.c	/^gtk_xtext_init (GtkXText * xtext)$/;"	f	file:
gtk_xtext_is_empty	xtext.c	/^gtk_xtext_is_empty (xtext_buffer *buf)$/;"	f
gtk_xtext_kill_ent	xtext.c	/^gtk_xtext_kill_ent (xtext_buffer *buffer, textentry *ent)$/;"	f	file:
gtk_xtext_lastlog	xtext.c	/^gtk_xtext_lastlog (xtext_buffer *out, xtext_buffer *search_area)$/;"	f
gtk_xtext_leave_notify	xtext.c	/^gtk_xtext_leave_notify (GtkWidget * widget, GdkEventCrossing * event)$/;"	f	file:
gtk_xtext_lines_taken	xtext.c	/^gtk_xtext_lines_taken (xtext_buffer *buf, textentry * ent)$/;"	f	file:
gtk_xtext_motion_notify	xtext.c	/^gtk_xtext_motion_notify (GtkWidget * widget, GdkEventMotion * event)$/;"	f	file:
gtk_xtext_moveto_marker_pos	xtext.c	/^gtk_xtext_moveto_marker_pos (GtkXText *xtext)$/;"	f
gtk_xtext_new	xtext.c	/^gtk_xtext_new (GdkColor palette[], int separator)$/;"	f
gtk_xtext_nth	xtext.c	/^gtk_xtext_nth (GtkXText *xtext, int line, int *subline)$/;"	f	file:
gtk_xtext_paint	xtext.c	/^gtk_xtext_paint (GtkWidget *widget, GdkRectangle *area)$/;"	f	file:
gtk_xtext_realize	xtext.c	/^gtk_xtext_realize (GtkWidget * widget)$/;"	f	file:
gtk_xtext_recalc_widths	xtext.c	/^gtk_xtext_recalc_widths (xtext_buffer *buf, int do_str_width)$/;"	f	file:
gtk_xtext_refresh	xtext.c	/^gtk_xtext_refresh (GtkXText * xtext)$/;"	f
gtk_xtext_remove_bottom	xtext.c	/^gtk_xtext_remove_bottom (xtext_buffer *buffer)$/;"	f	file:
gtk_xtext_remove_top	xtext.c	/^gtk_xtext_remove_top (xtext_buffer *buffer)$/;"	f	file:
gtk_xtext_render_ents	xtext.c	/^gtk_xtext_render_ents (GtkXText * xtext, textentry * enta, textentry * entb)$/;"	f	file:
gtk_xtext_render_flush	xtext.c	/^gtk_xtext_render_flush (GtkXText * xtext, int x, int y, unsigned char *str,$/;"	f	file:
gtk_xtext_render_line	xtext.c	/^gtk_xtext_render_line (GtkXText * xtext, textentry * ent, int line,$/;"	f	file:
gtk_xtext_render_page	xtext.c	/^gtk_xtext_render_page (GtkXText * xtext)$/;"	f	file:
gtk_xtext_render_page_timeout	xtext.c	/^gtk_xtext_render_page_timeout (GtkXText * xtext)$/;"	f	file:
gtk_xtext_render_stamp	xtext.c	/^gtk_xtext_render_stamp (GtkXText * xtext, textentry * ent,$/;"	f	file:
gtk_xtext_render_str	xtext.c	/^gtk_xtext_render_str (GtkXText * xtext, int y, textentry * ent,$/;"	f	file:
gtk_xtext_reset	xtext.c	/^gtk_xtext_reset (GtkXText * xtext, int mark, int attribs)$/;"	f	file:
gtk_xtext_reset_marker_pos	xtext.c	/^gtk_xtext_reset_marker_pos (GtkXText *xtext)$/;"	f
gtk_xtext_save	xtext.c	/^gtk_xtext_save (GtkXText * xtext, int fh)$/;"	f
gtk_xtext_scroll	xtext.c	/^gtk_xtext_scroll (GtkWidget *widget, GdkEventScroll *event)$/;"	f	file:
gtk_xtext_scroll_adjustments	xtext.c	/^gtk_xtext_scroll_adjustments (GtkXText *xtext, GtkAdjustment *hadj, GtkAdjustment *vadj)$/;"	f	file:
gtk_xtext_scrolldown_timeout	xtext.c	/^gtk_xtext_scrolldown_timeout (GtkXText * xtext)$/;"	f	file:
gtk_xtext_scrollup_timeout	xtext.c	/^gtk_xtext_scrollup_timeout (GtkXText * xtext)$/;"	f	file:
gtk_xtext_search	xtext.c	/^gtk_xtext_search (GtkXText * xtext, const gchar *text, gtk_xtext_search_flags flags, GError **perr)$/;"	f
gtk_xtext_search_fini	xtext.c	/^gtk_xtext_search_fini (xtext_buffer *buf)$/;"	f	file:
gtk_xtext_search_init	xtext.c	/^gtk_xtext_search_init (xtext_buffer *buf, const gchar *text, gtk_xtext_search_flags flags, GError **perr)$/;"	f	file:
gtk_xtext_search_offset	xtext.c	/^gtk_xtext_search_offset (xtext_buffer *buf, textentry *ent, unsigned int off)$/;"	f	file:
gtk_xtext_search_textentry	xtext.c	/^gtk_xtext_search_textentry (xtext_buffer *buf, textentry *ent)$/;"	f	file:
gtk_xtext_search_textentry_add	xtext.c	/^gtk_xtext_search_textentry_add (xtext_buffer *buf, textentry *ent, GList *gl, gboolean pre)$/;"	f	file:
gtk_xtext_search_textentry_del	xtext.c	/^gtk_xtext_search_textentry_del (xtext_buffer *buf, textentry *ent)$/;"	f	file:
gtk_xtext_search_textentry_fini	xtext.c	/^gtk_xtext_search_textentry_fini (gpointer entp, gpointer dummy)$/;"	f	file:
gtk_xtext_selection_clear	xtext.c	/^gtk_xtext_selection_clear (xtext_buffer *buf)$/;"	f	file:
gtk_xtext_selection_down	xtext.c	/^gtk_xtext_selection_down (GtkXText *xtext, textentry *start, textentry *end,$/;"	f	file:
gtk_xtext_selection_draw	xtext.c	/^gtk_xtext_selection_draw (GtkXText * xtext, GdkEventMotion * event, gboolean render)$/;"	f	file:
gtk_xtext_selection_get	xtext.c	/^gtk_xtext_selection_get (GtkWidget * widget,$/;"	f	file:
gtk_xtext_selection_get_text	xtext.c	/^gtk_xtext_selection_get_text (GtkXText *xtext, int *len_ret)$/;"	f	file:
gtk_xtext_selection_kill	xtext.c	/^gtk_xtext_selection_kill (GtkXText *xtext, GdkEventSelection *event)$/;"	f	file:
gtk_xtext_selection_render	xtext.c	/^gtk_xtext_selection_render (GtkXText *xtext, textentry *start_ent, textentry *end_ent)$/;"	f	file:
gtk_xtext_selection_up	xtext.c	/^gtk_xtext_selection_up (GtkXText *xtext, textentry *start, textentry *end,$/;"	f	file:
gtk_xtext_selection_update	xtext.c	/^gtk_xtext_selection_update (GtkXText * xtext, GdkEventMotion * event, int p_y, gboolean render)$/;"	f	file:
gtk_xtext_set_background	xtext.c	/^gtk_xtext_set_background (GtkXText * xtext, GdkPixmap * pixmap)$/;"	f
gtk_xtext_set_clip_owner	xtext.c	/^gtk_xtext_set_clip_owner (GtkWidget * xtext, GdkEventButton * event)$/;"	f	file:
gtk_xtext_set_font	xtext.c	/^gtk_xtext_set_font (GtkXText *xtext, char *name)$/;"	f
gtk_xtext_set_indent	xtext.c	/^gtk_xtext_set_indent (GtkXText *xtext, gboolean indent)$/;"	f
gtk_xtext_set_marker_last	xtext.c	/^gtk_xtext_set_marker_last (session *sess)$/;"	f
gtk_xtext_set_max_indent	xtext.c	/^gtk_xtext_set_max_indent (GtkXText *xtext, int max_auto_indent)$/;"	f
gtk_xtext_set_max_lines	xtext.c	/^gtk_xtext_set_max_lines (GtkXText *xtext, int max_lines)$/;"	f
gtk_xtext_set_palette	xtext.c	/^gtk_xtext_set_palette (GtkXText * xtext, GdkColor palette[])$/;"	f
gtk_xtext_set_show_marker	xtext.c	/^gtk_xtext_set_show_marker (GtkXText *xtext, gboolean show_marker)$/;"	f
gtk_xtext_set_show_separator	xtext.c	/^gtk_xtext_set_show_separator (GtkXText *xtext, gboolean show_separator)$/;"	f
gtk_xtext_set_thin_separator	xtext.c	/^gtk_xtext_set_thin_separator (GtkXText *xtext, gboolean thin_separator)$/;"	f
gtk_xtext_set_time_stamp	xtext.c	/^gtk_xtext_set_time_stamp (xtext_buffer *buf, gboolean time_stamp)$/;"	f
gtk_xtext_set_urlcheck_function	xtext.c	/^gtk_xtext_set_urlcheck_function (GtkXText *xtext, int (*urlcheck_function) (GtkWidget *, char *))$/;"	f
gtk_xtext_set_wordwrap	xtext.c	/^gtk_xtext_set_wordwrap (GtkXText *xtext, gboolean wordwrap)$/;"	f
gtk_xtext_size_allocate	xtext.c	/^gtk_xtext_size_allocate (GtkWidget * widget, GtkAllocation * allocation)$/;"	f	file:
gtk_xtext_size_request	xtext.c	/^gtk_xtext_size_request (GtkWidget * widget, GtkRequisition * requisition)$/;"	f	file:
gtk_xtext_strip_color	xtext.c	/^gtk_xtext_strip_color (unsigned char *text, int len, unsigned char *outbuf,$/;"	f	file:
gtk_xtext_text_width	xtext.c	/^gtk_xtext_text_width (GtkXText *xtext, unsigned char *text, int len)$/;"	f	file:
gtk_xtext_text_width_ent	xtext.c	/^gtk_xtext_text_width_ent (GtkXText *xtext, textentry *ent)$/;"	f	file:
gtk_xtext_timeout_ms	xtext.c	/^gtk_xtext_timeout_ms (GtkXText *xtext, int pixes)$/;"	f	file:
gtk_xtext_unrealize	xtext.c	/^gtk_xtext_unrealize (GtkWidget * widget)$/;"	f	file:
gtk_xtext_unrender_hilight	xtext.c	/^gtk_xtext_unrender_hilight (GtkXText *xtext)$/;"	f	file:
gtk_xtext_unselect	xtext.c	/^gtk_xtext_unselect (GtkXText *xtext)$/;"	f	file:
gtk_xtext_unstrip_color	xtext.c	/^gtk_xtext_unstrip_color (gint start, gint end, GSList *slp, GList **gl, gint maxo)$/;"	f	file:
gtkosx_application_terminate	fe-gtk.c	/^gtkosx_application_terminate (GtkosxApplication *app, gpointer userdata)$/;"	f	file:
gtkutil_button	gtkutil.c	/^gtkutil_button (GtkWidget *box, char *stock, char *tip, void *callback,$/;"	f
gtkutil_check_file	gtkutil.c	/^gtkutil_check_file (char *filename, struct file_req *freq)$/;"	f	file:
gtkutil_copy_to_clipboard	gtkutil.c	/^gtkutil_copy_to_clipboard (GtkWidget *widget, GdkAtom selection,$/;"	f
gtkutil_destroy	gtkutil.c	/^gtkutil_destroy (GtkWidget * igad, GtkWidget * dgad)$/;"	f
gtkutil_destroy_on_esc	gtkutil.c	/^gtkutil_destroy_on_esc (GtkWidget *win)$/;"	f
gtkutil_entry_new	gtkutil.c	/^gtkutil_entry_new (int max, GtkWidget * box, void *callback,$/;"	f
gtkutil_esc_destroy	gtkutil.c	/^gtkutil_esc_destroy (GtkWidget * win, GdkEventKey * key, gpointer userdata)$/;"	f	file:
gtkutil_file_req	gtkutil.c	/^gtkutil_file_req (const char *title, void *callback, void *userdata, char *filter, char *extensions,$/;"	f
gtkutil_file_req_destroy	gtkutil.c	/^gtkutil_file_req_destroy (GtkWidget * wid, struct file_req *freq)$/;"	f	file:
gtkutil_file_req_done	gtkutil.c	/^gtkutil_file_req_done (GtkWidget * wid, struct file_req *freq)$/;"	f	file:
gtkutil_file_req_response	gtkutil.c	/^gtkutil_file_req_response (GtkWidget *dialog, gint res, struct file_req *freq)$/;"	f	file:
gtkutil_find_font	gtkutil.c	/^gtkutil_find_font (const char *fontname)$/;"	f
gtkutil_get_bool_response	gtkutil.c	/^gtkutil_get_bool_response (GtkDialog *dialog, gint arg1, gpointer spin)$/;"	f	file:
gtkutil_get_number_response	gtkutil.c	/^gtkutil_get_number_response (GtkDialog *dialog, gint arg1, gpointer spin)$/;"	f	file:
gtkutil_get_str_response	gtkutil.c	/^gtkutil_get_str_response (GtkDialog *dialog, gint arg1, gpointer entry)$/;"	f	file:
gtkutil_label_new	gtkutil.c	/^gtkutil_label_new (char *text, GtkWidget * box)$/;"	f
gtkutil_set_icon	gtkutil.c	/^gtkutil_set_icon (GtkWidget *win)$/;"	f
gtkutil_str_enter	gtkutil.c	/^gtkutil_str_enter (GtkWidget *entry, GtkWidget *dialog)$/;"	f	file:
gtkutil_treemodel_string_to_iter	gtkutil.c	/^gtkutil_treemodel_string_to_iter (GtkTreeModel *model, gchar *pathstr, GtkTreeIter *iter_ret)$/;"	f
gtkutil_treeview_get_selected	gtkutil.c	/^gtkutil_treeview_get_selected (GtkTreeView *view, GtkTreeIter *iter_ret, ...)$/;"	f
gtkutil_treeview_new	gtkutil.c	/^gtkutil_treeview_new (GtkWidget *box, GtkTreeModel *model,$/;"	f
gtkutil_window_new	gtkutil.c	/^gtkutil_window_new (char *title, char *role, int width, int height, int flags)$/;"	f
hand_cursor	xtext.h	/^	GdkCursor *hand_cursor;$/;"	m	struct:_GtkXText
handler	fkeys.c	/^	int (*handler) (GtkWidget * wid, GdkEventKey * evt, char *d1, char *d2,$/;"	m	struct:key_action	file:
have_enchant	sexy-spell-entry.c	/^static gboolean have_enchant = FALSE;$/;"	v	file:
have_regex	fe-gtk.h	/^	unsigned int have_regex;$/;"	m	struct:server_gui
help	fkeys.c	/^	char *help;$/;"	m	struct:key_action	file:
hexchat_CPPFLAGS	Makefile	/^hexchat_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_builddir)\/src\/common$/;"	m
hexchat_DEPENDENCIES	Makefile	/^hexchat_DEPENDENCIES = ..\/common\/libhexchatcommon.a \\$/;"	m
hexchat_LDADD	Makefile	/^hexchat_LDADD = ..\/common\/libhexchatcommon.a $(GUI_LIBS)$/;"	m
hexchat_LINK	Makefile	/^hexchat_LINK = $(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) \\$/;"	m
hexchat_OBJECTS	Makefile	/^hexchat_OBJECTS = $(am_hexchat_OBJECTS)$/;"	m
hexchat_SOURCES	Makefile	/^hexchat_SOURCES = ascii.c banlist.c chanlist.c chanview.c custom-list.c \\$/;"	m
hexchat_context	plugingui.c	/^typedef struct session hexchat_context;$/;"	t	typeref:struct:session	file:
hexchat_get_resource	resources.c	/^GResource *hexchat_get_resource (void)$/;"	f
hexchat_resource_data	resources.c	/^static const SECTION union { const guint8 data[39503]; const double alignment; void * const ptr;}  hexchat_resource_data = { {$/;"	v	typeref:union:__anon20	file:
hexchatlibdir	Makefile	/^hexchatlibdir = ${exec_prefix}\/lib\/hexchat\/plugins$/;"	m
hidden	xtext.h	/^	unsigned int hidden:1;$/;"	m	struct:_GtkXText
hilight_end	xtext.h	/^	int hilight_end;$/;"	m	struct:_GtkXText
hilight_ent	xtext.h	/^	textentry *hilight_ent;$/;"	m	struct:_GtkXText
hilight_start	xtext.h	/^	int hilight_start;$/;"	m	struct:_GtkXText
hilighting	xtext.h	/^	unsigned int hilighting:1;$/;"	m	struct:_GtkXText
hintsearch	xtext.h	/^	textentry *hintsearch;	\/* textentry found for last search *\/$/;"	m	struct:__anon31
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
hpane_left	fe-gtk.h	/^		*hpane_left,$/;"	m	struct:session_gui
hpane_right	fe-gtk.h	/^		*hpane_right,$/;"	m	struct:session_gui
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
icon	chanview.c	/^	GdkPixbuf *icon;$/;"	m	struct:_chan	file:
id	menu.c	/^	unsigned char id;		\/* MENU_ID_XXX (menu.h) *\/$/;"	m	struct:mymenu	file:
ignore_all	sexy-spell-entry.c	/^ignore_all(GtkWidget *menuitem, SexySpellEntry *entry)$/;"	f	file:
ignore_changed	setup.c	/^static int ignore_changed = FALSE;$/;"	v	file:
ignore_chanmode	maingui.c	/^static int ignore_chanmode = FALSE;$/;"	v	file:
ignore_clear_cb	ignoregui.c	/^ignore_clear_cb (GtkDialog *dialog, gint response)$/;"	f	file:
ignore_clear_entry_clicked	ignoregui.c	/^ignore_clear_entry_clicked (GtkWidget * wid)$/;"	f	file:
ignore_delete_entry_clicked	ignoregui.c	/^ignore_delete_entry_clicked (GtkWidget * wid, struct session *sess)$/;"	f	file:
ignore_get_flags	ignoregui.c	/^ignore_get_flags (GtkTreeModel *model, GtkTreeIter *iter)$/;"	f	file:
ignore_gui_open	ignoregui.c	/^ignore_gui_open ()$/;"	f
ignore_hidden	xtext.h	/^	unsigned int ignore_hidden:1;	\/* rawlog uses this *\/$/;"	m	struct:_GtkXText
ignore_new_entry_clicked	ignoregui.c	/^ignore_new_entry_clicked (GtkWidget * wid, struct session *sess)$/;"	f	file:
ignore_stats_entry	ignoregui.c	/^ignore_stats_entry (GtkWidget * box, char *label, int value)$/;"	f	file:
ignore_store_new	ignoregui.c	/^ignore_store_new (int cancel, char *mask, gpointer data)$/;"	f	file:
ignore_toggle	chanview-tabs.c	/^static int ignore_toggle = FALSE;$/;"	v	file:
ignore_treeview_new	ignoregui.c	/^ignore_treeview_new (GtkWidget *box)$/;"	f	file:
ignorewin	ignoregui.c	/^static GtkWidget *ignorewin = 0;$/;"	v	file:
image	menu.c	/^	char *image;$/;"	m	struct:mymenu	file:
impl	chanview.c	/^	void *impl;	\/* togglebutton or null *\/$/;"	m	struct:_chan	file:
implscratch	chanview.c	/^	char implscratch[sizeof (void *) * 8];$/;"	m	struct:_chanview	file:
in_hilight	xtext.h	/^	unsigned int in_hilight:1;$/;"	m	struct:_GtkXText
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
incoming_hilight_cb	plugin-notification.c	/^incoming_hilight_cb (char *word[], gpointer userdata)$/;"	f	file:
incoming_message_cb	plugin-notification.c	/^incoming_message_cb (char *word[], gpointer userdata)$/;"	f	file:
incoming_priv_cb	plugin-notification.c	/^incoming_priv_cb (char *word[], gpointer userdata)$/;"	f	file:
indent	xtext.c	/^	gint16 indent;$/;"	m	struct:textentry	file:
indent	xtext.h	/^	int indent;						  \/* position of separator (pixels) from left *\/$/;"	m	struct:__anon31
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
initialize_enchant	sexy-spell-entry.c	/^initialize_enchant ()$/;"	f	file:
inner	chanview-tabs.c	/^	GtkWidget *inner;	\/* inner box *\/$/;"	m	struct:__anon4	file:
input_box	fe-gtk.h	/^		*input_box,$/;"	m	struct:session_gui
input_style	maingui.c	/^GtkStyle *input_style;$/;"	v
input_text	fe-gtk.h	/^	char *input_text;	\/* input text buffer (while not-front tab) *\/$/;"	m	struct:restore_gui
inputbox_settings	setup.c	/^static const setting inputbox_settings[] =$/;"	v	file:
insert_bold	sexy-spell-entry.c	/^insert_bold (SexySpellEntry *entry, guint start, gboolean toggle)$/;"	f	file:
insert_color	sexy-spell-entry.c	/^insert_color (SexySpellEntry *entry, guint start, int fgcolor, int bgcolor)$/;"	f	file:
insert_hiddenchar	sexy-spell-entry.c	/^insert_hiddenchar (SexySpellEntry *entry, guint start, guint end)$/;"	f	file:
insert_italic	sexy-spell-entry.c	/^insert_italic (SexySpellEntry *entry, guint start, gboolean toggle)$/;"	f	file:
insert_reset	sexy-spell-entry.c	/^insert_reset (SexySpellEntry *entry, guint start)$/;"	f	file:
insert_underline	sexy-spell-entry.c	/^insert_underline (SexySpellEntry *entry, guint start, gboolean toggle)$/;"	f	file:
insert_underline_error	sexy-spell-entry.c	/^insert_underline_error (SexySpellEntry *entry, guint start, guint end)$/;"	f	file:
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/andrew\/src\/hexchat\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
intltool__v_merge_options_	Makefile	/^intltool__v_merge_options_ = $(intltool__v_merge_options_$(AM_DEFAULT_VERBOSITY))$/;"	m
intltool__v_merge_options_0	Makefile	/^intltool__v_merge_options_0 = -q$/;"	m
io_tag	xtext.h	/^	gint io_tag;					  \/* for delayed refresh events *\/$/;"	m	struct:_GtkXText
is_child_of	maingui.c	/^is_child_of (GtkWidget *widget, GtkWidget *parent)$/;"	f	file:
is_del	xtext.c	66;"	d	file:
is_ignored	plugin-notification.c	/^is_ignored (char *nick)$/;"	f	file:
is_in_path	menu.c	/^is_in_path (char *cmd)$/;"	f	file:
is_tab	fe-gtk.h	/^	guint16 is_tab;	\/* is tab or toplevel? *\/$/;"	m	struct:session_gui
iso_3166_start_element	sexy-iso-codes.c	/^iso_3166_start_element (GMarkupParseContext *context,$/;"	f	file:
iso_3166_table	sexy-iso-codes.c	/^static GHashTable *iso_3166_table = NULL;$/;"	v	file:
iso_639_start_element	sexy-iso-codes.c	/^iso_639_start_element (GMarkupParseContext *context,$/;"	f	file:
iso_639_table	sexy-iso-codes.c	/^static GHashTable *iso_639_table = NULL;$/;"	v	file:
iso_codes_c	Makefile	/^iso_codes_c = sexy-iso-codes.c$/;"	m
iso_codes_parse	sexy-iso-codes.c	/^iso_codes_parse (const GMarkupParser *parser,$/;"	f	file:
iter	chanview.c	/^	GtkTreeIter iter;$/;"	m	struct:_chan	file:
joind_check	fe-gtk.h	/^	GtkWidget *joind_check;$/;"	m	struct:server_gui
joind_close	joind.c	/^joind_close (server *serv)$/;"	f
joind_destroy_cb	joind.c	/^joind_destroy_cb (GtkWidget *win, server *serv)$/;"	f	file:
joind_entry	fe-gtk.h	/^	GtkWidget *joind_entry;$/;"	m	struct:server_gui
joind_entryenter_cb	joind.c	/^joind_entryenter_cb (GtkWidget *entry, GtkWidget *ok)$/;"	f	file:
joind_entryfocus_cb	joind.c	/^joind_entryfocus_cb (GtkWidget *entry, GdkEventFocus *event, server *serv)$/;"	f	file:
joind_ok_cb	joind.c	/^joind_ok_cb (GtkWidget *ok, server *serv)$/;"	f	file:
joind_open	joind.c	/^joind_open (server *serv)$/;"	f
joind_radio1	fe-gtk.h	/^	GtkWidget *joind_radio1;$/;"	m	struct:server_gui
joind_radio2	fe-gtk.h	/^	GtkWidget *joind_radio2;$/;"	m	struct:server_gui
joind_radio2_cb	joind.c	/^joind_radio2_cb (GtkWidget *radio, server *serv)$/;"	f	file:
joind_show_dialog	joind.c	/^joind_show_dialog (server *serv)$/;"	f	file:
joind_win	fe-gtk.h	/^	GtkWidget *joind_win;$/;"	m	struct:server_gui
jump_in_offset	xtext.h	/^	int jump_in_offset;	\/* "" start rendering *\/$/;"	m	struct:_GtkXText
jump_out_offset	xtext.h	/^	int jump_out_offset;	\/* point at which to stop rendering *\/$/;"	m	struct:_GtkXText
key	menu.c	/^	guint key;				\/* GDK_KEY_x *\/$/;"	m	struct:mymenu	file:
key_action	fkeys.c	/^struct key_action$/;"	s	file:
key_action_comp_chng	fkeys.c	/^key_action_comp_chng (GtkWidget * wid, GdkEventKey * ent, char *d1, char *d2,$/;"	f	file:
key_action_handle_command	fkeys.c	/^key_action_handle_command (GtkWidget * wid, GdkEventKey * evt, char *d1,$/;"	f	file:
key_action_history_down	fkeys.c	/^key_action_history_down (GtkWidget * wid, GdkEventKey * ent, char *d1,$/;"	f	file:
key_action_history_up	fkeys.c	/^key_action_history_up (GtkWidget * wid, GdkEventKey * ent, char *d1, char *d2,$/;"	f	file:
key_action_insert	fkeys.c	/^key_action_insert (GtkWidget * wid, GdkEventKey * evt, char *d1, char *d2,$/;"	f
key_action_move_tab_family_left	fkeys.c	/^key_action_move_tab_family_left (GtkWidget * wid, GdkEventKey * ent, char *d1,$/;"	f	file:
key_action_move_tab_family_right	fkeys.c	/^key_action_move_tab_family_right (GtkWidget * wid, GdkEventKey * ent, char *d1,$/;"	f	file:
key_action_move_tab_left	fkeys.c	/^key_action_move_tab_left (GtkWidget * wid, GdkEventKey * ent, char *d1,$/;"	f	file:
key_action_move_tab_right	fkeys.c	/^key_action_move_tab_right (GtkWidget * wid, GdkEventKey * ent, char *d1,$/;"	f	file:
key_action_page_switch	fkeys.c	/^key_action_page_switch (GtkWidget * wid, GdkEventKey * evt, char *d1,$/;"	f	file:
key_action_put_history	fkeys.c	/^key_action_put_history (GtkWidget * wid, GdkEventKey * ent, char *d1,$/;"	f	file:
key_action_replace	fkeys.c	/^key_action_replace (GtkWidget * wid, GdkEventKey * ent, char *d1, char *d2,$/;"	f	file:
key_action_scroll_page	fkeys.c	/^key_action_scroll_page (GtkWidget * wid, GdkEventKey * evt, char *d1,$/;"	f	file:
key_action_set_buffer	fkeys.c	/^key_action_set_buffer (GtkWidget * wid, GdkEventKey * evt, char *d1, char *d2,$/;"	f	file:
key_action_tab_clean	fkeys.c	/^key_action_tab_clean(void)$/;"	f
key_action_tab_comp	fkeys.c	/^key_action_tab_comp (GtkWidget *t, GdkEventKey *entry, char *d1, char *d2,$/;"	f	file:
key_actions	fkeys.c	/^static const struct key_action key_actions[KEY_MAX_ACTIONS + 1] = {$/;"	v	typeref:struct:key_action	file:
key_binding	fkeys.c	/^struct key_binding$/;"	s	file:
key_dialog	fkeys.c	/^static GtkWidget *key_dialog = NULL;$/;"	v	file:
key_dialog_add	fkeys.c	/^key_dialog_add (GtkWidget *wid, gpointer userdata)$/;"	f	file:
key_dialog_close	fkeys.c	/^key_dialog_close (GtkWidget *wid, gpointer userdata)$/;"	f	file:
key_dialog_combo_changed	fkeys.c	/^key_dialog_combo_changed (GtkCellRendererCombo *combo, gchar *pathstr,$/;"	f	file:
key_dialog_delete	fkeys.c	/^key_dialog_delete (GtkWidget *wid, gpointer userdata)$/;"	f	file:
key_dialog_entry_edited	fkeys.c	/^key_dialog_entry_edited (GtkCellRendererText *render, gchar *pathstr, gchar *new_text, gpointer data)$/;"	f	file:
key_dialog_keypress	fkeys.c	/^key_dialog_keypress (GtkWidget *wid, GdkEventKey *evt, gpointer userdata)$/;"	f	file:
key_dialog_load	fkeys.c	/^key_dialog_load (GtkListStore *store)$/;"	f	file:
key_dialog_print_text	fkeys.c	/^key_dialog_print_text (GtkXText *xtext, char *text)$/;"	f	file:
key_dialog_save	fkeys.c	/^key_dialog_save (GtkWidget *wid, gpointer userdata)$/;"	f	file:
key_dialog_selection_changed	fkeys.c	/^key_dialog_selection_changed (GtkTreeSelection *sel, gpointer userdata)$/;"	f	file:
key_dialog_set_key	fkeys.c	/^key_dialog_set_key (GtkCellRendererAccel *accel, gchar *pathstr, guint accel_key, $/;"	f	file:
key_dialog_show	fkeys.c	/^key_dialog_show ()$/;"	f
key_dialog_treeview_new	fkeys.c	/^key_dialog_treeview_new (GtkWidget *box)$/;"	f	file:
key_entry	fe-gtk.h	/^		*key_entry;		  \/* +k *\/$/;"	m	struct:session_gui
key_free	fkeys.c	/^key_free (gpointer data)$/;"	f	file:
key_get_action_from_string	fkeys.c	/^key_get_action_from_string (char *text)$/;"	f	file:
key_handle_key_press	fkeys.c	/^key_handle_key_press (GtkWidget *wid, GdkEventKey *evt, session *sess)$/;"	f
key_init	fkeys.c	/^key_init ()$/;"	f
key_load_kbs	fkeys.c	/^key_load_kbs (void)$/;"	f	file:
key_load_kbs_helper_mod	fkeys.c	/^key_load_kbs_helper_mod (char *buf, GdkModifierType *out)$/;"	f	file:
key_modifier_get_valid	fkeys.c	/^key_modifier_get_valid (GdkModifierType mod)$/;"	f	file:
key_save_kbs	fkeys.c	/^key_save_kbs (void)$/;"	f	file:
key_text	fe-gtk.h	/^	char *key_text;$/;"	m	struct:restore_gui
keybind_list	fkeys.c	/^static GSList *keybind_list = NULL;$/;"	v	file:
keyval	fkeys.c	/^	guint keyval;					  \/* keyval from gdk *\/$/;"	m	struct:key_binding	file:
label	setup.c	/^	char *label;$/;"	m	struct:__anon23	file:
lag_text	fe-gtk.h	/^	char *lag_text;	\/* lag-o-meter text *\/$/;"	m	struct:restore_gui
lag_tip	fe-gtk.h	/^	char *lag_tip;		\/* lag-o-meter tooltip *\/$/;"	m	struct:restore_gui
lag_value	fe-gtk.h	/^	gfloat lag_value;	\/* lag-o-meter *\/$/;"	m	struct:restore_gui
laginfo	fe-gtk.h	/^		*laginfo,$/;"	m	struct:session_gui
lagmenutext	setup.c	/^static const char *const lagmenutext[] = $/;"	v	file:
lagometer	fe-gtk.h	/^		*lagometer,$/;"	m	struct:session_gui
langsmenu	setup.c	/^static const char *const langsmenu[] =$/;"	v	file:
last_ent_end	xtext.h	/^	textentry *last_ent_end;	  \/* selection. *\/$/;"	m	struct:__anon31
last_ent_start	xtext.h	/^	textentry *last_ent_start;	  \/* this basically describes the last rendered *\/$/;"	m	struct:__anon31
last_offset_end	xtext.h	/^	int last_offset_end;$/;"	m	struct:__anon31
last_offset_start	xtext.h	/^	int last_offset_start;$/;"	m	struct:__anon31
last_pixel_pos	xtext.h	/^	int last_pixel_pos;$/;"	m	struct:__anon31
last_selected_page	setup.c	/^static int last_selected_page = 0;$/;"	v	file:
last_selected_row	setup.c	/^static int last_selected_row = 0; \/* sound row *\/$/;"	v	file:
last_win_h	xtext.h	/^	int last_win_h;$/;"	m	struct:_GtkXText
last_win_w	xtext.h	/^	int last_win_w;$/;"	m	struct:_GtkXText
last_win_x	xtext.h	/^	int last_win_x;$/;"	m	struct:_GtkXText
last_win_y	xtext.h	/^	int last_win_y;$/;"	m	struct:_GtkXText
layout	xtext.h	/^	PangoLayout *layout;$/;"	m	struct:_GtkXText
left_len	xtext.c	/^	gint16 left_len;$/;"	m	struct:textentry	file:
len	xtext.c	/^	guint16 len;$/;"	m	struct:offlen_s	file:
len1	xtext.c	/^	int off1, len1, emph;$/;"	m	struct:chunk_s	file:
len_to_offset	fkeys.c	/^len_to_offset (const char *str, glong len)$/;"	f	file:
letter	banlist.h	/^	char letter;	\/* \/mode-command letter, e.g. 'b' for MODE_BAN *\/$/;"	m	struct:mode_info_s
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
light_gc	xtext.h	/^	GdkGC *light_gc;				  \/* sep bar *\/$/;"	m	struct:_GtkXText
limit_entry	fe-gtk.h	/^		*limit_entry,		  \/* +l *\/$/;"	m	struct:session_gui
limit_text	fe-gtk.h	/^	char *limit_text;$/;"	m	struct:restore_gui
line_ct	banlist.h	/^	int line_ct;	\/* count of presented lines *\/$/;"	m	struct:banlist_info_s
line_select	xtext.h	/^	unsigned int line_select:1;$/;"	m	struct:_GtkXText
list	dccgui.c	/^	GtkWidget *list;$/;"	m	struct:dccwindow	file:
list	setup.c	/^	char const *const *list;$/;"	m	struct:__anon23	file:
load_pixmap	pixmaps.c	/^load_pixmap (const char *filename)$/;"	f	file:
localedir	Makefile	/^localedir = $(datadir)\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
log_handler	fe-gtk.c	/^log_handler (const gchar   *log_domain,$/;"	f	file:
logging_settings	setup.c	/^static const setting logging_settings[] =$/;"	v	file:
login_types	servlistgui.c	/^static const char *login_types[]=$/;"	v	file:
login_types_conf	servlistgui.c	/^static int login_types_conf[] =$/;"	v	file:
main_table	fe-gtk.h	/^		*main_table,$/;"	m	struct:session_gui
make_sbutton	chanview-tabs.c	/^make_sbutton (GtkArrowType type, void *click_cb, void *userdata)$/;"	f	file:
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mark_character	sexy-spell-entry.c	/^	gint                  mark_character;$/;"	m	struct:_SexySpellEntryPriv	file:
mark_end	xtext.c	/^	gint16 mark_end;$/;"	m	struct:textentry	file:
mark_stamp	xtext.h	/^	unsigned int mark_stamp:1;	\/* Cut&Paste with stamps? *\/$/;"	m	struct:_GtkXText
mark_start	xtext.c	/^	gint16 mark_start;$/;"	m	struct:textentry	file:
marker	xtext.h	/^	unsigned int marker:1;$/;"	m	struct:_GtkXText
marker_gc	xtext.h	/^	GdkGC *marker_gc;$/;"	m	struct:_GtkXText
marker_pos	xtext.h	/^	textentry *marker_pos;$/;"	m	struct:__anon31
marker_reset_reason	xtext.h	/^} marker_reset_reason;$/;"	t	typeref:enum:marker_reset_reason_e
marker_reset_reason_e	xtext.h	/^typedef enum marker_reset_reason_e {$/;"	g
marker_seen	xtext.h	/^	unsigned int marker_seen:1;$/;"	m	struct:__anon31
marker_state	xtext.h	/^	marker_reset_reason marker_state;$/;"	m	struct:__anon31
marks	xtext.c	/^	GList *marks;	\/* List of found strings *\/$/;"	m	struct:textentry	file:
mask_edited	ignoregui.c	/^mask_edited (GtkCellRendererText *render, gchar *path, gchar *new, gpointer dat)$/;"	f	file:
max_auto_indent	xtext.h	/^	int max_auto_indent;$/;"	m	struct:_GtkXText
max_lines	xtext.h	/^	int max_lines;$/;"	m	struct:_GtkXText
maxcps	dccgui.c	/^	gint64 maxcps;$/;"	m	struct:my_dcc_send	file:
menu	fe-gtk.h	/^		*menu,$/;"	m	struct:session_gui
menu_about	menu.c	/^menu_about (GtkWidget *wid, gpointer sess)$/;"	f	file:
menu_add_cb	menu.c	/^menu_add_cb (GtkWidget *menu, menu_entry *me, char *target)$/;"	f	file:
menu_add_item	menu.c	/^menu_add_item (GtkWidget *menu, menu_entry *me, char *target)$/;"	f	file:
menu_add_plugin_items	menu.c	/^menu_add_plugin_items (GtkWidget *menu, char *root, char *target)$/;"	f
menu_add_plugin_mainmenu_items	menu.c	/^menu_add_plugin_mainmenu_items (GtkWidget *menu)$/;"	f	file:
menu_add_radio	menu.c	/^menu_add_radio (GtkWidget *menu, menu_entry *me)$/;"	f	file:
menu_add_sub	menu.c	/^menu_add_sub (GtkWidget *menu, menu_entry *me)$/;"	f	file:
menu_add_toggle	menu.c	/^menu_add_toggle (GtkWidget *menu, menu_entry *me)$/;"	f	file:
menu_addautoconn_cb	menu.c	/^menu_addautoconn_cb (GtkWidget *item, server *serv)$/;"	f	file:
menu_addconnectmenu	menu.c	/^menu_addconnectmenu (server *serv, GtkWidget *menu)$/;"	f
menu_addfav_cb	menu.c	/^menu_addfav_cb (GtkWidget *item, server *serv)$/;"	f	file:
menu_addfavoritemenu	menu.c	/^menu_addfavoritemenu (server *serv, GtkWidget *menu, char *channel, gboolean istree)$/;"	f
menu_apply_metres_cb	menu.c	/^menu_apply_metres_cb (session *sess)$/;"	f	file:
menu_away	menu.c	/^menu_away (GtkCheckMenuItem *item, gpointer none)$/;"	f	file:
menu_banlist	menu.c	/^menu_banlist (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_bar_toggle	menu.c	/^menu_bar_toggle (void)$/;"	f
menu_bar_toggle_cb	menu.c	/^menu_bar_toggle_cb (void)$/;"	f	file:
menu_canacaccel	menu.c	/^menu_canacaccel (GtkWidget *widget, guint signal_id, gpointer user_data)$/;"	f	file:
menu_chan_cycle	menu.c	/^menu_chan_cycle (GtkWidget * menu, char *chan)$/;"	f	file:
menu_chan_join	menu.c	/^menu_chan_join (GtkWidget * menu, char *chan)$/;"	f	file:
menu_chan_part	menu.c	/^menu_chan_part (GtkWidget * menu, char *chan)$/;"	f	file:
menu_change_layout	menu.c	/^menu_change_layout (void)$/;"	f
menu_chanlist	menu.c	/^menu_chanlist (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_chanmenu	menu.c	/^menu_chanmenu (struct session *sess, GdkEventButton * event, char *chan)$/;"	f
menu_close	menu.c	/^menu_close (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_cmbuttons_showhide_cb	menu.c	/^menu_cmbuttons_showhide_cb (session *sess)$/;"	f	file:
menu_cmbuttons_toggle	menu.c	/^menu_cmbuttons_toggle (GtkWidget *wid, gpointer ud)$/;"	f	file:
menu_copy_selection	menu.c	/^menu_copy_selection (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_create	menu.c	/^menu_create (GtkWidget *menu, GSList *list, char *target, int check_path)$/;"	f
menu_create_main	menu.c	/^menu_create_main (void *accel_group, int bar, int away, int toplevel,$/;"	f
menu_create_nickinfo_menu	menu.c	/^menu_create_nickinfo_menu (struct User *user, GtkWidget *submenu)$/;"	f	file:
menu_ctcpguiopen	menu.c	/^menu_ctcpguiopen (void)$/;"	f	file:
menu_dcc_chat_win	menu.c	/^menu_dcc_chat_win (GtkWidget *wid, gpointer none)$/;"	f	file:
menu_dcc_win	menu.c	/^menu_dcc_win (GtkWidget *wid, gpointer none)$/;"	f	file:
menu_del_cb	menu.c	/^menu_del_cb (GtkWidget *menu, menu_entry *me, char *target)$/;"	f	file:
menu_delautoconn_cb	menu.c	/^menu_delautoconn_cb (GtkWidget *item, server *serv)$/;"	f	file:
menu_delfav_cb	menu.c	/^menu_delfav_cb (GtkWidget *item, server *serv)$/;"	f	file:
menu_destroy	menu.c	/^menu_destroy (GtkWidget *menu, gpointer objtounref)$/;"	f	file:
menu_detach	menu.c	/^menu_detach (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_disconnect	menu.c	/^menu_disconnect (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_dlgbuttons	menu.c	/^menu_dlgbuttons (void)$/;"	f	file:
menu_docs	menu.c	/^menu_docs (GtkWidget *wid, gpointer none)$/;"	f	file:
menu_evtpopup	menu.c	/^menu_evtpopup (void)$/;"	f	file:
menu_extract_icon	menu.c	/^menu_extract_icon (char *name, char **label, char **icon)$/;"	f	file:
menu_find	menu.c	/^menu_find (GtkWidget *menu, char *path, char *label)$/;"	f	file:
menu_find_item	menu.c	/^menu_find_item (GtkWidget *menu, char *name)$/;"	f	file:
menu_find_path	menu.c	/^menu_find_path (GtkWidget *menu, char *path)$/;"	f	file:
menu_flushbuffer	menu.c	/^menu_flushbuffer (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_foreach_gui	menu.c	/^menu_foreach_gui (menu_entry *me, void (*callback) (GtkWidget *, menu_entry *, char *))$/;"	f	file:
menu_fullscreen_toggle	menu.c	/^menu_fullscreen_toggle (GtkWidget *wid, gpointer ud)$/;"	f	file:
menu_item	fe-gtk.h	/^	GtkWidget *menu_item[MENU_ID_NUM+1]; \/* some items we may change state of *\/$/;"	m	struct:session_gui
menu_join	menu.c	/^menu_join (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_join_cb	menu.c	/^menu_join_cb (GtkWidget *dialog, gint response, GtkEntry *entry)$/;"	f	file:
menu_join_entry_cb	menu.c	/^menu_join_entry_cb (GtkWidget *entry, GtkDialog *dialog)$/;"	f	file:
menu_keypopup	menu.c	/^menu_keypopup (void)$/;"	f	file:
menu_layout_cb	menu.c	/^menu_layout_cb (GtkWidget *item, gpointer none)$/;"	f	file:
menu_loadplugin	menu.c	/^menu_loadplugin (void)$/;"	f	file:
menu_loadplugin	menu.c	1464;"	d	file:
menu_metres_both	menu.c	/^menu_metres_both (GtkWidget *item, gpointer none)$/;"	f	file:
menu_metres_graph	menu.c	/^menu_metres_graph (GtkWidget *item, gpointer none)$/;"	f	file:
menu_metres_off	menu.c	/^menu_metres_off (GtkWidget *item, gpointer none)$/;"	f	file:
menu_metres_text	menu.c	/^menu_metres_text (GtkWidget *item, gpointer none)$/;"	f	file:
menu_middlemenu	menu.c	/^menu_middlemenu (session *sess, GdkEventButton *event)$/;"	f
menu_movetomarker	menu.c	/^menu_movetomarker (GtkWidget *wid, gpointer none)$/;"	f	file:
menu_newchannel_tab	menu.c	/^menu_newchannel_tab (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_newchannel_window	menu.c	/^menu_newchannel_window (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_newserver_tab	menu.c	/^menu_newserver_tab (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_newserver_window	menu.c	/^menu_newserver_window (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_nickinfo_cb	menu.c	/^menu_nickinfo_cb (GtkWidget *menu, session *sess)$/;"	f	file:
menu_nickmenu	menu.c	/^menu_nickmenu (session *sess, GdkEventButton *event, char *nick, int num_sel)$/;"	f
menu_noplugin_info	menu.c	/^menu_noplugin_info (void)$/;"	f	file:
menu_open_server_list	menu.c	/^menu_open_server_list (GtkWidget *wid, gpointer none)$/;"	f	file:
menu_pluginlist	menu.c	/^menu_pluginlist (void)$/;"	f	file:
menu_pluginlist	menu.c	1465;"	d	file:
menu_popup	menu.c	/^menu_popup (GtkWidget *menu, GdkEventButton *event, gpointer objtounref)$/;"	f	file:
menu_quick_endsub	menu.c	/^menu_quick_endsub ()$/;"	f	file:
menu_quick_item	menu.c	/^menu_quick_item (char *cmd, char *label, GtkWidget * menu, int flags,$/;"	f
menu_quick_item_with_callback	menu.c	/^menu_quick_item_with_callback (void *callback, char *label, GtkWidget * menu,$/;"	f	file:
menu_quick_sub	menu.c	/^menu_quick_sub (char *name, GtkWidget *menu, GtkWidget **sub_item_ret, int flags, int pos)$/;"	f
menu_quit	menu.c	/^menu_quit (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_radio_cb	menu.c	/^menu_radio_cb (GtkCheckMenuItem *item, menu_entry *me)$/;"	f	file:
menu_radio_item	menu.c	/^menu_radio_item (char *label, GtkWidget *menu, void *callback, void *userdata,$/;"	f	file:
menu_rawlog	menu.c	/^menu_rawlog (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_reconnect	menu.c	/^menu_reconnect (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_reorder	menu.c	/^menu_reorder (GtkMenu *menu, GtkWidget *item, int pos)$/;"	f	file:
menu_resetmarker	menu.c	/^menu_resetmarker (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_rpopup	menu.c	/^menu_rpopup (void)$/;"	f	file:
menu_savebuffer	menu.c	/^menu_savebuffer (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_search	menu.c	/^menu_search ()$/;"	f	file:
menu_search_next	menu.c	/^menu_search_next (GtkWidget *wid)$/;"	f	file:
menu_search_prev	menu.c	/^menu_search_prev (GtkWidget *wid)$/;"	f	file:
menu_set_away	menu.c	/^menu_set_away (session_gui *gui, int away)$/;"	f
menu_set_fullscreen	menu.c	/^menu_set_fullscreen (session_gui *gui, int full)$/;"	f
menu_setting_foreach	menu.c	/^menu_setting_foreach (void (*callback) (session *), int id, guint state)$/;"	f	file:
menu_settings	menu.c	/^menu_settings (GtkWidget * wid, gpointer none)$/;"	f	file:
menu_showhide_cb	menu.c	/^menu_showhide_cb (session *sess)$/;"	f	file:
menu_toggle_cb	menu.c	/^menu_toggle_cb (GtkCheckMenuItem *item, menu_entry *me)$/;"	f	file:
menu_toggle_item	menu.c	/^menu_toggle_item (char *label, GtkWidget *menu, void *callback, void *userdata,$/;"	f
menu_topic_showhide_cb	menu.c	/^menu_topic_showhide_cb (session *sess)$/;"	f	file:
menu_topicbar_toggle	menu.c	/^menu_topicbar_toggle (GtkWidget *wid, gpointer ud)$/;"	f	file:
menu_ulbuttons	menu.c	/^menu_ulbuttons (void)$/;"	f	file:
menu_ulbuttons_showhide_cb	menu.c	/^menu_ulbuttons_showhide_cb (session *sess)$/;"	f	file:
menu_ulbuttons_toggle	menu.c	/^menu_ulbuttons_toggle (GtkWidget *wid, gpointer ud)$/;"	f	file:
menu_ulpopup	menu.c	/^menu_ulpopup (void)$/;"	f	file:
menu_update_cb	menu.c	/^menu_update_cb (GtkWidget *menu, menu_entry *me, char *target)$/;"	f	file:
menu_urlhandlers	menu.c	/^menu_urlhandlers (void)$/;"	f	file:
menu_urlmenu	menu.c	/^menu_urlmenu (GdkEventButton *event, char *url)$/;"	f
menu_usercommands	menu.c	/^menu_usercommands (void)$/;"	f	file:
menu_userlist_showhide_cb	menu.c	/^menu_userlist_showhide_cb (session *sess)$/;"	f	file:
menu_userlist_toggle	menu.c	/^menu_userlist_toggle (GtkWidget *wid, gpointer ud)$/;"	f	file:
menu_usermenu	menu.c	/^menu_usermenu (void)$/;"	f	file:
meta	xtext.c	/^	offlen_t meta;$/;"	m	struct:chunk_s	file:
meter_box	fe-gtk.h	/^		*meter_box,	\/* all the meters inside this *\/$/;"	m	struct:session_gui
mg_add_chan	maingui.c	/^mg_add_chan (session *sess)$/;"	f	file:
mg_add_generic_tab	maingui.c	/^mg_add_generic_tab (char *name, char *title, void *family, GtkWidget *box)$/;"	f	file:
mg_add_pane_signals	maingui.c	/^mg_add_pane_signals (session_gui *gui)$/;"	f	file:
mg_apply_entry_style	maingui.c	/^mg_apply_entry_style (GtkWidget *entry)$/;"	f	file:
mg_apply_setup	maingui.c	/^mg_apply_setup (void)$/;"	f
mg_attr_list_create	maingui.c	/^mg_attr_list_create (GdkColor *col, int size)$/;"	f	file:
mg_bring_tofront	maingui.c	/^mg_bring_tofront (GtkWidget *vbox)	\/* non-IRC tab or window *\/$/;"	f
mg_bring_tofront_sess	maingui.c	/^mg_bring_tofront_sess (session *sess)	\/* IRC tab or window *\/$/;"	f
mg_chan_remove	maingui.c	/^mg_chan_remove (chan *ch)$/;"	f	file:
mg_change_flag	maingui.c	/^mg_change_flag (GtkWidget * wid, session *sess, char flag)$/;"	f	file:
mg_change_layout	maingui.c	/^mg_change_layout (int type)$/;"	f
mg_change_nick	maingui.c	/^mg_change_nick (int cancel, char *text, gpointer userdata)$/;"	f	file:
mg_changui_destroy	maingui.c	/^mg_changui_destroy (session *sess)$/;"	f	file:
mg_changui_new	maingui.c	/^mg_changui_new (session *sess, restore_gui *res, int tab, int focus)$/;"	f
mg_close_gen	maingui.c	/^mg_close_gen (chan *ch, GtkWidget *box)$/;"	f	file:
mg_close_sess	maingui.c	/^mg_close_sess (session *sess)$/;"	f
mg_color_insert	maingui.c	/^mg_color_insert (GtkWidget *item, gpointer userdata)$/;"	f	file:
mg_configure_cb	maingui.c	/^mg_configure_cb (GtkWidget *wid, GdkEventConfigure *event, session *sess)$/;"	f	file:
mg_count_dccs	maingui.c	/^mg_count_dccs (void)$/;"	f	file:
mg_count_networks	maingui.c	/^mg_count_networks (void)$/;"	f	file:
mg_create_alertmenu	maingui.c	/^mg_create_alertmenu (session *sess, GtkWidget *menu)$/;"	f	file:
mg_create_center	maingui.c	/^mg_create_center (session *sess, session_gui *gui, GtkWidget *box)$/;"	f	file:
mg_create_chanmodebuttons	maingui.c	/^mg_create_chanmodebuttons (session_gui *gui, GtkWidget *box)$/;"	f	file:
mg_create_color_menu	maingui.c	/^mg_create_color_menu (GtkWidget *menu, session *sess)$/;"	f	file:
mg_create_dialogbuttons	maingui.c	/^mg_create_dialogbuttons (GtkWidget *box)$/;"	f	file:
mg_create_entry	maingui.c	/^mg_create_entry (session *sess, GtkWidget *box)$/;"	f	file:
mg_create_flagbutton	maingui.c	/^mg_create_flagbutton (char *tip, GtkWidget *box, char *face)$/;"	f	file:
mg_create_generic_tab	maingui.c	/^mg_create_generic_tab (char *name, char *title, int force_toplevel,$/;"	f
mg_create_icon_item	maingui.c	/^mg_create_icon_item (char *label, char *stock, GtkWidget *menu,$/;"	f
mg_create_infoframe	maingui.c	/^mg_create_infoframe (GtkWidget *box)$/;"	f	file:
mg_create_irctab	maingui.c	/^mg_create_irctab (session *sess, GtkWidget *table)$/;"	f	file:
mg_create_menu	maingui.c	/^mg_create_menu (session_gui *gui, GtkWidget *table, int away_state)$/;"	f	file:
mg_create_meters	maingui.c	/^mg_create_meters (session_gui *gui, GtkWidget *parent_box)$/;"	f	file:
mg_create_perchannelmenu	maingui.c	/^mg_create_perchannelmenu (session *sess, GtkWidget *menu)$/;"	f	file:
mg_create_search	maingui.c	/^mg_create_search(session *sess, GtkWidget *box)$/;"	f	file:
mg_create_tab_colors	maingui.c	/^mg_create_tab_colors (void)$/;"	f	file:
mg_create_tabmenu	maingui.c	/^mg_create_tabmenu (session *sess, GdkEventButton *event, chan *ch)$/;"	f	file:
mg_create_tabs	maingui.c	/^mg_create_tabs (session_gui *gui)$/;"	f	file:
mg_create_tabwindow	maingui.c	/^mg_create_tabwindow (session *sess)$/;"	f	file:
mg_create_textarea	maingui.c	/^mg_create_textarea (session *sess, GtkWidget *box)$/;"	f	file:
mg_create_topicbar	maingui.c	/^mg_create_topicbar (session *sess, GtkWidget *box)$/;"	f	file:
mg_create_topwindow	maingui.c	/^mg_create_topwindow (session *sess)$/;"	f	file:
mg_create_userlist	maingui.c	/^mg_create_userlist (session_gui *gui, GtkWidget *box)$/;"	f	file:
mg_create_userlistbuttons	maingui.c	/^mg_create_userlistbuttons (GtkWidget *box)$/;"	f	file:
mg_decide_userlist	maingui.c	/^mg_decide_userlist (session *sess, gboolean switch_to_current)$/;"	f
mg_destroy_tab_cb	maingui.c	/^mg_destroy_tab_cb (GtkWidget *item, chan *ch)$/;"	f	file:
mg_detach	maingui.c	/^mg_detach (session *sess, int mode)$/;"	f
mg_detach_tab_cb	maingui.c	/^mg_detach_tab_cb (GtkWidget *item, chan *ch)$/;"	f	file:
mg_dialog_button	maingui.c	/^mg_dialog_button (GtkWidget *box, char *name, char *cmd)$/;"	f	file:
mg_dialog_button_cb	maingui.c	/^mg_dialog_button_cb (GtkWidget *wid, char *cmd)$/;"	f	file:
mg_dialog_dnd_drop	maingui.c	/^mg_dialog_dnd_drop (GtkWidget * widget, GdkDragContext * context, gint x,$/;"	f	file:
mg_dnd_drop_file	maingui.c	/^mg_dnd_drop_file (session *sess, char *target, char *uri)$/;"	f
mg_drag_begin_cb	maingui.c	/^mg_drag_begin_cb (GtkWidget *widget, GdkDragContext *context, gpointer userdata)$/;"	f
mg_drag_drop_cb	maingui.c	/^mg_drag_drop_cb (GtkWidget *widget, GdkDragContext *context, int x, int y, guint time, gpointer user_data)$/;"	f
mg_drag_end_cb	maingui.c	/^mg_drag_end_cb (GtkWidget *widget, GdkDragContext *context, gpointer userdata)$/;"	f
mg_drag_motion_cb	maingui.c	/^mg_drag_motion_cb (GtkWidget *widget, GdkDragContext *context, int x, int y, guint time, gpointer scbar)$/;"	f
mg_flagbutton_cb	maingui.c	/^mg_flagbutton_cb (GtkWidget *but, char *flag)$/;"	f	file:
mg_focus	maingui.c	/^mg_focus (session *sess)$/;"	f	file:
mg_gui	maingui.c	/^static session_gui *mg_gui = NULL;	\/* the shared irc tab *\/$/;"	v	file:
mg_handle_drop	maingui.c	/^mg_handle_drop (GtkWidget *widget, int y, int *pos, int *other_pos)$/;"	f	file:
mg_hide_empty_boxes	maingui.c	/^mg_hide_empty_boxes (session_gui *gui)$/;"	f	file:
mg_hide_empty_pane	maingui.c	/^mg_hide_empty_pane (GtkPaned *pane)$/;"	f	file:
mg_inputbox_cb	maingui.c	/^mg_inputbox_cb (GtkWidget *igad, session_gui *gui)$/;"	f
mg_inputbox_focus	maingui.c	/^mg_inputbox_focus (GtkWidget *widget, GdkEventFocus *event, session_gui *gui)$/;"	f	file:
mg_inputbox_rightclick	maingui.c	/^mg_inputbox_rightclick (GtkEntry *entry, GtkWidget *menu)$/;"	f	file:
mg_ircdestroy	maingui.c	/^mg_ircdestroy (session *sess)$/;"	f	file:
mg_is_gui_target	maingui.c	/^mg_is_gui_target (GdkDragContext *context)$/;"	f	file:
mg_is_userlist_and_tree_combined	maingui.c	/^mg_is_userlist_and_tree_combined (void)$/;"	f	file:
mg_key_entry_cb	maingui.c	/^mg_key_entry_cb (GtkWidget * igad, gpointer userdata)$/;"	f	file:
mg_leftpane_cb	maingui.c	/^mg_leftpane_cb (GtkPaned *pane, GParamSpec *param, session_gui *gui)$/;"	f	file:
mg_limit_entry_cb	maingui.c	/^mg_limit_entry_cb (GtkWidget * igad, gpointer userdata)$/;"	f	file:
mg_link_gentab	maingui.c	/^mg_link_gentab (chan *ch, GtkWidget *box)$/;"	f	file:
mg_link_irctab	maingui.c	/^mg_link_irctab (session *sess, int focus)$/;"	f	file:
mg_markup_item	maingui.c	/^mg_markup_item (GtkWidget *menu, char *text, int arg)$/;"	f	file:
mg_menu_destroy	maingui.c	/^mg_menu_destroy (GtkWidget *menu, gpointer userdata)$/;"	f	file:
mg_move_tab	maingui.c	/^mg_move_tab (session *sess, int delta)$/;"	f
mg_move_tab_family	maingui.c	/^mg_move_tab_family (session *sess, int delta)$/;"	f
mg_nickclick_cb	maingui.c	/^mg_nickclick_cb (GtkWidget *button, gpointer userdata)$/;"	f	file:
mg_open_quit_dialog	maingui.c	/^mg_open_quit_dialog (gboolean minimize_button)$/;"	f
mg_perchan_menu_item	maingui.c	/^mg_perchan_menu_item (char *label, GtkWidget *menu, guint8 *setting, guint global)$/;"	f	file:
mg_place_userlist_and_chanview	maingui.c	/^mg_place_userlist_and_chanview (session_gui *gui)$/;"	f	file:
mg_place_userlist_and_chanview_real	maingui.c	/^mg_place_userlist_and_chanview_real (session_gui *gui, GtkWidget *userlist, GtkWidget *chanview)$/;"	f	file:
mg_populate	maingui.c	/^mg_populate (session *sess)$/;"	f	file:
mg_populate_userlist	maingui.c	/^mg_populate_userlist (session *sess)$/;"	f	file:
mg_progressbar_create	maingui.c	/^mg_progressbar_create (session_gui *gui)$/;"	f
mg_progressbar_destroy	maingui.c	/^mg_progressbar_destroy (session_gui *gui)$/;"	f
mg_progressbar_update	maingui.c	/^mg_progressbar_update (GtkWidget *bar)$/;"	f	file:
mg_restore_entry	maingui.c	/^mg_restore_entry (GtkWidget *entry, char **text)$/;"	f	file:
mg_restore_label	maingui.c	/^mg_restore_label (GtkWidget *label, char **text)$/;"	f	file:
mg_restore_speller	maingui.c	/^mg_restore_speller (GtkWidget *entry, char **text)$/;"	f	file:
mg_rightpane_cb	maingui.c	/^mg_rightpane_cb (GtkPaned *pane, GParamSpec *param, session_gui *gui)$/;"	f	file:
mg_sanitize_positions	maingui.c	/^mg_sanitize_positions (int *cv, int *ul)$/;"	f	file:
mg_search_handle_next	maingui.c	/^mg_search_handle_next(GtkWidget *wid, session *sess)$/;"	f
mg_search_handle_previous	maingui.c	/^mg_search_handle_previous(GtkWidget *wid, session *sess)$/;"	f
mg_search_toggle	maingui.c	/^mg_search_toggle(session *sess)$/;"	f
mg_set_access_icon	maingui.c	/^mg_set_access_icon (session_gui *gui, GdkPixbuf *pix, gboolean away)$/;"	f
mg_set_guint8	maingui.c	/^mg_set_guint8 (GtkCheckMenuItem *item, guint8 *setting)$/;"	f	file:
mg_set_myself_away	maingui.c	/^mg_set_myself_away (session_gui *gui, gboolean away)$/;"	f	file:
mg_set_title	maingui.c	/^mg_set_title (GtkWidget *vbox, char *title) \/* for non-irc tab\/window only *\/$/;"	f
mg_set_topic_tip	maingui.c	/^mg_set_topic_tip (session *sess)$/;"	f
mg_show_generic_tab	maingui.c	/^mg_show_generic_tab (GtkWidget *box)$/;"	f	file:
mg_spellcheck_cb	maingui.c	/^mg_spellcheck_cb (SexySpellEntry *entry, gchar *word, gpointer data)$/;"	f	file:
mg_submenu	maingui.c	/^mg_submenu (GtkWidget *menu, char *text)$/;"	f
mg_switch_page	maingui.c	/^mg_switch_page (int relative, int num)$/;"	f
mg_switch_tab_cb	maingui.c	/^mg_switch_tab_cb (chanview *cv, chan *ch, int tag, gpointer ud)$/;"	f	file:
mg_tab_close	maingui.c	/^mg_tab_close (session *sess)$/;"	f
mg_tab_close_cb	maingui.c	/^mg_tab_close_cb (GtkWidget *dialog, gint arg1, session *sess)$/;"	f	file:
mg_tab_contextmenu_cb	maingui.c	/^mg_tab_contextmenu_cb (chanview *cv, chan *ch, int tag, gpointer ud, GdkEventButton *event)$/;"	f	file:
mg_tabs_compare	maingui.c	/^mg_tabs_compare (session *a, session *b)$/;"	f	file:
mg_tabwin_focus_cb	maingui.c	/^mg_tabwin_focus_cb (GtkWindow * win, GdkEventFocus *event, gpointer userdata)$/;"	f	file:
mg_tabwindow_de_cb	maingui.c	/^mg_tabwindow_de_cb (GtkWidget *widget, GdkEvent *event, gpointer user_data)$/;"	f	file:
mg_tabwindow_kill_cb	maingui.c	/^mg_tabwindow_kill_cb (GtkWidget *win, gpointer userdata)$/;"	f	file:
mg_topdestroy_cb	maingui.c	/^mg_topdestroy_cb (GtkWidget *win, session *sess)$/;"	f	file:
mg_topic_cb	maingui.c	/^mg_topic_cb (GtkWidget *entry, gpointer userdata)$/;"	f	file:
mg_topwin_focus_cb	maingui.c	/^mg_topwin_focus_cb (GtkWindow * win, GdkEventFocus *event, session *sess)$/;"	f	file:
mg_unpopulate	maingui.c	/^mg_unpopulate (session *sess)$/;"	f	file:
mg_update_meters	maingui.c	/^mg_update_meters (session_gui *gui)$/;"	f
mg_update_xtext	maingui.c	/^mg_update_xtext (GtkWidget *wid)$/;"	f
mg_userlist_button	maingui.c	/^mg_userlist_button (GtkWidget * box, char *label, char *cmd,$/;"	f	file:
mg_userlist_showhide	maingui.c	/^mg_userlist_showhide (session *sess, int show)$/;"	f	file:
mg_userlist_toggle_cb	maingui.c	/^mg_userlist_toggle_cb (GtkWidget *button, gpointer userdata)$/;"	f	file:
mg_vpane_cb	maingui.c	/^mg_vpane_cb (GtkPaned *pane, GParamSpec *param, session_gui *gui)$/;"	f	file:
mg_windowstate_cb	maingui.c	/^mg_windowstate_cb (GtkWindow *wid, GdkEventWindowState *event, gpointer userdata)$/;"	f	file:
mg_word_check	maingui.c	/^mg_word_check (GtkWidget * xtext, char *word)$/;"	f	file:
mg_word_clicked	maingui.c	/^mg_word_clicked (GtkWidget *xtext, char *word, GdkEventButton *even)$/;"	f	file:
mg_xbutton_cb	maingui.c	/^mg_xbutton_cb (chanview *cv, chan *ch, int tag, gpointer userdata)$/;"	f	file:
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mod	fkeys.c	/^	GdkModifierType mod;			  \/* Modifier, always ran through key_modifier_get_valid() *\/$/;"	m	struct:key_binding	file:
mode_info	banlist.h	/^} mode_info;$/;"	t	typeref:struct:mode_info_s
mode_info_s	banlist.h	/^typedef struct mode_info_s {$/;"	s
model_foreach_1	chanview.c	/^model_foreach_1 (GtkTreeModel *model, void (*func)(void *, GtkTreeIter *),$/;"	f	file:
modes	banlist.c	/^static mode_info modes[MODE_CT] = {$/;"	v	file:
move_row	chanview-tree.c	/^move_row (chan *ch, int delta, GtkTreeIter *parent)$/;"	f	file:
moving_separator	xtext.h	/^	unsigned int moving_separator:1;$/;"	m	struct:_GtkXText
my_dcc_send	dccgui.c	/^struct my_dcc_send$/;"	s	file:
mymenu	menu.c	/^static struct mymenu mymenu[] = {$/;"	v	typeref:struct:mymenu	file:
mymenu	menu.c	/^struct mymenu$/;"	s	file:
n_columns	custom-list.h	/^	gint n_columns;$/;"	m	struct:_CustomList
name	banlist.h	/^	char *name;		\/* Checkbox name, e.g. "Bans" *\/$/;"	m	struct:mode_info_s
name	fkeys.c	/^	char *name;$/;"	m	struct:key_action	file:
namelistinfo	fe-gtk.h	/^		*namelistinfo,	\/* label above userlist *\/$/;"	m	struct:session_gui
nc	xtext.h	/^	int nc;							  \/* offset into xtext->num *\/$/;"	m	struct:_GtkXText
needs_recalc	xtext.h	/^	unsigned int needs_recalc:1;$/;"	m	struct:__anon31
netedit_active_tab	servlistgui.c	/^static int netedit_active_tab = 0;$/;"	v	file:
netedit_win_height	servlistgui.c	/^static int netedit_win_height = 0;$/;"	v	file:
netedit_win_width	servlistgui.c	/^static int netedit_win_width = 0;$/;"	v	file:
netlist_win_height	servlistgui.c	/^static int netlist_win_height = 0;$/;"	v	file:
netlist_win_width	servlistgui.c	/^static int netlist_win_width = 0;		\/* don't hardcode pixels, just use as much as needed by default, save if resized *\/$/;"	v	file:
network_settings	setup.c	/^static const setting network_settings[] =$/;"	v	file:
networks_tree	servlistgui.c	/^static GtkWidget *networks_tree;		\/* network TreeView *\/$/;"	v	file:
newdata_list	maingui.c	/^static PangoAttrList *newdata_list;$/;"	v	file:
newmsg_list	maingui.c	/^static PangoAttrList *newmsg_list;$/;"	v	file:
next	xtext.c	/^	struct textentry *next;$/;"	m	struct:textentry	typeref:struct:textentry::textentry	file:
nick	dccgui.c	/^	char *nick;$/;"	m	struct:my_dcc_send	file:
nick_box	fe-gtk.h	/^		*nick_box,		\/* contains label to the left of input_box *\/$/;"	m	struct:session_gui
nick_command	menu.c	/^nick_command (session * sess, char *cmd)$/;"	f	file:
nick_command_parse	menu.c	/^nick_command_parse (session *sess, char *cmd, char *nick, char *allnick)$/;"	f
nick_label	fe-gtk.h	/^		*nick_label,$/;"	m	struct:session_gui
nick_submenu	menu.c	/^static GtkWidget *nick_submenu = NULL;	\/* user info submenu *\/$/;"	v	file:
nickseen_list	maingui.c	/^static PangoAttrList *nickseen_list;$/;"	v	file:
no_servlist	servlistgui.c	/^no_servlist (GtkWidget * igad, gpointer serv)$/;"	f	file:
note_book	fe-gtk.h	/^		*note_book,$/;"	m	struct:session_gui
noticeposmenu	setup.c	/^static const char *const noticeposmenu[] =$/;"	v	file:
notification_plugin_deinit	plugin-notification.c	/^notification_plugin_deinit (void)$/;"	f
notification_plugin_init	plugin-notification.c	/^notification_plugin_init (hexchat_plugin *plugin_handle, char **plugin_name, char **plugin_desc, char **plugin_version, char *arg)$/;"	f
notify_add_clicked	notifygui.c	/^notify_add_clicked (GtkWidget * igad)$/;"	f	file:
notify_button_opendialog	notifygui.c	/^static GtkWidget *notify_button_opendialog;$/;"	v	file:
notify_button_remove	notifygui.c	/^static GtkWidget *notify_button_remove;$/;"	v	file:
notify_c	Makefile	/^notify_c = notifications\/notification-libnotify.c$/;"	m
notify_closegui	notifygui.c	/^notify_closegui (void)$/;"	f	file:
notify_gui_update	notifygui.c	/^notify_gui_update (void)$/;"	f
notify_opendialog_clicked	notifygui.c	/^notify_opendialog_clicked (GtkWidget * igad)$/;"	f	file:
notify_opengui	notifygui.c	/^notify_opengui (void)$/;"	f
notify_remove_clicked	notifygui.c	/^notify_remove_clicked (GtkWidget * igad)$/;"	f	file:
notify_row_cb	notifygui.c	/^notify_row_cb (GtkTreeSelection *sel, GtkTreeView *view)$/;"	f	file:
notify_treecell_property_mapper	notifygui.c	/^notify_treecell_property_mapper (GtkTreeViewColumn *col, GtkCellRenderer *cell,$/;"	f	file:
notify_treeview_new	notifygui.c	/^notify_treeview_new (GtkWidget *box)$/;"	f	file:
notify_window	notifygui.c	/^static GtkWidget *notify_window = 0;$/;"	v	file:
notifygui_add_cb	notifygui.c	/^notifygui_add_cb (GtkDialog *dialog, gint response, gpointer entry)$/;"	f	file:
notifygui_add_enter	notifygui.c	/^notifygui_add_enter (GtkWidget *entry, GtkWidget *dialog)$/;"	f	file:
num	xtext.h	/^	char num[8];					  \/* for parsing mirc color *\/$/;"	m	struct:_GtkXText
num_alloc	custom-list.h	/^	guint num_alloc;    \/* number of rows allocated *\/$/;"	m	struct:_CustomList
num_chan	ignoregui.c	/^static GtkWidget *num_chan;$/;"	v	file:
num_ctcp	ignoregui.c	/^static GtkWidget *num_ctcp;$/;"	v	file:
num_invi	ignoregui.c	/^static GtkWidget *num_invi;$/;"	v	file:
num_lines	xtext.h	/^	int num_lines;$/;"	m	struct:__anon31
num_noti	ignoregui.c	/^static GtkWidget *num_noti;$/;"	v	file:
num_priv	ignoregui.c	/^static GtkWidget *num_priv;$/;"	v	file:
num_rows	custom-list.h	/^	guint num_rows;     \/* number of rows that we have used *\/$/;"	m	struct:_CustomList
o	xtext.h	/^	} o;$/;"	m	union:offsets_u	typeref:struct:offsets_u::offsets_s
off	xtext.c	/^	guint16 off;$/;"	m	struct:offlen_s	file:
off1	xtext.c	/^	int off1, len1, emph;$/;"	m	struct:chunk_s	file:
offlen_s	xtext.c	/^struct offlen_s {$/;"	s	file:
offlen_t	xtext.c	/^typedef struct offlen_s offlen_t;$/;"	t	typeref:struct:offlen_s	file:
offset	setup.c	/^	int offset;$/;"	m	struct:__anon23	file:
offset_to_len	fkeys.c	/^offset_to_len (const char *str, glong offset)$/;"	f	file:
offsets_s	xtext.h	/^	struct offsets_s {$/;"	s	union:offsets_u
offsets_t	xtext.h	/^} offsets_t;$/;"	t	typeref:union:offsets_u
offsets_u	xtext.h	/^typedef union offsets_u {$/;"	u
old_gcomp	fkeys.c	/^static struct gcomp_data old_gcomp;$/;"	v	typeref:struct:gcomp_data	file:
old_ul_value	fe-gtk.h	/^	gfloat old_ul_value;	\/* old userlist value (for adj) *\/$/;"	m	struct:restore_gui
old_value	xtext.h	/^	gfloat old_value;					\/* last known adj->value *\/$/;"	m	struct:__anon31
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
op_xpm	fe-gtk.h	/^		*op_xpm,			\/* icon to the left of nickname *\/$/;"	m	struct:session_gui
open_button	dccgui.c	/^	GtkWidget *open_button;$/;"	m	struct:dccwindow	file:
open_data_cb	setup.c	/^open_data_cb (GtkWidget *button, gpointer data)$/;"	f	file:
open_rawlog	rawlog.c	/^open_rawlog (struct server *serv)$/;"	f
open_url_cb	menu.c	/^open_url_cb (GtkWidget *item, char *url)$/;"	f	file:
option_toggled	ignoregui.c	/^option_toggled (GtkCellRendererToggle *render, gchar *path, gpointer data)$/;"	f	file:
orig_buffer	xtext.h	/^	xtext_buffer *orig_buffer;$/;"	m	struct:_GtkXText
osx_app	fe-gtk.c	/^GtkosxApplication *osx_app;$/;"	v
osx_show_uri	fe-gtk.c	/^osx_show_uri (const char *url)$/;"	f	file:
outer	chanview-tabs.c	/^	GtkWidget *outer;	\/* outer box *\/$/;"	m	struct:__anon4	file:
pad1	xtext.c	/^	guchar pad1;$/;"	m	struct:textentry	file:
pad2	xtext.c	/^	guchar pad2;	\/* 32-bit align : 44 bytes total *\/$/;"	m	struct:textentry	file:
pages	servlistgui.c	/^static const char *pages[]=$/;"	v	file:
pagetop_ent	xtext.h	/^	textentry *pagetop_ent;			\/* what's at xtext->adj->value *\/$/;"	m	struct:__anon31
pagetop_line	xtext.h	/^	int pagetop_line;$/;"	m	struct:__anon31
pagetop_subline	xtext.h	/^	int pagetop_subline;$/;"	m	struct:__anon31
palette	xtext.h	/^	GdkColor palette[XTEXT_COLS];$/;"	m	struct:_GtkXText
palette_alloc	palette.c	/^palette_alloc (GtkWidget * widget)$/;"	f
palette_load	palette.c	/^palette_load (void)$/;"	f
palette_save	palette.c	/^palette_save (void)$/;"	f
pane_left_size	fe-gtk.h	/^	int pane_left_size;	\/*last position of the pane*\/$/;"	m	struct:session_gui
pane_right_size	fe-gtk.h	/^	int pane_right_size;$/;"	m	struct:session_gui
pango_font	xtext.h	/^	} *font, pango_font;$/;"	m	struct:_GtkXText	typeref:struct:_GtkXText::pangofont
pangofont	xtext.h	/^	struct pangofont$/;"	s	struct:_GtkXText
parent	custom-list.h	/^	GObject parent;$/;"	m	struct:_CustomList
parent_class	custom-list.c	/^static GObjectClass *parent_class = NULL;	\/* GObject stuff - nothing to worry about *\/$/;"	v	file:
parent_class	custom-list.h	/^	GObjectClass parent_class;$/;"	m	struct:_CustomListClass
parent_class	sexy-spell-entry.c	/^static GtkEntryClass *parent_class = NULL;$/;"	v	file:
parent_class	sexy-spell-entry.h	/^	GtkEntryClass parent_class;$/;"	m	struct:_SexySpellEntryClass
parent_class	xtext.c	/^static GtkWidgetClass *parent_class = NULL;$/;"	v	file:
parent_class	xtext.h	/^	GtkWidgetClass parent_class;$/;"	m	struct:_GtkXTextClass
parent_object	sexy-spell-entry.h	/^	GtkEntry parent_object;$/;"	m	struct:_SexySpellEntry
parent_window	maingui.c	/^GtkWidget *parent_window = NULL;			\/* the master window *\/$/;"	v
parseattr	sexy-spell-entry.c	/^	gboolean              parseattr;$/;"	m	struct:_SexySpellEntryPriv	file:
parsing_backcolor	xtext.h	/^	unsigned int parsing_backcolor:1;$/;"	m	struct:_GtkXText
parsing_color	xtext.h	/^	unsigned int parsing_color:1;$/;"	m	struct:_GtkXText
passive	dccgui.c	/^	int passive;$/;"	m	struct:my_dcc_send	file:
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pending	banlist.h	/^	int pending;	\/* subset of checked *\/$/;"	m	struct:banlist_info_s
pevent_dialog	textgui.c	/^static GtkWidget *pevent_dialog = NULL, *pevent_dialog_twid,$/;"	v	file:
pevent_dialog_close	textgui.c	/^pevent_dialog_close (GtkWidget *wid, gpointer arg)$/;"	f	file:
pevent_dialog_fill	textgui.c	/^pevent_dialog_fill (GtkWidget *list)$/;"	f	file:
pevent_dialog_hfill	textgui.c	/^pevent_dialog_hfill (GtkWidget *list, int e)$/;"	f	file:
pevent_dialog_hlist	textgui.c	/^	*pevent_dialog_list, *pevent_dialog_hlist;$/;"	v	file:
pevent_dialog_list	textgui.c	/^	*pevent_dialog_list, *pevent_dialog_hlist;$/;"	v	file:
pevent_dialog_show	textgui.c	/^pevent_dialog_show ()$/;"	f
pevent_dialog_twid	textgui.c	/^static GtkWidget *pevent_dialog = NULL, *pevent_dialog_twid,$/;"	v	file:
pevent_edited	textgui.c	/^pevent_edited (GtkCellRendererText *render, gchar *pathstr, gchar *new_text, gpointer data)$/;"	f	file:
pevent_hlist_treeview_new	textgui.c	/^pevent_hlist_treeview_new (GtkWidget *box)$/;"	f	file:
pevent_load_cb	textgui.c	/^pevent_load_cb (GtkWidget * wid, void *data)$/;"	f	file:
pevent_load_req_cb	textgui.c	/^pevent_load_req_cb (void *arg1, char *file)$/;"	f	file:
pevent_ok_cb	textgui.c	/^pevent_ok_cb (GtkWidget * wid, void *data)$/;"	f	file:
pevent_save_cb	textgui.c	/^pevent_save_cb (GtkWidget * wid, void *data)$/;"	f	file:
pevent_save_req_cb	textgui.c	/^pevent_save_req_cb (void *arg1, char *file)$/;"	f	file:
pevent_selection_changed	textgui.c	/^pevent_selection_changed (GtkTreeSelection *sel, gpointer userdata)$/;"	f	file:
pevent_test_cb	textgui.c	/^pevent_test_cb (GtkWidget * wid, GtkWidget * twid)$/;"	f	file:
pevent_treeview_new	textgui.c	/^pevent_treeview_new (GtkWidget *box)$/;"	f	file:
ph	plugin-notification.c	/^static hexchat_plugin *ph;$/;"	v	file:
ph	plugin-tray.c	/^static hexchat_plugin *ph;$/;"	v	file:
pix_book	pixmaps.c	/^GdkPixbuf *pix_book;$/;"	v
pix_dn	dccgui.c	/^static GdkPixbuf *pix_dn = NULL;	\/* up arrow *\/$/;"	v	file:
pix_hexchat	pixmaps.c	/^GdkPixbuf *pix_hexchat;$/;"	v
pix_tray_fileoffer	pixmaps.c	/^GdkPixbuf *pix_tray_fileoffer;$/;"	v
pix_tray_highlight	pixmaps.c	/^GdkPixbuf *pix_tray_highlight;$/;"	v
pix_tray_message	pixmaps.c	/^GdkPixbuf *pix_tray_message;$/;"	v
pix_tree_channel	pixmaps.c	/^GdkPixbuf *pix_tree_channel;$/;"	v
pix_tree_dialog	pixmaps.c	/^GdkPixbuf *pix_tree_dialog;$/;"	v
pix_tree_server	pixmaps.c	/^GdkPixbuf *pix_tree_server;$/;"	v
pix_tree_util	pixmaps.c	/^GdkPixbuf *pix_tree_util;$/;"	v
pix_ulist_founder	pixmaps.c	/^GdkPixbuf *pix_ulist_founder;$/;"	v
pix_ulist_halfop	pixmaps.c	/^GdkPixbuf *pix_ulist_halfop;$/;"	v
pix_ulist_netop	pixmaps.c	/^GdkPixbuf *pix_ulist_netop;$/;"	v
pix_ulist_op	pixmaps.c	/^GdkPixbuf *pix_ulist_op;$/;"	v
pix_ulist_owner	pixmaps.c	/^GdkPixbuf *pix_ulist_owner;$/;"	v
pix_ulist_voice	pixmaps.c	/^GdkPixbuf *pix_ulist_voice;$/;"	v
pix_up	dccgui.c	/^static GdkPixbuf *pix_up = NULL;	\/* down arrow *\/$/;"	v	file:
pixel_offset	xtext.h	/^	int pixel_offset;					\/* amount of pixels the top line is chopped by *\/$/;"	m	struct:_GtkXText
pixmap	xtext.h	/^	GdkPixmap *pixmap;				\/* 0 = use palette[19] *\/$/;"	m	struct:_GtkXText
pixmap_load_from_file	pixmaps.c	/^pixmap_load_from_file (char *filename)$/;"	f
pixmap_load_from_file_real	pixmaps.c	/^pixmap_load_from_file_real (char *file)$/;"	f	file:
pixmaps_init	pixmaps.c	/^pixmaps_init (void)$/;"	f
pkgconfigdir	Makefile	/^pkgconfigdir = ${libdir}\/pkgconfig$/;"	m
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/hexchat$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/hexchat$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/hexchat$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/hexchat$/;"	m
plain_list	maingui.c	/^static PangoAttrList *plain_list = NULL;$/;"	v	file:
plugin_window	plugingui.c	/^static GtkWidget *plugin_window = NULL;$/;"	v	file:
plugingui_c	Makefile	/^plugingui_c = plugingui.c$/;"	m
plugingui_close	plugingui.c	/^plugingui_close (GtkWidget * wid, gpointer a)$/;"	f	file:
plugingui_getfilename	plugingui.c	/^plugingui_getfilename (GtkTreeView *view)$/;"	f	file:
plugingui_load	plugingui.c	/^plugingui_load (void)$/;"	f
plugingui_load_cb	plugingui.c	/^plugingui_load_cb (session *sess, char *file)$/;"	f	file:
plugingui_loadbutton_cb	plugingui.c	/^plugingui_loadbutton_cb (GtkWidget * wid, gpointer unused)$/;"	f	file:
plugingui_open	plugingui.c	/^plugingui_open (void)$/;"	f
plugingui_reloadbutton_cb	plugingui.c	/^plugingui_reloadbutton_cb (GtkWidget *wid, GtkTreeView *view)$/;"	f	file:
plugingui_treeview_new	plugingui.c	/^plugingui_treeview_new (GtkWidget *box)$/;"	f	file:
plugingui_unload	plugingui.c	/^plugingui_unload (GtkWidget * wid, gpointer unused)$/;"	f	file:
populate_cb	urlgrab.c	/^populate_cb (char *urltext, gpointer userdata)$/;"	f	file:
popup_menu_cb	menu.c	/^popup_menu_cb (GtkWidget * item, char *cmd)$/;"	f	file:
pos	chanlist.c	/^	guint32	pos;$/;"	m	struct:__anon3	file:
pos	custom-list.h	/^	guint32 pos;						  \/* pos within the array *\/$/;"	m	struct:__anon8
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prev	xtext.c	/^	struct textentry *prev;$/;"	m	struct:textentry	typeref:struct:textentry::textentry	file:
priv	sexy-spell-entry.h	/^	SexySpellEntryPriv *priv;$/;"	m	struct:_SexySpellEntry
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
proper_unit	dccgui.c	/^proper_unit (guint64 size, char *buf, size_t buf_len)$/;"	f	file:
proxy_pass	setup.c	/^static GtkWidget *proxy_pass; 	\/* password GtkEntry *\/$/;"	v	file:
proxy_user	setup.c	/^static GtkWidget *proxy_user; 	\/* username GtkEntry *\/$/;"	v	file:
proxytypes	setup.c	/^static const char *const proxytypes[] =$/;"	v	file:
proxyuse	setup.c	/^static const char *const proxyuse[] =$/;"	v	file:
psdir	Makefile	/^psdir = ${docdir}$/;"	m
ptr	resources.c	/^static const SECTION union { const guint8 data[39503]; const double alignment; void * const ptr;}  hexchat_resource_data = { {$/;"	m	union:__anon20	file:
queue_text	fe-gtk.h	/^	char *queue_text;		\/* outbound queue text *\/$/;"	m	struct:restore_gui
queue_tip	fe-gtk.h	/^	char *queue_tip;		\/* outbound queue tooltip *\/$/;"	m	struct:restore_gui
queue_value	fe-gtk.h	/^	gfloat queue_value; \/* outbound queue meter *\/$/;"	m	struct:restore_gui
rawlog_clearbutton	rawlog.c	/^rawlog_clearbutton (GtkWidget * wid, server *serv)$/;"	f	file:
rawlog_key_cb	rawlog.c	/^rawlog_key_cb (GtkWidget * wid, GdkEventKey * key, gpointer userdata)$/;"	f	file:
rawlog_save	rawlog.c	/^rawlog_save (server *serv, char *file)$/;"	f	file:
rawlog_savebutton	rawlog.c	/^rawlog_savebutton (GtkWidget * wid, server *serv)$/;"	f	file:
rawlog_textlist	fe-gtk.h	/^	GtkWidget *rawlog_textlist;$/;"	m	struct:server_gui
rawlog_window	fe-gtk.h	/^	GtkWidget *rawlog_window;$/;"	m	struct:server_gui
readable	banlist.h	/^	int readable;	\/* subset of capable if not op *\/$/;"	m	struct:banlist_info_s
recycle	xtext.h	/^	unsigned int recycle:1;$/;"	m	struct:_GtkXText
render_hilights_only	xtext.h	/^	unsigned int render_hilights_only:1;$/;"	m	struct:_GtkXText
replace_handle	fkeys.c	/^replace_handle (GtkWidget *t)$/;"	f	file:
replace_word	sexy-spell-entry.c	/^replace_word(GtkWidget *menuitem, SexySpellEntry *entry)$/;"	f	file:
resize_cursor	xtext.h	/^	GdkCursor *resize_cursor;$/;"	m	struct:_GtkXText
resource_constructor	resources.c	/^static void resource_constructor (void)$/;"	f	file:
resource_destructor	resources.c	/^static void resource_destructor (void)$/;"	f	file:
restore_gui	fe-gtk.h	/^typedef struct restore_gui$/;"	s
restore_gui	fe-gtk.h	/^} restore_gui;$/;"	t	typeref:struct:restore_gui
resume_button	dccgui.c	/^	GtkWidget *resume_button;$/;"	m	struct:dccwindow	file:
resume_clicked	dccgui.c	/^resume_clicked (GtkWidget * wid, gpointer none)$/;"	f	file:
rows	custom-list.h	/^	chanlistrow **rows; \/* a dynamically allocated array of pointers to the$/;"	m	struct:_CustomList
savebuffer_req_done	menu.c	/^savebuffer_req_done (session *sess, char *file)$/;"	f	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scratch_buffer	xtext.h	/^	unsigned char scratch_buffer[4096];$/;"	m	struct:_GtkXText
scroll_tag	xtext.h	/^	gint scroll_tag;				  \/* marking-scroll timeout *\/$/;"	m	struct:_GtkXText
scroll_to_iter	userlistgui.c	/^scroll_to_iter (GtkTreeIter *iter, GtkTreeView *treeview, GtkTreeModel *model)$/;"	f	file:
scrollbar_down	xtext.h	/^	unsigned int scrollbar_down:1;$/;"	m	struct:__anon31
scrollw	chanview-tree.c	/^	GtkWidget *scrollw;	\/* scrolledWindow *\/$/;"	m	struct:__anon5	file:
search_changed_signal	fe-gtk.h	/^		gulong search_changed_signal; \/* hook for search change event so blanking the box doesn't suck *\/$/;"	m	struct:session_gui
search_flags	xtext.h	/^	gtk_xtext_search_flags search_flags;	\/* match, bwd, highlight *\/$/;"	m	struct:__anon31
search_found	xtext.h	/^	GList *search_found;		\/* list of textentries where search found strings *\/$/;"	m	struct:__anon31
search_handle_change	maingui.c	/^search_handle_change(GtkWidget *wid, session *sess)$/;"	f	file:
search_handle_esc	maingui.c	/^search_handle_esc (GtkWidget *win, GdkEventKey *key, session *sess)$/;"	f	file:
search_handle_event	maingui.c	/^search_handle_event(int search_type, session *sess)$/;"	f	file:
search_handle_refresh	maingui.c	/^search_handle_refresh(GtkWidget *wid, session *sess)$/;"	f	file:
search_lnee	xtext.h	/^	gint search_lnee;		\/* its length *\/$/;"	m	struct:__anon31
search_nee	xtext.h	/^	gchar *search_nee;		\/* prepared needle to look in haystack for *\/$/;"	m	struct:__anon31
search_re	xtext.h	/^	GRegex *search_re;		\/* Compiled regular expression *\/$/;"	m	struct:__anon31
search_set_option	maingui.c	/^search_set_option (GtkToggleButton *but, guint *pref)$/;"	f	file:
search_text	xtext.h	/^	gchar *search_text;		\/* desired text to search for *\/$/;"	m	struct:__anon31
sedpath	Makefile	/^sedpath = \/bin\/sed$/;"	m
sel	dccgui.c	/^	GtkTreeSelection *sel;$/;"	m	struct:dccwindow	file:
select_ct	banlist.h	/^	int select_ct;	\/* count of selected lines *\/$/;"	m	struct:banlist_info_s
select_end_x	xtext.h	/^	int select_end_x;$/;"	m	struct:_GtkXText
select_end_y	xtext.h	/^	int select_end_y;$/;"	m	struct:_GtkXText
select_start_adj	xtext.h	/^	int select_start_adj;		  \/* the adj->value when the selection started *\/$/;"	m	struct:_GtkXText
select_start_x	xtext.h	/^	int select_start_x;$/;"	m	struct:_GtkXText
select_start_y	xtext.h	/^	int select_start_y;$/;"	m	struct:_GtkXText
selected_chan	servlistgui.c	/^static favchannel *selected_chan = NULL;$/;"	v	file:
selected_cmd	servlistgui.c	/^static commandentry *selected_cmd = NULL;$/;"	v	file:
selected_net	servlistgui.c	/^static ircnet *selected_net = NULL;$/;"	v	file:
selected_serv	servlistgui.c	/^static ircserver *selected_serv = NULL;$/;"	v	file:
selection_buffer	xtext.h	/^	xtext_buffer *selection_buffer;$/;"	m	struct:_GtkXText
sensitive	menu.c	/^	unsigned char sensitive;	\/* shaded out? *\/$/;"	m	struct:mymenu	file:
separator	xtext.h	/^	unsigned int separator:1;$/;"	m	struct:_GtkXText
server_gui	fe-gtk.h	/^struct server_gui$/;"	s
serverlist_win	servlistgui.c	/^static GtkWidget *serverlist_win = NULL;$/;"	v	file:
servlist_addbutton_cb	servlistgui.c	/^servlist_addbutton_cb (GtkWidget *item, GtkNotebook *notebook)$/;"	f	file:
servlist_addchannel	servlistgui.c	/^servlist_addchannel (void)$/;"	f	file:
servlist_addcommand	servlistgui.c	/^servlist_addcommand (void)$/;"	f	file:
servlist_addnet_cb	servlistgui.c	/^servlist_addnet_cb (GtkWidget *item, GtkTreeView *treeview)$/;"	f	file:
servlist_addserver	servlistgui.c	/^servlist_addserver (void)$/;"	f	file:
servlist_autojoinedit	servlistgui.c	/^servlist_autojoinedit (ircnet *net, char *channel, gboolean add)$/;"	f
servlist_celledit_cb	servlistgui.c	/^servlist_celledit_cb (GtkCellRendererText *cell, gchar *arg1, gchar *arg2,$/;"	f	file:
servlist_channel_row_cb	servlistgui.c	/^servlist_channel_row_cb (GtkTreeSelection *sel, gpointer user_data)$/;"	f	file:
servlist_channels_populate	servlistgui.c	/^servlist_channels_populate (ircnet *net, GtkWidget *treeview)$/;"	f	file:
servlist_check_cb	servlistgui.c	/^servlist_check_cb (GtkWidget *but, gpointer num_p)$/;"	f	file:
servlist_close_cb	servlistgui.c	/^servlist_close_cb (GtkWidget *button, gpointer userdata)$/;"	f	file:
servlist_combo_cb	servlistgui.c	/^servlist_combo_cb (GtkEntry *entry, gpointer userdata)$/;"	f	file:
servlist_command_row_cb	servlistgui.c	/^servlist_command_row_cb (GtkTreeSelection *sel, gpointer user_data)$/;"	f	file:
servlist_commands_populate	servlistgui.c	/^servlist_commands_populate (ircnet *net, GtkWidget *treeview)$/;"	f	file:
servlist_compare	servlistgui.c	/^servlist_compare (ircnet *net1, ircnet *net2)$/;"	f	file:
servlist_configure_cb	servlistgui.c	/^servlist_configure_cb (GtkWindow *win, GdkEventConfigure *event, gpointer none)$/;"	f	file:
servlist_connect_cb	servlistgui.c	/^servlist_connect_cb (GtkWidget *button, gpointer userdata)$/;"	f	file:
servlist_create_charsetcombo	servlistgui.c	/^servlist_create_charsetcombo (void)$/;"	f	file:
servlist_create_check	servlistgui.c	/^servlist_create_check (int num, int state, GtkWidget *table, int row, int col, char *labeltext)$/;"	f	file:
servlist_create_entry	servlistgui.c	/^servlist_create_entry (GtkWidget *table, char *labeltext, int row,$/;"	f	file:
servlist_create_logintypecombo	servlistgui.c	/^servlist_create_logintypecombo (GtkWidget *data)$/;"	f	file:
servlist_delete_cb	servlistgui.c	/^servlist_delete_cb (GtkWidget *win, GdkEventAny *event, gpointer userdata)$/;"	f	file:
servlist_deletebutton_cb	servlistgui.c	/^servlist_deletebutton_cb (GtkWidget *item, GtkNotebook *notebook)$/;"	f	file:
servlist_deletechannel	servlistgui.c	/^servlist_deletechannel (favchannel *favchan, GtkTreeModel *model)$/;"	f	file:
servlist_deletechannel_cb	servlistgui.c	/^servlist_deletechannel_cb (void)$/;"	f	file:
servlist_deletecommand	servlistgui.c	/^servlist_deletecommand (commandentry *entry, GtkTreeModel *model)$/;"	f	file:
servlist_deletecommand_cb	servlistgui.c	/^servlist_deletecommand_cb (void)$/;"	f	file:
servlist_deletenet_cb	servlistgui.c	/^servlist_deletenet_cb (GtkWidget *item, ircnet *net)$/;"	f	file:
servlist_deletenetdialog_cb	servlistgui.c	/^servlist_deletenetdialog_cb (GtkDialog *dialog, gint arg1, ircnet *net)$/;"	f	file:
servlist_deletenetwork	servlistgui.c	/^servlist_deletenetwork (ircnet *net)$/;"	f	file:
servlist_deleteserver	servlistgui.c	/^servlist_deleteserver (ircserver *serv, GtkTreeModel *model)$/;"	f	file:
servlist_deleteserver_cb	servlistgui.c	/^servlist_deleteserver_cb (void)$/;"	f	file:
servlist_edit_cb	servlistgui.c	/^servlist_edit_cb (GtkWidget *but, gpointer none)$/;"	f	file:
servlist_edit_close_cb	servlistgui.c	/^servlist_edit_close_cb (GtkWidget *button, gpointer userdata)$/;"	f	file:
servlist_edit_configure_cb	servlistgui.c	/^servlist_edit_configure_cb (GtkWindow *win, GdkEventConfigure *event, gpointer none)$/;"	f	file:
servlist_edit_tabswitch_cb	servlistgui.c	/^servlist_edit_tabswitch_cb (GtkNotebook *nb, gpointer *newtab, guint newindex, gpointer user_data)$/;"	f	file:
servlist_edit_update	servlistgui.c	/^servlist_edit_update (ircnet *net)$/;"	f	file:
servlist_editbutton_cb	servlistgui.c	/^servlist_editbutton_cb (GtkWidget *item, GtkNotebook *notebook)$/;"	f	file:
servlist_editchannel_cb	servlistgui.c	/^servlist_editchannel_cb (GtkCellRendererText *cell, gchar *name, gchar *newval, gpointer user_data)$/;"	f	file:
servlist_editcommand_cb	servlistgui.c	/^servlist_editcommand_cb (GtkCellRendererText *cell, gchar *name, gchar *newval, gpointer user_data)$/;"	f	file:
servlist_editkey_cb	servlistgui.c	/^servlist_editkey_cb (GtkCellRendererText *cell, gchar *name, gchar *newval, gpointer user_data)$/;"	f	file:
servlist_editserver_cb	servlistgui.c	/^servlist_editserver_cb (GtkCellRendererText *cell, gchar *name, gchar *newval, gpointer user_data)$/;"	f	file:
servlist_editwin_delete_cb	servlistgui.c	/^servlist_editwin_delete_cb (GtkWidget *win, GdkEventAny *event, gpointer none)$/;"	f	file:
servlist_favor	servlistgui.c	/^servlist_favor (GtkWidget *button, gpointer none)$/;"	f	file:
servlist_find_selected_net	servlistgui.c	/^servlist_find_selected_net (GtkTreeSelection *sel)$/;"	f	file:
servlist_get_iter_from_name	servlistgui.c	/^servlist_get_iter_from_name (GtkTreeModel *model, gchar *name, GtkTreeIter *iter)$/;"	f	file:
servlist_get_login_desc_index	servlistgui.c	/^servlist_get_login_desc_index (int conf_value)$/;"	f	file:
servlist_has_selection	servlistgui.c	/^servlist_has_selection (GtkTreeView *tree)$/;"	f	file:
servlist_keypress_cb	servlistgui.c	/^servlist_keypress_cb (GtkWidget *wid, GdkEventKey *evt, GtkNotebook *notebook)$/;"	f	file:
servlist_logintypecombo_cb	servlistgui.c	/^servlist_logintypecombo_cb (GtkComboBox *cb, gpointer *userdata)$/;"	f	file:
servlist_move_item	servlistgui.c	/^servlist_move_item (GtkTreeView *view, GSList *list, gpointer item, int delta)$/;"	f	file:
servlist_net_keypress_cb	servlistgui.c	/^servlist_net_keypress_cb (GtkWidget *wid, GdkEventKey *evt, gpointer tree)$/;"	f	file:
servlist_network_row_cb	servlistgui.c	/^servlist_network_row_cb (GtkTreeSelection *sel, gpointer user_data)$/;"	f	file:
servlist_networks_populate	servlistgui.c	/^servlist_networks_populate (GtkWidget *treeview, GSList *netlist)$/;"	f	file:
servlist_networks_populate_	servlistgui.c	/^servlist_networks_populate_ (GtkWidget *treeview, GSList *netlist, gboolean favorites)$/;"	f	file:
servlist_nick_changed_cb	servlistgui.c	/^servlist_nick_changed_cb (GtkEntry *entry, gpointer userdata)$/;"	f	file:
servlist_open_edit	servlistgui.c	/^servlist_open_edit (GtkWidget *parent, ircnet *net)$/;"	f	file:
servlist_open_networks	servlistgui.c	/^servlist_open_networks (void)$/;"	f	file:
servlist_sanitize_command	servlistgui.c	/^servlist_sanitize_command (char *cmd)$/;"	f	file:
servlist_sanitize_hostname	servlistgui.c	/^servlist_sanitize_hostname (char *host)$/;"	f	file:
servlist_savegui	servlistgui.c	/^servlist_savegui (void)$/;"	f	file:
servlist_select_and_show	servlistgui.c	/^servlist_select_and_show (GtkTreeView *treeview, GtkTreeIter *iter,$/;"	f	file:
servlist_server_row_cb	servlistgui.c	/^servlist_server_row_cb (GtkTreeSelection *sel, gpointer user_data)$/;"	f	file:
servlist_servers_populate	servlistgui.c	/^servlist_servers_populate (ircnet *net, GtkWidget *treeview)$/;"	f	file:
servlist_sess	servlistgui.c	/^static session *servlist_sess;$/;"	v	file:
servlist_sort	servlistgui.c	/^servlist_sort (GtkWidget *button, gpointer none)$/;"	f	file:
servlist_start_editing	servlistgui.c	/^servlist_start_editing (GtkTreeView *tree)$/;"	f	file:
servlist_toggle_global_user	servlistgui.c	/^servlist_toggle_global_user (gboolean sensitive)$/;"	f	file:
servlist_update_from_entry	servlistgui.c	/^servlist_update_from_entry (char **str, GtkWidget *entry)$/;"	f	file:
servlist_username_changed_cb	servlistgui.c	/^servlist_username_changed_cb (GtkEntry *entry, gpointer userdata)$/;"	f	file:
sess	banlist.h	/^	session *sess;$/;"	m	struct:banlist_info_s
sess	dccgui.c	/^	struct session *sess;$/;"	m	struct:my_dcc_send	typeref:struct:my_dcc_send::session	file:
session_check_is_tab	fkeys.c	/^session_check_is_tab(session *sess)$/;"	f	file:
session_gui	fe-gtk.h	/^typedef struct session_gui$/;"	s
session_gui	fe-gtk.h	/^} session_gui;$/;"	t	typeref:struct:session_gui
set_scroll_adjustments	xtext.h	/^	void (*set_scroll_adjustments) (GtkXText *xtext, GtkAdjustment *hadj, GtkAdjustment *vadj);$/;"	m	struct:_GtkXTextClass
set_window_urgency	maingui.c	/^set_window_urgency (GtkWidget *win, gboolean set)$/;"	f	file:
setting	setup.c	/^} setting;$/;"	t	typeref:struct:__anon23	file:
setup_3oggle_cb	setup.c	/^setup_3oggle_cb (GtkToggleButton *but, unsigned int *setting)$/;"	f	file:
setup_add_page	setup.c	/^setup_add_page (const char *title, GtkWidget *book, GtkWidget *tab)$/;"	f	file:
setup_apply	setup.c	/^setup_apply (struct hexchatprefs *pr)$/;"	f	file:
setup_apply_entry_style	setup.c	/^setup_apply_entry_style (GtkWidget *entry)$/;"	f	file:
setup_apply_real	setup.c	/^setup_apply_real (int new_pix, int do_ulist, int do_layout)$/;"	f
setup_apply_to_sess	setup.c	/^setup_apply_to_sess (session_gui *gui)$/;"	f	file:
setup_apply_trans	setup.c	/^setup_apply_trans (int *tag)$/;"	f	file:
setup_browsefile_cb	setup.c	/^setup_browsefile_cb (GtkWidget *button, GtkWidget *entry)$/;"	f	file:
setup_browsefolder_cb	setup.c	/^setup_browsefolder_cb (GtkWidget *button, GtkEntry *entry)$/;"	f	file:
setup_browsefont_cb	setup.c	/^setup_browsefont_cb (GtkWidget *button, GtkWidget *entry)$/;"	f	file:
setup_close_cb	setup.c	/^setup_close_cb (GtkWidget *win, GtkWidget **swin)$/;"	f	file:
setup_color_cb	setup.c	/^setup_color_cb (GtkWidget *button, gpointer userdata)$/;"	f	file:
setup_color_ok_cb	setup.c	/^setup_color_ok_cb (GtkWidget *button, GtkWidget *dialog)$/;"	f	file:
setup_create_3oggle	setup.c	/^setup_create_3oggle (GtkWidget *tab, int row, const setting *set)$/;"	f	file:
setup_create_alert_header	setup.c	/^setup_create_alert_header (GtkWidget *tab, int row, const setting *set)$/;"	f	file:
setup_create_button	setup.c	/^setup_create_button (GtkWidget *table, int row, char *label, GCallback callback)$/;"	f	file:
setup_create_color_button	setup.c	/^setup_create_color_button (GtkWidget *table, int num, int row, int col)$/;"	f	file:
setup_create_color_page	setup.c	/^setup_create_color_page (void)$/;"	f	file:
setup_create_entry	setup.c	/^setup_create_entry (GtkWidget *table, int row, const setting *set)$/;"	f	file:
setup_create_frame	setup.c	/^setup_create_frame (void)$/;"	f	file:
setup_create_header	setup.c	/^setup_create_header (GtkWidget *table, int row, char *labeltext)$/;"	f	file:
setup_create_hscale	setup.c	/^setup_create_hscale (GtkWidget *table, int row, const setting *set)$/;"	f	file:
setup_create_italic_label	setup.c	/^setup_create_italic_label (char *text)$/;"	f	file:
setup_create_label	setup.c	/^setup_create_label (GtkWidget *table, int row, const setting *set)$/;"	f	file:
setup_create_menu	setup.c	/^setup_create_menu (GtkWidget *table, int row, const setting *set)$/;"	f	file:
setup_create_other_color	setup.c	/^setup_create_other_color (char *text, int num, int row, GtkWidget *tab)$/;"	f	file:
setup_create_other_colorR	setup.c	/^setup_create_other_colorR (char *text, int num, int row, GtkWidget *tab)$/;"	f	file:
setup_create_page	setup.c	/^setup_create_page (const setting *set)$/;"	f	file:
setup_create_pages	setup.c	/^setup_create_pages (GtkWidget *box)$/;"	f	file:
setup_create_radio	setup.c	/^setup_create_radio (GtkWidget *table, int row, const setting *set)$/;"	f	file:
setup_create_sound_page	setup.c	/^setup_create_sound_page (void)$/;"	f	file:
setup_create_spin	setup.c	/^setup_create_spin (GtkWidget *table, int row, const setting *set)$/;"	f	file:
setup_create_toggleL	setup.c	/^setup_create_toggleL (GtkWidget *tab, int row, const setting *set)$/;"	f	file:
setup_create_toggleR	setup.c	/^setup_create_toggleR (GtkWidget *tab, int row, const setting *set)$/;"	f	file:
setup_create_tree	setup.c	/^setup_create_tree (GtkWidget *box, GtkWidget *book)$/;"	f	file:
setup_entry_cb	setup.c	/^setup_entry_cb (GtkEntry *entry, setting *set)$/;"	f	file:
setup_filereq_cb	setup.c	/^setup_filereq_cb (GtkWidget *entry, char *file)$/;"	f	file:
setup_fontsel_cancel	setup.c	/^setup_fontsel_cancel (GtkWidget *button, GtkFontSelectionDialog *dialog)$/;"	f	file:
setup_fontsel_cb	setup.c	/^setup_fontsel_cb (GtkWidget *button, GtkFontSelectionDialog *dialog)$/;"	f	file:
setup_fontsel_destroy	setup.c	/^setup_fontsel_destroy (GtkWidget *button, GtkFontSelectionDialog *dialog)$/;"	f	file:
setup_get_int	setup.c	661;"	d	file:
setup_get_int3	setup.c	662;"	d	file:
setup_get_str	setup.c	660;"	d	file:
setup_headlabel	setup.c	/^setup_headlabel (GtkWidget *tab, int row, int col, char *text)$/;"	f	file:
setup_hscale_cb	setup.c	/^setup_hscale_cb (GtkHScale *wid, const setting *set)$/;"	f	file:
setup_menu_cb	setup.c	/^setup_menu_cb (GtkWidget *cbox, const setting *set)$/;"	f	file:
setup_ok_cb	setup.c	/^setup_ok_cb (GtkWidget *but, GtkWidget *win)$/;"	f	file:
setup_open	setup.c	/^setup_open (void)$/;"	f
setup_prefs	setup.c	/^static struct hexchatprefs setup_prefs;$/;"	v	typeref:struct:hexchatprefs	file:
setup_radio_cb	setup.c	/^setup_radio_cb (GtkWidget *item, const setting *set)$/;"	f	file:
setup_set_int	setup.c	664;"	d	file:
setup_set_str	setup.c	665;"	d	file:
setup_snd_add_columns	setup.c	/^setup_snd_add_columns (GtkTreeView * treeview)$/;"	f	file:
setup_snd_browse_cb	setup.c	/^setup_snd_browse_cb (GtkWidget *button, GtkEntry *entry)$/;"	f	file:
setup_snd_changed_cb	setup.c	/^setup_snd_changed_cb (GtkEntry *ent, GtkTreeView *tree)$/;"	f	file:
setup_snd_filereq_cb	setup.c	/^setup_snd_filereq_cb (GtkWidget *entry, char *file)$/;"	f	file:
setup_snd_get_selected	setup.c	/^setup_snd_get_selected (GtkTreeSelection *sel, GtkTreeIter *iter)$/;"	f	file:
setup_snd_play_cb	setup.c	/^setup_snd_play_cb (GtkWidget *button, GtkEntry *entry)$/;"	f	file:
setup_snd_populate	setup.c	/^setup_snd_populate (GtkTreeView * treeview)$/;"	f	file:
setup_snd_row_cb	setup.c	/^setup_snd_row_cb (GtkTreeSelection *sel, gpointer user_data)$/;"	f	file:
setup_spin_cb	setup.c	/^setup_spin_cb (GtkSpinButton *spin, const setting *set)$/;"	f	file:
setup_toggle_cb	setup.c	/^setup_toggle_cb (GtkToggleButton *but, const setting *set)$/;"	f	file:
setup_toggle_sensitive_cb	setup.c	/^setup_toggle_sensitive_cb (GtkToggleButton *but, GtkWidget *wid)$/;"	f	file:
setup_tree_cb	setup.c	/^setup_tree_cb (GtkTreeView *treeview, GtkWidget *book)$/;"	f	file:
setup_tree_select_filter	setup.c	/^setup_tree_select_filter (GtkTreeSelection *selection, GtkTreeModel *model,$/;"	f	file:
setup_window_open	setup.c	/^setup_window_open (void)$/;"	f	file:
sexy_spell_entry_activate_default_languages	sexy-spell-entry.c	/^sexy_spell_entry_activate_default_languages(SexySpellEntry *entry)$/;"	f
sexy_spell_entry_activate_language	sexy-spell-entry.c	/^sexy_spell_entry_activate_language(SexySpellEntry *entry, const gchar *lang, GError **error)$/;"	f
sexy_spell_entry_activate_language_internal	sexy-spell-entry.c	/^sexy_spell_entry_activate_language_internal(SexySpellEntry *entry, const gchar *lang, GError **error)$/;"	f	file:
sexy_spell_entry_button_press	sexy-spell-entry.c	/^sexy_spell_entry_button_press(GtkWidget *widget, GdkEventButton *event)$/;"	f	file:
sexy_spell_entry_changed	sexy-spell-entry.c	/^sexy_spell_entry_changed(GtkEditable *editable, gpointer data)$/;"	f	file:
sexy_spell_entry_class_init	sexy-spell-entry.c	/^sexy_spell_entry_class_init(SexySpellEntryClass *klass)$/;"	f	file:
sexy_spell_entry_deactivate_language	sexy-spell-entry.c	/^sexy_spell_entry_deactivate_language(SexySpellEntry *entry, const gchar *lang)$/;"	f
sexy_spell_entry_destroy	sexy-spell-entry.c	/^sexy_spell_entry_destroy(GObject *obj)$/;"	f	file:
sexy_spell_entry_editable_init	sexy-spell-entry.c	/^sexy_spell_entry_editable_init (GtkEditableClass *iface)$/;"	f	file:
sexy_spell_entry_expose	sexy-spell-entry.c	/^sexy_spell_entry_expose(GtkWidget *widget, GdkEventExpose *event)$/;"	f	file:
sexy_spell_entry_finalize	sexy-spell-entry.c	/^sexy_spell_entry_finalize(GObject *obj)$/;"	f	file:
sexy_spell_entry_get_active_languages	sexy-spell-entry.c	/^sexy_spell_entry_get_active_languages(SexySpellEntry *entry)$/;"	f
sexy_spell_entry_get_language_name	sexy-spell-entry.c	/^sexy_spell_entry_get_language_name(const SexySpellEntry *entry,$/;"	f
sexy_spell_entry_get_languages	sexy-spell-entry.c	/^sexy_spell_entry_get_languages(const SexySpellEntry *entry)$/;"	f
sexy_spell_entry_init	sexy-spell-entry.c	/^sexy_spell_entry_init(SexySpellEntry *entry)$/;"	f	file:
sexy_spell_entry_is_checked	sexy-spell-entry.c	/^sexy_spell_entry_is_checked(SexySpellEntry *entry)$/;"	f
sexy_spell_entry_language_is_active	sexy-spell-entry.c	/^sexy_spell_entry_language_is_active(const SexySpellEntry *entry,$/;"	f
sexy_spell_entry_new	sexy-spell-entry.c	/^sexy_spell_entry_new(void)$/;"	f
sexy_spell_entry_populate_popup	sexy-spell-entry.c	/^sexy_spell_entry_populate_popup(SexySpellEntry *entry, GtkMenu *menu, gpointer data)$/;"	f	file:
sexy_spell_entry_popup_menu	sexy-spell-entry.c	/^sexy_spell_entry_popup_menu(GtkWidget *widget, SexySpellEntry *entry)$/;"	f	file:
sexy_spell_entry_recheck_all	sexy-spell-entry.c	/^sexy_spell_entry_recheck_all(SexySpellEntry *entry)$/;"	f	file:
sexy_spell_entry_set_active_languages	sexy-spell-entry.c	/^sexy_spell_entry_set_active_languages(SexySpellEntry *entry, GSList *langs, GError **error)$/;"	f
sexy_spell_entry_set_checked	sexy-spell-entry.c	/^sexy_spell_entry_set_checked(SexySpellEntry *entry, gboolean checked)$/;"	f
sexy_spell_entry_set_parse_attributes	sexy-spell-entry.c	/^sexy_spell_entry_set_parse_attributes (SexySpellEntry *entry, gboolean parse)$/;"	f
sexy_spell_error_quark	sexy-spell-entry.c	/^sexy_spell_error_quark(void)$/;"	f
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shbox	fe-gtk.h	/^		GtkWidget *shbox, *shentry;	\/* search bar hbox *\/$/;"	m	struct:session_gui
shentry	fe-gtk.h	/^		GtkWidget *shbox, *shentry;	\/* search bar hbox *\/$/;"	m	struct:session_gui
should_alert	plugin-notification.c	/^should_alert (void)$/;"	f	file:
show_and_unfocus	gtkutil.c	/^show_and_unfocus (GtkWidget * wid)$/;"	f
show_notification	plugin-notification.c	/^show_notification (const char *title, const char *text)$/;"	f	file:
show_notificationf	plugin-notification.c	/^show_notificationf (const char *text, const char *format, ...)$/;"	f	file:
signals	sexy-spell-entry.c	/^static guint signals[LAST_SIGNAL] = {0};$/;"	v	file:
size	chanview.c	/^	int size;			\/* number of channels in view *\/$/;"	m	struct:_chanview	file:
skip_border_fills	xtext.h	/^	unsigned int skip_border_fills:1;$/;"	m	struct:_GtkXText
skip_stamp	xtext.h	/^	unsigned int skip_stamp:1;$/;"	m	struct:_GtkXText
slp	xtext.c	/^	GSList *slp;$/;"	m	struct:chunk_s	file:
slp	xtext.c	/^	GSList *slp;$/;"	m	struct:textentry	file:
sndfile_entry	setup.c	/^static GtkWidget *sndfile_entry;$/;"	v	file:
sort_id	custom-list.h	/^	gint sort_id;$/;"	m	struct:_CustomList
sort_order	custom-list.h	/^	GtkSortType sort_order;$/;"	m	struct:_CustomList
sorted	chanview.c	/^	unsigned int sorted:1;$/;"	m	struct:_chanview	file:
space_width	xtext.h	/^	int space_width;				  \/* width (pixels) of the space " " character *\/$/;"	m	struct:_GtkXText
spell_accumulator	sexy-spell-entry.c	/^spell_accumulator(GSignalInvocationHint *hint, GValue *return_accu, const GValue *handler_return, gpointer data)$/;"	f	file:
srcdir	Makefile	/^srcdir = .$/;"	m
stamp	xtext.c	/^	time_t stamp;$/;"	m	struct:textentry	file:
stamp_width	xtext.h	/^	int stamp_width;				  \/* width of "[88:88:88]" *\/$/;"	m	struct:_GtkXText
start	xtext.h	/^		guint16	start;$/;"	m	struct:offsets_u::offsets_s
state	menu.c	/^	unsigned char state;	\/* ticked or not? *\/$/;"	m	struct:mymenu	file:
static_mg_gui	maingui.c	/^static session_gui static_mg_gui;$/;"	v	file:
static_resource	resources.c	/^static GStaticResource static_resource = { hexchat_resource_data.data, sizeof (hexchat_resource_data.data), NULL, NULL, NULL };$/;"	v	file:
sticon	plugin-tray.c	/^static GtkStatusIcon *sticon;$/;"	v	file:
store	chanview.c	/^	GtkTreeStore *store;$/;"	m	struct:_chanview	file:
store	dccgui.c	/^	GtkListStore *store;$/;"	m	struct:dccwindow	file:
str	xtext.c	/^	unsigned char *str;$/;"	m	struct:textentry	file:
str_copy	menu.c	/^static char *str_copy = NULL;		\/* for all pop-up menus *\/$/;"	v	file:
str_len	xtext.c	/^	gint16 str_len;$/;"	m	struct:textentry	file:
str_width	xtext.c	/^	gint16 str_width;$/;"	m	struct:textentry	file:
style	chanview.c	/^	GtkStyle *style;	\/* style used for tree *\/$/;"	m	struct:_chanview	file:
subdir	Makefile	/^subdir = src\/fe-gtk$/;"	m
sublines	xtext.c	/^	GSList *sublines;$/;"	m	struct:textentry	file:
submenu_list	menu.c	/^static GSList *submenu_list;$/;"	v	file:
supports_bans	banlist.c	/^supports_bans (banlist_info *banl, int i)$/;"	f	file:
supports_exempt	banlist.c	/^supports_exempt (banlist_info *banl, int i)$/;"	f	file:
supports_invite	banlist.c	/^supports_invite (banlist_info *banl, int i)$/;"	f	file:
supports_quiet	banlist.c	/^supports_quiet (banlist_info *banl, int i)$/;"	f	file:
swtype	setup.c	/^static const char *const swtype[] =$/;"	v	file:
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
tab	fe-gtk.h	/^	void *tab;			\/* (chan *) *\/$/;"	m	struct:restore_gui
tab_add_real	chanview-tabs.c	/^tab_add_real (chanview *cv, GtkWidget *tab, chan *ch)$/;"	f	file:
tab_add_sorted	chanview-tabs.c	/^tab_add_sorted (chanview *cv, GtkWidget *box, GtkWidget *tab, chan *ch)$/;"	f	file:
tab_check_focus_cb	chanview-tabs.c	/^tab_check_focus_cb (GtkWidget *tab, int num, int unused)$/;"	f	file:
tab_click_cb	chanview-tabs.c	/^tab_click_cb (GtkWidget *wid, GdkEventButton *event, chan *ch)$/;"	f	file:
tab_focus_num_cb	chanview-tabs.c	/^tab_focus_num_cb (GtkWidget *tab, int num, int want)$/;"	f	file:
tab_group_for_each_tab	chanview-tabs.c	/^tab_group_for_each_tab (chanview *cv,$/;"	f	file:
tab_group_get_cur_page	chanview-tabs.c	/^tab_group_get_cur_page (chanview *cv)$/;"	f	file:
tab_ignore_cb	chanview-tabs.c	/^tab_ignore_cb (GtkWidget *widget, GdkEventCrossing *event, gpointer user_data)$/;"	f	file:
tab_left_is_moving	chanview-tabs.c	/^static int tab_left_is_moving = 0;$/;"	v	file:
tab_pressed_cb	chanview-tabs.c	/^tab_pressed_cb (GtkToggleButton *tab, chan *ch)$/;"	f	file:
tab_right_is_moving	chanview-tabs.c	/^static int tab_right_is_moving = 0;$/;"	v	file:
tab_scroll_cb	chanview-tabs.c	/^tab_scroll_cb (GtkWidget *widget, GdkEventScroll *event, gpointer cv)$/;"	f	file:
tab_scroll_left_up_clicked	chanview-tabs.c	/^tab_scroll_left_up_clicked (GtkWidget *widget, chanview *cv)$/;"	f	file:
tab_scroll_right_down_clicked	chanview-tabs.c	/^tab_scroll_right_down_clicked (GtkWidget *widget, chanview *cv)$/;"	f	file:
tab_search_offset	chanview-tabs.c	/^tab_search_offset (GtkWidget *inner, gint start_offset,$/;"	f	file:
tab_toggled_cb	chanview-tabs.c	/^tab_toggled_cb (GtkToggleButton *tab, chan *ch)$/;"	f	file:
tabcompmenu	setup.c	/^static const char *const tabcompmenu[] = $/;"	v	file:
table	ascii.c	/^static const unsigned char table[]=$/;"	v	file:
tabs_settings	setup.c	/^static const setting tabs_settings[] =$/;"	v	file:
tabview	chanview-tabs.c	/^} tabview;$/;"	t	typeref:struct:__anon4	file:
tabwin	setup.c	/^static const char *const tabwin[] =$/;"	v	file:
tag	chanview.c	/^	short tag;$/;"	m	struct:_chan	file:
tag	xtext.c	/^	guchar tag;$/;"	m	struct:textentry	file:
talked_recent_cmp	fkeys.c	/^talked_recent_cmp (struct User *a, struct User *b)$/;"	f	file:
target_alias	Makefile	/^target_alias = $/;"	m
taskbarlist	setup.c	/^static const int taskbarlist[3] =$/;"	v	file:
tester	banlist.h	/^	void (*tester)(banlist_info *, int);	\/* Function returns true to set bit into checkable *\/$/;"	m	struct:mode_info_s
text	menu.c	/^	char *text;$/;"	m	struct:mymenu	file:
text_first	xtext.h	/^	textentry *text_first;$/;"	m	struct:__anon31
text_last	xtext.h	/^	textentry *text_last;$/;"	m	struct:__anon31
textentry	xtext.c	/^struct textentry$/;"	s	file:
textentry	xtext.h	/^typedef struct textentry textentry;$/;"	t	typeref:struct:textentry
thin_gc	xtext.h	/^	GdkGC *thin_gc;$/;"	m	struct:_GtkXText
thinline	xtext.h	/^	unsigned int thinline:1;$/;"	m	struct:_GtkXText
throttleinfo	fe-gtk.h	/^		*throttleinfo,$/;"	m	struct:session_gui
throttlemeter	fe-gtk.h	/^		*throttlemeter,$/;"	m	struct:session_gui
time_stamp	xtext.h	/^	unsigned int time_stamp:1;$/;"	m	struct:__anon31
toggle_cb	menu.c	/^toggle_cb (GtkWidget *item, char *pref_name)$/;"	f	file:
tooltip	setup.c	/^	char *tooltip;$/;"	m	struct:__anon23	file:
top_build_prefix	Makefile	/^top_build_prefix = ..\/..\/$/;"	m
top_builddir	Makefile	/^top_builddir = ..\/..$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..\/..$/;"	m
topic	chanlist.c	/^	char *topic;$/;"	m	struct:__anon3	file:
topic	custom-list.h	/^	char *topic;$/;"	m	struct:__anon8
topic_bar	fe-gtk.h	/^		*topic_bar,$/;"	m	struct:session_gui
topic_entry	fe-gtk.h	/^		*topic_entry,$/;"	m	struct:session_gui
topic_text	fe-gtk.h	/^	char *topic_text;	\/* topic GtkEntry buffer *\/$/;"	m	struct:restore_gui
topicbutton_box	fe-gtk.h	/^		*topicbutton_box,$/;"	m	struct:session_gui
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
tray_apply_setup	plugin-tray.c	/^tray_apply_setup (void)$/;"	f
tray_check_hide	plugin-tray.c	/^tray_check_hide (GtkWidget *menu)$/;"	f	file:
tray_cleanup	plugin-tray.c	/^tray_cleanup (void)$/;"	f	file:
tray_cmd_cb	plugin-notification.c	/^tray_cmd_cb (char *word[], char *word_eol[], gpointer userdata)$/;"	f	file:
tray_count_channels	plugin-tray.c	/^tray_count_channels (void)$/;"	f	file:
tray_count_networks	plugin-tray.c	/^tray_count_networks (void)$/;"	f	file:
tray_dcc_cb	plugin-tray.c	/^tray_dcc_cb (char *word[], void *userdata)$/;"	f	file:
tray_file_count	plugin-tray.c	/^static int tray_file_count = 0;$/;"	v	file:
tray_find_away_status	plugin-tray.c	/^tray_find_away_status (void)$/;"	f	file:
tray_focus_cb	plugin-tray.c	/^tray_focus_cb (char *word[], void *userdata)$/;"	f	file:
tray_foreach_server	plugin-tray.c	/^tray_foreach_server (GtkWidget *item, char *cmd)$/;"	f	file:
tray_get_window_status	plugin-tray.c	/^tray_get_window_status (void)$/;"	f	file:
tray_hilight_cb	plugin-tray.c	/^tray_hilight_cb (char *word[], void *userdata)$/;"	f	file:
tray_hilight_count	plugin-tray.c	/^static int tray_hilight_count = 0;$/;"	v	file:
tray_icon_free	plugin-tray.c	55;"	d	file:
tray_icon_from_file	plugin-tray.c	54;"	d	file:
tray_init	plugin-tray.c	/^tray_init (void)$/;"	f	file:
tray_invited_cb	plugin-tray.c	/^tray_invited_cb (char *word[], void *userdata)$/;"	f	file:
tray_make_item	plugin-tray.c	/^tray_make_item (GtkWidget *menu, char *label, void *callback, void *userdata)$/;"	f	file:
tray_menu_cb	plugin-tray.c	/^tray_menu_cb (GtkWidget *widget, guint button, guint time, gpointer userdata)$/;"	f	file:
tray_menu_destroy	plugin-tray.c	/^tray_menu_destroy (GtkWidget *menu, gpointer userdata)$/;"	f	file:
tray_menu_enter_cb	plugin-tray.c	/^tray_menu_enter_cb (GtkWidget *menu)$/;"	f	file:
tray_menu_inactivetime	plugin-tray.c	/^static gint64 tray_menu_inactivetime;$/;"	v	file:
tray_menu_left_cb	plugin-tray.c	/^tray_menu_left_cb (GtkWidget *menu)$/;"	f	file:
tray_menu_notify_cb	plugin-tray.c	/^tray_menu_notify_cb (GObject *tray, GParamSpec *pspec, gpointer user_data)$/;"	f	file:
tray_menu_quit_cb	plugin-tray.c	/^tray_menu_quit_cb (GtkWidget *item, gpointer userdata)$/;"	f	file:
tray_menu_restore_cb	plugin-tray.c	/^tray_menu_restore_cb (GtkWidget *item, gpointer userdata)$/;"	f	file:
tray_menu_settings	plugin-tray.c	/^tray_menu_settings (GtkWidget * wid, gpointer none)$/;"	f	file:
tray_menu_timer	plugin-tray.c	/^static guint tray_menu_timer;$/;"	v	file:
tray_menu_try_restore	plugin-tray.c	/^tray_menu_try_restore ()$/;"	f	file:
tray_message_cb	plugin-tray.c	/^tray_message_cb (char *word[], void *userdata)$/;"	f	file:
tray_plugin_deinit	plugin-tray.c	/^tray_plugin_deinit (hexchat_plugin *plugin_handle)$/;"	f
tray_plugin_init	plugin-tray.c	/^tray_plugin_init (hexchat_plugin *plugin_handle, char **plugin_name,$/;"	f
tray_priv	plugin-tray.c	/^tray_priv (char *from, char *text)$/;"	f	file:
tray_priv_cb	plugin-tray.c	/^tray_priv_cb (char *word[], void *userdata)$/;"	f	file:
tray_priv_count	plugin-tray.c	/^static int tray_priv_count = 0;$/;"	v	file:
tray_pub_count	plugin-tray.c	/^static int tray_pub_count = 0;$/;"	v	file:
tray_reset_counts	plugin-tray.c	/^tray_reset_counts (void)$/;"	f	file:
tray_restore_timer	plugin-tray.c	/^static int tray_restore_timer = 0;$/;"	v	file:
tray_set_flash	plugin-tray.c	/^tray_set_flash (TrayIcon icon)$/;"	f	file:
tray_set_tipf	plugin-tray.c	/^tray_set_tipf (const char *format, ...)$/;"	f	file:
tray_status	plugin-tray.c	/^static TrayStatus tray_status;$/;"	v	file:
tray_stop_flash	plugin-tray.c	/^tray_stop_flash (void)$/;"	f	file:
tray_timeout_cb	plugin-tray.c	/^tray_timeout_cb (TrayIcon icon)$/;"	f	file:
tray_toggle_cb	plugin-tray.c	/^tray_toggle_cb (GtkCheckMenuItem *item, unsigned int *setting)$/;"	f	file:
tray_toggle_visibility	plugin-tray.c	/^tray_toggle_visibility (gboolean force_hide)$/;"	f
trayblinklist	setup.c	/^static const int trayblinklist[3] =$/;"	v	file:
tree	chanview-tree.c	/^	GtkTreeView *tree;$/;"	m	struct:__anon5	file:
treeview	banlist.h	/^	GtkWidget *treeview;$/;"	m	struct:banlist_info_s
treeview	chanview-tree.c	/^} treeview;$/;"	t	typeref:struct:__anon5	file:
treeview_get_selected	dccgui.c	/^treeview_get_selected (GtkTreeModel *model, GtkTreeSelection *sel, int column)$/;"	f	file:
trunc_len	chanview.c	/^	int trunc_len;$/;"	m	struct:_chanview	file:
truncate_tab_name	chanview.c	/^truncate_tab_name (char *name, int max)$/;"	f	file:
ts_x	xtext.h	/^	int ts_x;			\/* ts origin for ->bgc GC *\/$/;"	m	struct:_GtkXText
ts_y	xtext.h	/^	int ts_y;$/;"	m	struct:_GtkXText
type	banlist.h	/^	char *type;		\/* Type for type column, e.g. "Ban" *\/$/;"	m	struct:mode_info_s
type	menu.c	/^	unsigned char type;	\/* M_XXX *\/$/;"	m	struct:mymenu	file:
type	setup.c	/^	int type;$/;"	m	struct:__anon23	file:
u	xtext.h	/^	guint32 u;$/;"	m	union:offsets_u
ul_hidden	fe-gtk.h	/^	guint16 ul_hidden;	\/* userlist hidden? *\/$/;"	m	struct:session_gui
ul_tag	maingui.c	/^static int ul_tag = 0;$/;"	v	file:
ulbutton_help	menu.c	1485;"	d	file:
ulmenutext	setup.c	/^static const char *const ulmenutext[] = $/;"	v	file:
ulpos	setup.c	/^static const char *const ulpos[] =$/;"	v	file:
un_hilight	xtext.h	/^	unsigned int un_hilight:1;$/;"	m	struct:_GtkXText
unamepath	Makefile	/^unamepath = \/bin\/uname$/;"	m
underline	xtext.h	/^	unsigned int underline:1;$/;"	m	struct:_GtkXText
unflash_window	maingui.c	/^unflash_window (GtkWidget *win)$/;"	f	file:
unslash	setup.c	/^unslash (char *dir)$/;"	f	file:
update_clear_button_sensitivity	dccgui.c	/^update_clear_button_sensitivity (void)$/;"	f	file:
url_button_clear	urlgrab.c	/^url_button_clear (void)$/;"	f	file:
url_button_copy	urlgrab.c	/^url_button_copy (GtkWidget *widget, gpointer data)$/;"	f	file:
url_button_save	urlgrab.c	/^url_button_save (void)$/;"	f	file:
url_closegui	urlgrab.c	/^url_closegui (GtkWidget *wid, gpointer userdata)$/;"	f	file:
url_escape_hostname	fe-gtk.c	/^url_escape_hostname (const char *url)$/;"	f	file:
url_help	menu.c	1518;"	d	file:
url_opengui	urlgrab.c	/^url_opengui ()$/;"	f
url_save_callback	urlgrab.c	/^url_save_callback (void *arg1, char *file)$/;"	f	file:
url_treeview_new	urlgrab.c	/^url_treeview_new (GtkWidget *box)$/;"	f	file:
url_treeview_url_clicked_cb	urlgrab.c	/^url_treeview_url_clicked_cb (GtkWidget *view, GdkEventButton *event,$/;"	f	file:
urlcheck_function	xtext.h	/^	int (*urlcheck_function) (GtkWidget * xtext, char *word);$/;"	m	struct:_GtkXText
urlgrabberwindow	urlgrab.c	/^static GtkWidget *urlgrabberwindow = 0;$/;"	v	file:
use_icons	chanview.c	/^	unsigned int use_icons:1;$/;"	m	struct:_chanview	file:
user_box	fe-gtk.h	/^		*user_box,	\/* userlist box *\/$/;"	m	struct:session_gui
user_model	fe-gtk.h	/^	GtkListStore *user_model;	\/* for filling the GtkTreeView *\/$/;"	m	struct:restore_gui
user_tree	fe-gtk.h	/^		*user_tree,	\/* GtkTreeView *\/$/;"	m	struct:session_gui
usercommands_help	menu.c	1469;"	d	file:
userdata	chanview.c	/^	void *userdata;	\/* session * *\/$/;"	m	struct:_chan	file:
userdata	gtkutil.c	/^	void *userdata;$/;"	m	struct:file_req	file:
userlist_add_columns	userlistgui.c	/^userlist_add_columns (GtkTreeView * treeview)$/;"	f	file:
userlist_alpha_cmp	userlistgui.c	/^userlist_alpha_cmp (GtkTreeModel *model, GtkTreeIter *iter_a, GtkTreeIter *iter_b, gpointer userdata)$/;"	f	file:
userlist_button_cb	menu.c	/^userlist_button_cb (GtkWidget * button, char *cmd)$/;"	f
userlist_click_cb	userlistgui.c	/^userlist_click_cb (GtkWidget *widget, GdkEventButton *event, gpointer userdata)$/;"	f	file:
userlist_create	userlistgui.c	/^userlist_create (GtkWidget *box)$/;"	f
userlist_create_model	userlistgui.c	/^userlist_create_model (session *sess)$/;"	f
userlist_dnd_drop	userlistgui.c	/^userlist_dnd_drop (GtkTreeView *widget, GdkDragContext *context,$/;"	f	file:
userlist_dnd_leave	userlistgui.c	/^userlist_dnd_leave (GtkTreeView *widget, GdkDragContext *context, guint ttime)$/;"	f	file:
userlist_dnd_motion	userlistgui.c	/^userlist_dnd_motion (GtkTreeView *widget, GdkDragContext *context, gint x,$/;"	f	file:
userlist_get_value	userlistgui.c	/^userlist_get_value (GtkWidget *treeview)$/;"	f
userlist_key_cb	userlistgui.c	/^userlist_key_cb (GtkWidget *wid, GdkEventKey *evt, gpointer userdata)$/;"	f	file:
userlist_ops_cmp	userlistgui.c	/^userlist_ops_cmp (GtkTreeModel *model, GtkTreeIter *iter_a, GtkTreeIter *iter_b, gpointer userdata)$/;"	f	file:
userlist_select	userlistgui.c	/^userlist_select (session *sess, char *name)$/;"	f
userlist_selection_list	userlistgui.c	/^userlist_selection_list (GtkWidget *widget, int *num_ret)$/;"	f
userlist_set_value	userlistgui.c	/^userlist_set_value (GtkWidget *treeview, gfloat val)$/;"	f
userlist_settings	setup.c	/^static const setting userlist_settings[] =$/;"	v	file:
userlist_show	userlistgui.c	/^userlist_show (session *sess)$/;"	f
usermenu_create	menu.c	/^usermenu_create (GtkWidget *menu)$/;"	f	file:
usermenu_destroy	menu.c	/^usermenu_destroy (GtkWidget * menu)$/;"	f	file:
usermenu_update	menu.c	/^usermenu_update (void)$/;"	f
users	chanlist.c	/^	guint32 users;$/;"	m	struct:__anon3	file:
users	custom-list.h	/^	guint32 users;$/;"	m	struct:__anon8
vc_signal_tag	xtext.h	/^	gulong vc_signal_tag;        \/* signal handler for "value_changed" adj *\/$/;"	m	struct:_GtkXText
vertical	chanview.c	/^	unsigned int vertical:1;$/;"	m	struct:_chanview	file:
view_mode	dccgui.c	/^static short view_mode;	\/* 1=download 2=upload 3=both *\/$/;"	v	file:
vpane_left	fe-gtk.h	/^		*vpane_left,$/;"	m	struct:session_gui
vpane_right	fe-gtk.h	/^		*vpane_right,$/;"	m	struct:session_gui
vscrollbar	fe-gtk.h	/^		*vscrollbar,$/;"	m	struct:session_gui
widget	xtext.h	/^	GtkWidget widget;$/;"	m	struct:_GtkXText
width	xtext.c	/^	guint16 width;$/;"	m	struct:offlen_s	file:
win_height	dccgui.c	/^static int win_height = 256;$/;"	v	file:
win_width	dccgui.c	/^static int win_width = 600;$/;"	v	file:
window	banlist.h	/^	GtkWidget *window;$/;"	m	struct:banlist_info_s
window	dccgui.c	/^	GtkWidget *window;$/;"	m	struct:dccwindow	file:
window	fe-gtk.h	/^		*window,	\/* toplevel *\/$/;"	m	struct:session_gui
window_height	xtext.h	/^	int window_height;$/;"	m	struct:__anon31
window_width	xtext.h	/^	int window_width;				\/* window size when last rendered. *\/$/;"	m	struct:__anon31
word_check	sexy-spell-entry.h	/^	gboolean (*word_check)(SexySpellEntry *entry, const gchar *word);$/;"	m	struct:_SexySpellEntryClass
word_click	xtext.h	/^	void (*word_click) (GtkXText * xtext, char *word, GdkEventButton * event);$/;"	m	struct:_GtkXTextClass
word_ends	sexy-spell-entry.c	/^	gint                 *word_ends;$/;"	m	struct:_SexySpellEntryPriv	file:
word_misspelled	sexy-spell-entry.c	/^word_misspelled(SexySpellEntry *entry, int start, int end)$/;"	f	file:
word_select	xtext.h	/^	unsigned int word_select:1;$/;"	m	struct:_GtkXText
word_starts	sexy-spell-entry.c	/^	gint                 *word_starts;$/;"	m	struct:_SexySpellEntryPriv	file:
words	sexy-spell-entry.c	/^	gchar               **words;$/;"	m	struct:_SexySpellEntryPriv	file:
wordwrap	xtext.h	/^	unsigned int wordwrap:1;$/;"	m	struct:_GtkXText
writeable	banlist.h	/^	int writeable;	\/* subset of capable if op *\/$/;"	m	struct:banlist_info_s
xtext	fe-gtk.h	/^		*xtext,$/;"	m	struct:session_gui
xtext	xtext.h	/^	GtkXText *xtext;					\/* attached to this widget *\/$/;"	m	struct:__anon31
xtext_buffer	xtext.h	/^} xtext_buffer;$/;"	t	typeref:struct:__anon31
xtext_do_chunk	xtext.c	/^xtext_do_chunk(chunk_t *c)$/;"	f	file:
xtext_draw_bg	xtext.c	169;"	d	file:
xtext_draw_layout_line	xtext.c	/^xtext_draw_layout_line (GdkDrawable      *drawable,$/;"	f	file:
xtext_get_stamp_str	textgui.c	/^xtext_get_stamp_str (time_t tim, char **ret)$/;"	f
xtext_pango_attr	xtext.c	/^xtext_pango_attr (PangoAttribute *attr)$/;"	f	file:
xtext_pango_init	xtext.c	/^xtext_pango_init (GtkXText *xtext)$/;"	f	file:
xtext_set_bg	xtext.c	/^xtext_set_bg (GtkXText *xtext, GdkGC *gc, int index)$/;"	f	file:
xtext_set_fg	xtext.c	/^xtext_set_fg (GtkXText *xtext, GdkGC *gc, int index)$/;"	f	file:
xtext_signals	xtext.c	/^static guint xtext_signals[LAST_SIGNAL];$/;"	v	file:
